
STM32F4_DRV8305_control_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005948  08005948  00015948  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  20000000  08005990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020154  2**0
                  CONTENTS
  8 .bss          0000096c  20000158  20000158  00020158  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20000ac4  20000ac4  00020158  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002b57b  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005182  00000000  00000000  0004b6ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000f1c6  00000000  00000000  00050881  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b8  00000000  00000000  0005fa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001870  00000000  00000000  00060c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ade2  00000000  00000000  00062470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006f43  00000000  00000000  0006d252  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00074195  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003834  00000000  00000000  00074214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000158 	.word	0x20000158
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005930 	.word	0x08005930

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000015c 	.word	0x2000015c
 80001c4:	08005930 	.word	0x08005930

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b97a 	b.w	8000ca8 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	468c      	mov	ip, r1
 80009d2:	460d      	mov	r5, r1
 80009d4:	4604      	mov	r4, r0
 80009d6:	9e08      	ldr	r6, [sp, #32]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d151      	bne.n	8000a80 <__udivmoddi4+0xb4>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d96d      	bls.n	8000abe <__udivmoddi4+0xf2>
 80009e2:	fab2 fe82 	clz	lr, r2
 80009e6:	f1be 0f00 	cmp.w	lr, #0
 80009ea:	d00b      	beq.n	8000a04 <__udivmoddi4+0x38>
 80009ec:	f1ce 0c20 	rsb	ip, lr, #32
 80009f0:	fa01 f50e 	lsl.w	r5, r1, lr
 80009f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009f8:	fa02 f70e 	lsl.w	r7, r2, lr
 80009fc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a08:	0c25      	lsrs	r5, r4, #16
 8000a0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a0e:	fa1f f987 	uxth.w	r9, r7
 8000a12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a1a:	fb08 f309 	mul.w	r3, r8, r9
 8000a1e:	42ab      	cmp	r3, r5
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x6c>
 8000a22:	19ed      	adds	r5, r5, r7
 8000a24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a28:	f080 8123 	bcs.w	8000c72 <__udivmoddi4+0x2a6>
 8000a2c:	42ab      	cmp	r3, r5
 8000a2e:	f240 8120 	bls.w	8000c72 <__udivmoddi4+0x2a6>
 8000a32:	f1a8 0802 	sub.w	r8, r8, #2
 8000a36:	443d      	add	r5, r7
 8000a38:	1aed      	subs	r5, r5, r3
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a48:	fb00 f909 	mul.w	r9, r0, r9
 8000a4c:	45a1      	cmp	r9, r4
 8000a4e:	d909      	bls.n	8000a64 <__udivmoddi4+0x98>
 8000a50:	19e4      	adds	r4, r4, r7
 8000a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a56:	f080 810a 	bcs.w	8000c6e <__udivmoddi4+0x2a2>
 8000a5a:	45a1      	cmp	r9, r4
 8000a5c:	f240 8107 	bls.w	8000c6e <__udivmoddi4+0x2a2>
 8000a60:	3802      	subs	r0, #2
 8000a62:	443c      	add	r4, r7
 8000a64:	eba4 0409 	sub.w	r4, r4, r9
 8000a68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d061      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000a72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000a76:	2300      	movs	r3, #0
 8000a78:	6034      	str	r4, [r6, #0]
 8000a7a:	6073      	str	r3, [r6, #4]
 8000a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a80:	428b      	cmp	r3, r1
 8000a82:	d907      	bls.n	8000a94 <__udivmoddi4+0xc8>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d054      	beq.n	8000b32 <__udivmoddi4+0x166>
 8000a88:	2100      	movs	r1, #0
 8000a8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000a8e:	4608      	mov	r0, r1
 8000a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a94:	fab3 f183 	clz	r1, r3
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	f040 808e 	bne.w	8000bba <__udivmoddi4+0x1ee>
 8000a9e:	42ab      	cmp	r3, r5
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xdc>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80fa 	bhi.w	8000c9c <__udivmoddi4+0x2d0>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb65 0503 	sbc.w	r5, r5, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	46ac      	mov	ip, r5
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d03f      	beq.n	8000b36 <__udivmoddi4+0x16a>
 8000ab6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	b912      	cbnz	r2, 8000ac6 <__udivmoddi4+0xfa>
 8000ac0:	2701      	movs	r7, #1
 8000ac2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ac6:	fab7 fe87 	clz	lr, r7
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d134      	bne.n	8000b3a <__udivmoddi4+0x16e>
 8000ad0:	1beb      	subs	r3, r5, r7
 8000ad2:	0c3a      	lsrs	r2, r7, #16
 8000ad4:	fa1f fc87 	uxth.w	ip, r7
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ade:	0c25      	lsrs	r5, r4, #16
 8000ae0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ae4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ae8:	fb0c f308 	mul.w	r3, ip, r8
 8000aec:	42ab      	cmp	r3, r5
 8000aee:	d907      	bls.n	8000b00 <__udivmoddi4+0x134>
 8000af0:	19ed      	adds	r5, r5, r7
 8000af2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x132>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	f200 80d1 	bhi.w	8000ca0 <__udivmoddi4+0x2d4>
 8000afe:	4680      	mov	r8, r0
 8000b00:	1aed      	subs	r5, r5, r3
 8000b02:	b2a3      	uxth	r3, r4
 8000b04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b08:	fb02 5510 	mls	r5, r2, r0, r5
 8000b0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b10:	fb0c fc00 	mul.w	ip, ip, r0
 8000b14:	45a4      	cmp	ip, r4
 8000b16:	d907      	bls.n	8000b28 <__udivmoddi4+0x15c>
 8000b18:	19e4      	adds	r4, r4, r7
 8000b1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x15a>
 8000b20:	45a4      	cmp	ip, r4
 8000b22:	f200 80b8 	bhi.w	8000c96 <__udivmoddi4+0x2ca>
 8000b26:	4618      	mov	r0, r3
 8000b28:	eba4 040c 	sub.w	r4, r4, ip
 8000b2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b30:	e79d      	b.n	8000a6e <__udivmoddi4+0xa2>
 8000b32:	4631      	mov	r1, r6
 8000b34:	4630      	mov	r0, r6
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	f1ce 0420 	rsb	r4, lr, #32
 8000b3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b46:	fa20 f804 	lsr.w	r8, r0, r4
 8000b4a:	0c3a      	lsrs	r2, r7, #16
 8000b4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b50:	ea48 0803 	orr.w	r8, r8, r3
 8000b54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000b60:	fa1f fc87 	uxth.w	ip, r7
 8000b64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000b68:	fb01 f30c 	mul.w	r3, r1, ip
 8000b6c:	42ab      	cmp	r3, r5
 8000b6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000b72:	d909      	bls.n	8000b88 <__udivmoddi4+0x1bc>
 8000b74:	19ed      	adds	r5, r5, r7
 8000b76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b7a:	f080 808a 	bcs.w	8000c92 <__udivmoddi4+0x2c6>
 8000b7e:	42ab      	cmp	r3, r5
 8000b80:	f240 8087 	bls.w	8000c92 <__udivmoddi4+0x2c6>
 8000b84:	3902      	subs	r1, #2
 8000b86:	443d      	add	r5, r7
 8000b88:	1aeb      	subs	r3, r5, r3
 8000b8a:	fa1f f588 	uxth.w	r5, r8
 8000b8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000b92:	fb02 3310 	mls	r3, r2, r0, r3
 8000b96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000b9e:	42ab      	cmp	r3, r5
 8000ba0:	d907      	bls.n	8000bb2 <__udivmoddi4+0x1e6>
 8000ba2:	19ed      	adds	r5, r5, r7
 8000ba4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ba8:	d26f      	bcs.n	8000c8a <__udivmoddi4+0x2be>
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d96d      	bls.n	8000c8a <__udivmoddi4+0x2be>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	443d      	add	r5, r7
 8000bb2:	1aeb      	subs	r3, r5, r3
 8000bb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb8:	e78f      	b.n	8000ada <__udivmoddi4+0x10e>
 8000bba:	f1c1 0720 	rsb	r7, r1, #32
 8000bbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000bc2:	408b      	lsls	r3, r1
 8000bc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc8:	ea48 0303 	orr.w	r3, r8, r3
 8000bcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000bd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000bda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000bde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000be2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000be6:	fa1f f883 	uxth.w	r8, r3
 8000bea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000bee:	fb09 f408 	mul.w	r4, r9, r8
 8000bf2:	42ac      	cmp	r4, r5
 8000bf4:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x244>
 8000bfe:	18ed      	adds	r5, r5, r3
 8000c00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c04:	d243      	bcs.n	8000c8e <__udivmoddi4+0x2c2>
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	d941      	bls.n	8000c8e <__udivmoddi4+0x2c2>
 8000c0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0e:	441d      	add	r5, r3
 8000c10:	1b2d      	subs	r5, r5, r4
 8000c12:	fa1f fe8e 	uxth.w	lr, lr
 8000c16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c22:	fb00 f808 	mul.w	r8, r0, r8
 8000c26:	45a0      	cmp	r8, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x26e>
 8000c2a:	18e4      	adds	r4, r4, r3
 8000c2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c30:	d229      	bcs.n	8000c86 <__udivmoddi4+0x2ba>
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	d927      	bls.n	8000c86 <__udivmoddi4+0x2ba>
 8000c36:	3802      	subs	r0, #2
 8000c38:	441c      	add	r4, r3
 8000c3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3e:	eba4 0408 	sub.w	r4, r4, r8
 8000c42:	fba0 8902 	umull	r8, r9, r0, r2
 8000c46:	454c      	cmp	r4, r9
 8000c48:	46c6      	mov	lr, r8
 8000c4a:	464d      	mov	r5, r9
 8000c4c:	d315      	bcc.n	8000c7a <__udivmoddi4+0x2ae>
 8000c4e:	d012      	beq.n	8000c76 <__udivmoddi4+0x2aa>
 8000c50:	b156      	cbz	r6, 8000c68 <__udivmoddi4+0x29c>
 8000c52:	ebba 030e 	subs.w	r3, sl, lr
 8000c56:	eb64 0405 	sbc.w	r4, r4, r5
 8000c5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431f      	orrs	r7, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	6037      	str	r7, [r6, #0]
 8000c66:	6074      	str	r4, [r6, #4]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	e6f8      	b.n	8000a64 <__udivmoddi4+0x98>
 8000c72:	4690      	mov	r8, r2
 8000c74:	e6e0      	b.n	8000a38 <__udivmoddi4+0x6c>
 8000c76:	45c2      	cmp	sl, r8
 8000c78:	d2ea      	bcs.n	8000c50 <__udivmoddi4+0x284>
 8000c7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000c82:	3801      	subs	r0, #1
 8000c84:	e7e4      	b.n	8000c50 <__udivmoddi4+0x284>
 8000c86:	4628      	mov	r0, r5
 8000c88:	e7d7      	b.n	8000c3a <__udivmoddi4+0x26e>
 8000c8a:	4640      	mov	r0, r8
 8000c8c:	e791      	b.n	8000bb2 <__udivmoddi4+0x1e6>
 8000c8e:	4681      	mov	r9, r0
 8000c90:	e7be      	b.n	8000c10 <__udivmoddi4+0x244>
 8000c92:	4601      	mov	r1, r0
 8000c94:	e778      	b.n	8000b88 <__udivmoddi4+0x1bc>
 8000c96:	3802      	subs	r0, #2
 8000c98:	443c      	add	r4, r7
 8000c9a:	e745      	b.n	8000b28 <__udivmoddi4+0x15c>
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e708      	b.n	8000ab2 <__udivmoddi4+0xe6>
 8000ca0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca4:	443d      	add	r5, r7
 8000ca6:	e72b      	b.n	8000b00 <__udivmoddi4+0x134>

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_InitTick+0x3c>)
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_InitTick+0x40>)
{
 8000cb2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	7818      	ldrb	r0, [r3, #0]
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f0 	udiv	r3, r3, r0
 8000cbe:	6810      	ldr	r0, [r2, #0]
 8000cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cc4:	f000 fab4 	bl	8001230 <HAL_SYSTICK_Config>
 8000cc8:	4604      	mov	r4, r0
 8000cca:	b958      	cbnz	r0, 8000ce4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	2d0f      	cmp	r5, #15
 8000cce:	d809      	bhi.n	8000ce4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	f000 fa6a 	bl	80011b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_InitTick+0x44>)
 8000cde:	4620      	mov	r0, r4
 8000ce0:	601d      	str	r5, [r3, #0]
 8000ce2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ce4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ce6:	bd38      	pop	{r3, r4, r5, pc}
 8000ce8:	200000ec 	.word	0x200000ec
 8000cec:	20000000 	.word	0x20000000
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_Init>:
{
 8000cf4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x30>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cfe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d0e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 fa3b 	bl	800118c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ffc8 	bl	8000cac <HAL_InitTick>
  HAL_MspInit();
 8000d1c:	f004 f9ac 	bl	8005078 <HAL_MspInit>
}
 8000d20:	2000      	movs	r0, #0
 8000d22:	bd08      	pop	{r3, pc}
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IncTick+0x10>)
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_IncTick+0x14>)
 8000d2c:	6811      	ldr	r1, [r2, #0]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	440b      	add	r3, r1
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	200001cc 	.word	0x200001cc
 8000d3c:	20000000 	.word	0x20000000

08000d40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d40:	4b01      	ldr	r3, [pc, #4]	; (8000d48 <HAL_GetTick+0x8>)
 8000d42:	6818      	ldr	r0, [r3, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	200001cc 	.word	0x200001cc

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d50:	f7ff fff6 	bl	8000d40 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d54:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000d56:	bf1c      	itt	ne
 8000d58:	4b05      	ldrne	r3, [pc, #20]	; (8000d70 <HAL_Delay+0x24>)
 8000d5a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	bf18      	it	ne
 8000d60:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d62:	f7ff ffed 	bl	8000d40 <HAL_GetTick>
 8000d66:	1b40      	subs	r0, r0, r5
 8000d68:	4284      	cmp	r4, r0
 8000d6a:	d8fa      	bhi.n	8000d62 <HAL_Delay+0x16>
  {
  }
}
 8000d6c:	bd38      	pop	{r3, r4, r5, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000000 	.word	0x20000000

08000d74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d74:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d76:	4604      	mov	r4, r0
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	f000 8099 	beq.w	8000eb0 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000d80:	b923      	cbnz	r3, 8000d8c <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d82:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d88:	f004 f9be 	bl	8005108 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8e:	06db      	lsls	r3, r3, #27
 8000d90:	f100 808c 	bmi.w	8000eac <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d9a:	f023 0302 	bic.w	r3, r3, #2
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000da4:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <HAL_ADC_Init+0x140>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000dac:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	6861      	ldr	r1, [r4, #4]
 8000db2:	430a      	orrs	r2, r1
 8000db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000db6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000db8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dca:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dcc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dce:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000dd2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dda:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ddc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	430a      	orrs	r2, r1
 8000de8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dea:	4933      	ldr	r1, [pc, #204]	; (8000eb8 <HAL_ADC_Init+0x144>)
 8000dec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dee:	428a      	cmp	r2, r1
 8000df0:	d050      	beq.n	8000e94 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000df2:	6899      	ldr	r1, [r3, #8]
 8000df4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000df8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000dfa:	6899      	ldr	r1, [r3, #8]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e00:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e0e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e10:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e12:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e14:	f022 0202 	bic.w	r2, r2, #2
 8000e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000e20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e22:	6a22      	ldr	r2, [r4, #32]
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	d03d      	beq.n	8000ea4 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e28:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e30:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000e38:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	3901      	subs	r1, #1
 8000e3e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e46:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e48:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e50:	3901      	subs	r1, #1
 8000e52:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000e56:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e58:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e5a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000e60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000e68:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e6a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e6c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e74:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e76:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e78:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000e7c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e7e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 8000e92:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ea2:	e7b4      	b.n	8000e0e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000ea4:	685a      	ldr	r2, [r3, #4]
 8000ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eaa:	e7ca      	b.n	8000e42 <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000eac:	2001      	movs	r0, #1
 8000eae:	e7ed      	b.n	8000e8c <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
}
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	40012300 	.word	0x40012300
 8000eb8:	0f000001 	.word	0x0f000001

08000ebc <HAL_ADC_Start>:
{
 8000ebc:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000ec2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d04e      	beq.n	8000f68 <HAL_ADC_Start+0xac>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000ed0:	6803      	ldr	r3, [r0, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	07d1      	lsls	r1, r2, #31
 8000ed6:	d505      	bpl.n	8000ee4 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ed8:	689a      	ldr	r2, [r3, #8]
 8000eda:	07d2      	lsls	r2, r2, #31
 8000edc:	d414      	bmi.n	8000f08 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 8000ede:	2000      	movs	r0, #0
}
 8000ee0:	b002      	add	sp, #8
 8000ee2:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 8000ee4:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ee6:	4921      	ldr	r1, [pc, #132]	; (8000f6c <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eee:	4a20      	ldr	r2, [pc, #128]	; (8000f70 <HAL_ADC_Start+0xb4>)
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	fbb2 f2f1 	udiv	r2, r2, r1
 8000ef6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000efa:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000efc:	9a01      	ldr	r2, [sp, #4]
 8000efe:	2a00      	cmp	r2, #0
 8000f00:	d0ea      	beq.n	8000ed8 <HAL_ADC_Start+0x1c>
      counter--;
 8000f02:	9a01      	ldr	r2, [sp, #4]
 8000f04:	3a01      	subs	r2, #1
 8000f06:	e7f8      	b.n	8000efa <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000f08:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f0e:	f022 0201 	bic.w	r2, r2, #1
 8000f12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f16:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f1c:	bf41      	itttt	mi
 8000f1e:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000f20:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000f24:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000f28:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000f2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f30:	bf1c      	itt	ne
 8000f32:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000f34:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000f38:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f44:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_ADC_Start+0xb8>)
 8000f48:	6852      	ldr	r2, [r2, #4]
 8000f4a:	06d2      	lsls	r2, r2, #27
 8000f4c:	d108      	bne.n	8000f60 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f4e:	6898      	ldr	r0, [r3, #8]
 8000f50:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000f54:	d1c3      	bne.n	8000ede <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e7bf      	b.n	8000ee0 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_ADC_Start+0xbc>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d1bb      	bne.n	8000ede <HAL_ADC_Start+0x22>
 8000f66:	e7f2      	b.n	8000f4e <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	e7b9      	b.n	8000ee0 <HAL_ADC_Start+0x24>
 8000f6c:	000f4240 	.word	0x000f4240
 8000f70:	200000ec 	.word	0x200000ec
 8000f74:	40012300 	.word	0x40012300
 8000f78:	40012000 	.word	0x40012000

08000f7c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000f7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d017      	beq.n	8000fb4 <HAL_ADC_Stop+0x38>
 8000f84:	2301      	movs	r3, #1
 8000f86:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8000f8a:	6803      	ldr	r3, [r0, #0]
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	f022 0201 	bic.w	r2, r2, #1
 8000f92:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	07db      	lsls	r3, r3, #31
 8000f98:	d407      	bmi.n	8000faa <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8000f9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fa0:	f023 0301 	bic.w	r3, r3, #1
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000faa:	2300      	movs	r3, #0
 8000fac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	4770      	bx	lr
  __HAL_LOCK(hadc);
 8000fb4:	2002      	movs	r0, #2
}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fb8:	6803      	ldr	r3, [r0, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
{
 8000fbc:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fbe:	0556      	lsls	r6, r2, #21
{
 8000fc0:	4604      	mov	r4, r0
 8000fc2:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fc4:	d50b      	bpl.n	8000fde <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000fc6:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fc8:	05d8      	lsls	r0, r3, #23
 8000fca:	d508      	bpl.n	8000fde <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fce:	f043 0320 	orr.w	r3, r3, #32
 8000fd2:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000fda:	2001      	movs	r0, #1
 8000fdc:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8000fde:	f7ff feaf 	bl	8000d40 <HAL_GetTick>
 8000fe2:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	0792      	lsls	r2, r2, #30
 8000fea:	d50c      	bpl.n	8001006 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fec:	f06f 0212 	mvn.w	r2, #18
 8000ff0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ff2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ff8:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001000:	d013      	beq.n	800102a <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 8001002:	2000      	movs	r0, #0
 8001004:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001006:	1c69      	adds	r1, r5, #1
 8001008:	d0ed      	beq.n	8000fe6 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800100a:	b945      	cbnz	r5, 800101e <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800100c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8001014:	2300      	movs	r3, #0
 8001016:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
 800101c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800101e:	f7ff fe8f 	bl	8000d40 <HAL_GetTick>
 8001022:	1b80      	subs	r0, r0, r6
 8001024:	4285      	cmp	r5, r0
 8001026:	d2dd      	bcs.n	8000fe4 <HAL_ADC_PollForConversion+0x2c>
 8001028:	e7f0      	b.n	800100c <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800102a:	69a2      	ldr	r2, [r4, #24]
 800102c:	2a00      	cmp	r2, #0
 800102e:	d1e8      	bne.n	8001002 <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001032:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001036:	d002      	beq.n	800103e <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001038:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800103a:	055b      	lsls	r3, r3, #21
 800103c:	d4e1      	bmi.n	8001002 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800103e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001044:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001046:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001048:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800104c:	d1d9      	bne.n	8001002 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800104e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001056:	bd70      	pop	{r4, r5, r6, pc}

08001058 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001058:	6803      	ldr	r3, [r0, #0]
 800105a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800105c:	4770      	bx	lr
	...

08001060 <HAL_ADC_ConfigChannel>:
{
 8001060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001062:	2300      	movs	r3, #0
 8001064:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001066:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800106a:	2b01      	cmp	r3, #1
 800106c:	f000 8083 	beq.w	8001176 <HAL_ADC_ConfigChannel+0x116>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001070:	680d      	ldr	r5, [r1, #0]
 8001072:	6804      	ldr	r4, [r0, #0]
 8001074:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8001076:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001078:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800107a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 800107e:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001080:	d92a      	bls.n	80010d8 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001082:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8001086:	68e7      	ldr	r7, [r4, #12]
 8001088:	3b1e      	subs	r3, #30
 800108a:	f04f 0e07 	mov.w	lr, #7
 800108e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001092:	ea27 070e 	bic.w	r7, r7, lr
 8001096:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001098:	68e7      	ldr	r7, [r4, #12]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	433b      	orrs	r3, r7
 80010a0:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80010a2:	684a      	ldr	r2, [r1, #4]
 80010a4:	2a06      	cmp	r2, #6
 80010a6:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80010aa:	d825      	bhi.n	80010f8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010ac:	4413      	add	r3, r2
 80010ae:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80010b0:	1f59      	subs	r1, r3, #5
 80010b2:	231f      	movs	r3, #31
 80010b4:	408b      	lsls	r3, r1
 80010b6:	ea27 0303 	bic.w	r3, r7, r3
 80010ba:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80010be:	fa06 f101 	lsl.w	r1, r6, r1
 80010c2:	4311      	orrs	r1, r2
 80010c4:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <HAL_ADC_ConfigChannel+0x11c>)
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d034      	beq.n	8001136 <HAL_ADC_ConfigChannel+0xd6>
  __HAL_UNLOCK(hadc);
 80010cc:	2300      	movs	r3, #0
 80010ce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80010d2:	4618      	mov	r0, r3
}
 80010d4:	b003      	add	sp, #12
 80010d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010d8:	6927      	ldr	r7, [r4, #16]
 80010da:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80010de:	f04f 0e07 	mov.w	lr, #7
 80010e2:	fa0e fe03 	lsl.w	lr, lr, r3
 80010e6:	ea27 070e 	bic.w	r7, r7, lr
 80010ea:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010ec:	6927      	ldr	r7, [r4, #16]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	433b      	orrs	r3, r7
 80010f4:	6123      	str	r3, [r4, #16]
 80010f6:	e7d4      	b.n	80010a2 <HAL_ADC_ConfigChannel+0x42>
  else if (sConfig->Rank < 13U)
 80010f8:	2a0c      	cmp	r2, #12
 80010fa:	d80e      	bhi.n	800111a <HAL_ADC_ConfigChannel+0xba>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010fc:	4413      	add	r3, r2
 80010fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001100:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8001104:	231f      	movs	r3, #31
 8001106:	4093      	lsls	r3, r2
 8001108:	ea21 0303 	bic.w	r3, r1, r3
 800110c:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800110e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001110:	fa06 f202 	lsl.w	r2, r6, r2
 8001114:	431a      	orrs	r2, r3
 8001116:	6322      	str	r2, [r4, #48]	; 0x30
 8001118:	e7d5      	b.n	80010c6 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800111a:	4413      	add	r3, r2
 800111c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800111e:	3b41      	subs	r3, #65	; 0x41
 8001120:	221f      	movs	r2, #31
 8001122:	409a      	lsls	r2, r3
 8001124:	ea21 0202 	bic.w	r2, r1, r2
 8001128:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800112a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800112c:	fa06 f103 	lsl.w	r1, r6, r3
 8001130:	4311      	orrs	r1, r2
 8001132:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001134:	e7c7      	b.n	80010c6 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001136:	2d12      	cmp	r5, #18
 8001138:	d104      	bne.n	8001144 <HAL_ADC_ConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <HAL_ADC_ConfigChannel+0x120>)
 800113c:	6853      	ldr	r3, [r2, #4]
 800113e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001142:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001144:	f1a5 0310 	sub.w	r3, r5, #16
 8001148:	2b01      	cmp	r3, #1
 800114a:	d8bf      	bhi.n	80010cc <HAL_ADC_ConfigChannel+0x6c>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_ADC_ConfigChannel+0x120>)
 800114e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001150:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001152:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001156:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001158:	d1b8      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x6c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_ADC_ConfigChannel+0x124>)
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_ADC_ConfigChannel+0x128>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	fbb3 f2f2 	udiv	r2, r3, r2
 8001164:	230a      	movs	r3, #10
 8001166:	4353      	muls	r3, r2
        counter--;
 8001168:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800116a:	9b01      	ldr	r3, [sp, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0ad      	beq.n	80010cc <HAL_ADC_ConfigChannel+0x6c>
        counter--;
 8001170:	9b01      	ldr	r3, [sp, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	e7f8      	b.n	8001168 <HAL_ADC_ConfigChannel+0x108>
  __HAL_LOCK(hadc);
 8001176:	2002      	movs	r0, #2
 8001178:	e7ac      	b.n	80010d4 <HAL_ADC_ConfigChannel+0x74>
 800117a:	bf00      	nop
 800117c:	40012000 	.word	0x40012000
 8001180:	40012300 	.word	0x40012300
 8001184:	200000ec 	.word	0x200000ec
 8001188:	000f4240 	.word	0x000f4240

0800118c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800118e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001190:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001194:	041b      	lsls	r3, r3, #16
 8001196:	0c1b      	lsrs	r3, r3, #16
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800119c:	0200      	lsls	r0, r0, #8
 800119e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80011a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80011a8:	60d3      	str	r3, [r2, #12]
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b2:	b530      	push	{r4, r5, lr}
 80011b4:	68dc      	ldr	r4, [r3, #12]
 80011b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	bf28      	it	cs
 80011c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 0501 	mov.w	r5, #1
 80011cc:	fa05 f303 	lsl.w	r3, r5, r3
 80011d0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d4:	bf8c      	ite	hi
 80011d6:	3c03      	subhi	r4, #3
 80011d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011da:	4019      	ands	r1, r3
 80011dc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011de:	fa05 f404 	lsl.w	r4, r5, r4
 80011e2:	3c01      	subs	r4, #1
 80011e4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80011e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	ea42 0201 	orr.w	r2, r2, r1
 80011ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	bfaf      	iteee	ge
 80011f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	f000 000f 	andlt.w	r0, r0, #15
 80011fa:	4b06      	ldrlt	r3, [pc, #24]	; (8001214 <HAL_NVIC_SetPriority+0x64>)
 80011fc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	bfa5      	ittet	ge
 8001200:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001204:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800120c:	bd30      	pop	{r4, r5, pc}
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00
 8001214:	e000ed14 	.word	0xe000ed14

08001218 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001218:	0942      	lsrs	r2, r0, #5
 800121a:	2301      	movs	r3, #1
 800121c:	f000 001f 	and.w	r0, r0, #31
 8001220:	fa03 f000 	lsl.w	r0, r3, r0
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <HAL_NVIC_EnableIRQ+0x14>)
 8001226:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	3801      	subs	r0, #1
 8001232:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001236:	d20a      	bcs.n	800124e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	21f0      	movs	r1, #240	; 0xf0
 8001240:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800124e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e010 	.word	0xe000e010
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800125e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001260:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001262:	bf0c      	ite	eq
 8001264:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001268:	f022 0204 	bicne.w	r2, r2, #4
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	4770      	bx	lr
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001274:	4770      	bx	lr

08001276 <HAL_SYSTICK_IRQHandler>:
{
 8001276:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001278:	f7ff fffc 	bl	8001274 <HAL_SYSTICK_Callback>
 800127c:	bd08      	pop	{r3, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001286:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001288:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001438 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800128c:	4a68      	ldr	r2, [pc, #416]	; (8001430 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800128e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800143c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001294:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001296:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800129c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80012a4:	45b6      	cmp	lr, r6
 80012a6:	f040 80ae 	bne.w	8001406 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012aa:	684c      	ldr	r4, [r1, #4]
 80012ac:	f024 0710 	bic.w	r7, r4, #16
 80012b0:	2f02      	cmp	r7, #2
 80012b2:	d116      	bne.n	80012e2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80012b4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80012b8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012bc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80012c0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012c8:	f04f 0c0f 	mov.w	ip, #15
 80012cc:	fa0c fc0b 	lsl.w	ip, ip, fp
 80012d0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012d4:	690d      	ldr	r5, [r1, #16]
 80012d6:	fa05 f50b 	lsl.w	r5, r5, fp
 80012da:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80012de:	f8ca 5020 	str.w	r5, [sl, #32]
 80012e2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80012e8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ec:	fa05 f50a 	lsl.w	r5, r5, sl
 80012f0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fe:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001300:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001304:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001306:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130a:	d811      	bhi.n	8001330 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800130c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800130e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	68cf      	ldr	r7, [r1, #12]
 8001314:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001318:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800131c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800131e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001320:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001324:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001328:	409f      	lsls	r7, r3
 800132a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800132e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001330:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001334:	688f      	ldr	r7, [r1, #8]
 8001336:	fa07 f70a 	lsl.w	r7, r7, sl
 800133a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800133c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133e:	00e5      	lsls	r5, r4, #3
 8001340:	d561      	bpl.n	8001406 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	f04f 0b00 	mov.w	fp, #0
 8001346:	f8cd b00c 	str.w	fp, [sp, #12]
 800134a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134e:	4d39      	ldr	r5, [pc, #228]	; (8001434 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001350:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001354:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001358:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800135c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001360:	9703      	str	r7, [sp, #12]
 8001362:	9f03      	ldr	r7, [sp, #12]
 8001364:	f023 0703 	bic.w	r7, r3, #3
 8001368:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800136c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001370:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001374:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001378:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800137c:	f04f 0e0f 	mov.w	lr, #15
 8001380:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001384:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001386:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138a:	d043      	beq.n	8001414 <HAL_GPIO_Init+0x194>
 800138c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001390:	42a8      	cmp	r0, r5
 8001392:	d041      	beq.n	8001418 <HAL_GPIO_Init+0x198>
 8001394:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001398:	42a8      	cmp	r0, r5
 800139a:	d03f      	beq.n	800141c <HAL_GPIO_Init+0x19c>
 800139c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	d03d      	beq.n	8001420 <HAL_GPIO_Init+0x1a0>
 80013a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013a8:	42a8      	cmp	r0, r5
 80013aa:	d03b      	beq.n	8001424 <HAL_GPIO_Init+0x1a4>
 80013ac:	4548      	cmp	r0, r9
 80013ae:	d03b      	beq.n	8001428 <HAL_GPIO_Init+0x1a8>
 80013b0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80013b4:	42a8      	cmp	r0, r5
 80013b6:	d039      	beq.n	800142c <HAL_GPIO_Init+0x1ac>
 80013b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013bc:	42a8      	cmp	r0, r5
 80013be:	bf14      	ite	ne
 80013c0:	2508      	movne	r5, #8
 80013c2:	2507      	moveq	r5, #7
 80013c4:	fa05 f50c 	lsl.w	r5, r5, ip
 80013c8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013cc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80013ce:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80013d6:	bf0c      	ite	eq
 80013d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013da:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80013dc:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80013de:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80013e4:	bf0c      	ite	eq
 80013e6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013e8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80013ea:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ec:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013ee:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80013f2:	bf0c      	ite	eq
 80013f4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80013f6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80013f8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80013fa:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013fc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80013fe:	bf54      	ite	pl
 8001400:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001402:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001404:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	3301      	adds	r3, #1
 8001408:	2b10      	cmp	r3, #16
 800140a:	f47f af44 	bne.w	8001296 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800140e:	b005      	add	sp, #20
 8001410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001414:	465d      	mov	r5, fp
 8001416:	e7d5      	b.n	80013c4 <HAL_GPIO_Init+0x144>
 8001418:	2501      	movs	r5, #1
 800141a:	e7d3      	b.n	80013c4 <HAL_GPIO_Init+0x144>
 800141c:	2502      	movs	r5, #2
 800141e:	e7d1      	b.n	80013c4 <HAL_GPIO_Init+0x144>
 8001420:	2503      	movs	r5, #3
 8001422:	e7cf      	b.n	80013c4 <HAL_GPIO_Init+0x144>
 8001424:	2504      	movs	r5, #4
 8001426:	e7cd      	b.n	80013c4 <HAL_GPIO_Init+0x144>
 8001428:	2505      	movs	r5, #5
 800142a:	e7cb      	b.n	80013c4 <HAL_GPIO_Init+0x144>
 800142c:	2506      	movs	r5, #6
 800142e:	e7c9      	b.n	80013c4 <HAL_GPIO_Init+0x144>
 8001430:	40013c00 	.word	0x40013c00
 8001434:	40020000 	.word	0x40020000
 8001438:	40023800 	.word	0x40023800
 800143c:	40021400 	.word	0x40021400

08001440 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001440:	6903      	ldr	r3, [r0, #16]
 8001442:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001444:	bf14      	ite	ne
 8001446:	2001      	movne	r0, #1
 8001448:	2000      	moveq	r0, #0
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	b10a      	cbz	r2, 8001452 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144e:	6181      	str	r1, [r0, #24]
 8001450:	4770      	bx	lr
 8001452:	0409      	lsls	r1, r1, #16
 8001454:	e7fb      	b.n	800144e <HAL_GPIO_WritePin+0x2>

08001456 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001456:	6943      	ldr	r3, [r0, #20]
 8001458:	4059      	eors	r1, r3
 800145a:	6141      	str	r1, [r0, #20]
 800145c:	4770      	bx	lr

0800145e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800145e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8001462:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd); 
 8001464:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 8001468:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
 800146c:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8001470:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd); 
 8001474:	2801      	cmp	r0, #1
 8001476:	d021      	beq.n	80014bc <HAL_HCD_HC_Init+0x5e>
 8001478:	2001      	movs	r0, #1
 800147a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  hhcd->hc[ch_num].dev_addr = dev_address;
 800147e:	2028      	movs	r0, #40	; 0x28
 8001480:	fb00 4001 	mla	r0, r0, r1, r4
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8001484:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 8001488:	09d5      	lsrs	r5, r2, #7
  hhcd->hc[ch_num].dev_addr = dev_address;
 800148a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 800148e:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001492:	f880 703f 	strb.w	r7, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 8001496:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 800149a:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 800149e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 80014a2:	f8a0 e040 	strh.w	lr, [r0, #64]	; 0x40
  
  status =  USB_HC_Init(hhcd->Instance, 
 80014a6:	e88d 40c0 	stmia.w	sp, {r6, r7, lr}
 80014aa:	6820      	ldr	r0, [r4, #0]
 80014ac:	f001 ffca 	bl	8003444 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd); 
 80014b0:	2300      	movs	r3, #0
 80014b2:	f884 3290 	strb.w	r3, [r4, #656]	; 0x290
  
  return status;
}
 80014b6:	b004      	add	sp, #16
 80014b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hhcd); 
 80014bc:	2002      	movs	r0, #2
 80014be:	e7fa      	b.n	80014b6 <HAL_HCD_HC_Init+0x58>

080014c0 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_LOCK(hhcd);   
 80014c0:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80014c4:	2b01      	cmp	r3, #1
{
 80014c6:	b510      	push	{r4, lr}
 80014c8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);   
 80014ca:	d009      	beq.n	80014e0 <HAL_HCD_HC_Halt+0x20>
 80014cc:	2301      	movs	r3, #1
 80014ce:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);   
 80014d2:	6800      	ldr	r0, [r0, #0]
 80014d4:	f002 f96f 	bl	80037b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80014d8:	2000      	movs	r0, #0
 80014da:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  
  return status;
 80014de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);   
 80014e0:	2002      	movs	r0, #2
}
 80014e2:	bd10      	pop	{r4, pc}

080014e4 <HAL_HCD_Init>:
{ 
 80014e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 80014e8:	4607      	mov	r7, r0
{ 
 80014ea:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 80014ec:	b3a0      	cbz	r0, 8001558 <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80014ee:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 80014f0:	463c      	mov	r4, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f2:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
  HAL_HCD_MspInit(hhcd);
 80014f6:	f003 ffd5 	bl	80054a4 <HAL_HCD_MspInit>
  __HAL_HCD_DISABLE(hhcd);
 80014fa:	f854 0b10 	ldr.w	r0, [r4], #16
 80014fe:	f001 fe4b 	bl	8003198 <USB_DisableGlobalInt>
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	466d      	mov	r5, sp
 8001506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001510:	e885 0003 	stmia.w	r5, {r0, r1}
 8001514:	f107 0804 	add.w	r8, r7, #4
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8001518:	463e      	mov	r6, r7
  USB_CoreInit(hhcd->Instance, hhcd->Init);
 800151a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f001 fdfa 	bl	8003118 <USB_CoreInit>
  USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8001524:	f856 0b10 	ldr.w	r0, [r6], #16
 8001528:	2101      	movs	r1, #1
 800152a:	f001 fe3b 	bl	80031a4 <USB_SetCurrentMode>
  USB_HostInit(hhcd->Instance, hhcd->Init);
 800152e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001530:	466d      	mov	r5, sp
 8001532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001534:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800153c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001540:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f001 fea9 	bl	800329c <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 800154a:	2301      	movs	r3, #1
 800154c:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
  return HAL_OK;
 8001550:	2000      	movs	r0, #0
}
 8001552:	b00a      	add	sp, #40	; 0x28
 8001554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001558:	2001      	movs	r0, #1
 800155a:	e7fa      	b.n	8001552 <HAL_HCD_Init+0x6e>

0800155c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,  
                                           uint8_t token, 
                                           uint8_t* pbuff, 
                                           uint16_t length,
                                           uint8_t do_ping) 
{
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 800155e:	2628      	movs	r6, #40	; 0x28
 8001560:	fb06 0601 	mla	r6, r6, r1, r0
{
 8001564:	f89d e014 	ldrb.w	lr, [sp, #20]
 8001568:	9d06      	ldr	r5, [sp, #24]
 800156a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 800156e:	f89d 7020 	ldrb.w	r7, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001572:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type; 
 8001576:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
  
  if(token == 0)
 800157a:	f1be 0f00 	cmp.w	lr, #0
 800157e:	d10e      	bne.n	800159e <HAL_HCD_HC_SubmitRequest+0x42>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001580:	f04f 0e03 	mov.w	lr, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }
  
  /* Manage Data Toggle */
  switch(ep_type)
 8001584:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001586:	f886 e042 	strb.w	lr, [r6, #66]	; 0x42
  switch(ep_type)
 800158a:	d04a      	beq.n	8001622 <HAL_HCD_HC_SubmitRequest+0xc6>
 800158c:	4573      	cmp	r3, lr
 800158e:	d055      	beq.n	800163c <HAL_HCD_HC_SubmitRequest+0xe0>
 8001590:	2b01      	cmp	r3, #1
 8001592:	d12f      	bne.n	80015f4 <HAL_HCD_HC_SubmitRequest+0x98>
      }
    }
    break;
    
  case EP_TYPE_ISOC: 
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001594:	2328      	movs	r3, #40	; 0x28
 8001596:	fb03 0301 	mla	r3, r3, r1, r0
 800159a:	2200      	movs	r2, #0
 800159c:	e055      	b.n	800164a <HAL_HCD_HC_SubmitRequest+0xee>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800159e:	f04f 0c02 	mov.w	ip, #2
 80015a2:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch(ep_type)
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d824      	bhi.n	80015f4 <HAL_HCD_HC_SubmitRequest+0x98>
 80015aa:	a601      	add	r6, pc, #4	; (adr r6, 80015b0 <HAL_HCD_HC_SubmitRequest+0x54>)
 80015ac:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	08001595 	.word	0x08001595
 80015b8:	08001623 	.word	0x08001623
 80015bc:	0800163d 	.word	0x0800163d
    if((token == 1) && (direction == 0)) /*send data */
 80015c0:	f1be 0f01 	cmp.w	lr, #1
 80015c4:	d116      	bne.n	80015f4 <HAL_HCD_HC_SubmitRequest+0x98>
 80015c6:	b9aa      	cbnz	r2, 80015f4 <HAL_HCD_HC_SubmitRequest+0x98>
      if (length == 0)
 80015c8:	b924      	cbnz	r4, 80015d4 <HAL_HCD_HC_SubmitRequest+0x78>
        hhcd->hc[ch_num].toggle_out = 1;
 80015ca:	2328      	movs	r3, #40	; 0x28
 80015cc:	fb03 0301 	mla	r3, r3, r1, r0
 80015d0:	f883 e051 	strb.w	lr, [r3, #81]	; 0x51
      if (hhcd->hc[ch_num].toggle_out == 0)
 80015d4:	2328      	movs	r3, #40	; 0x28
 80015d6:	fb03 0201 	mla	r2, r3, r1, r0
 80015da:	f892 6051 	ldrb.w	r6, [r2, #81]	; 0x51
 80015de:	b9f6      	cbnz	r6, 800161e <HAL_HCD_HC_SubmitRequest+0xc2>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015e0:	f882 6042 	strb.w	r6, [r2, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 80015e4:	fb03 0301 	mla	r3, r3, r1, r0
 80015e8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80015ec:	2a02      	cmp	r2, #2
 80015ee:	d001      	beq.n	80015f4 <HAL_HCD_HC_SubmitRequest+0x98>
        hhcd->hc[ch_num].do_ping = do_ping;
 80015f0:	f883 703d 	strb.w	r7, [r3, #61]	; 0x3d
    break;  
  }
  
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015f4:	2628      	movs	r6, #40	; 0x28
 80015f6:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 80015fa:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0;
  hhcd->hc[ch_num].ch_num = ch_num;
 80015fc:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
  
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001600:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001602:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001604:	649c      	str	r4, [r3, #72]	; 0x48
  hhcd->hc[ch_num].urb_state = URB_IDLE;  
 8001606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0;
 800160a:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 800160c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001610:	3138      	adds	r1, #56	; 0x38
 8001612:	7c02      	ldrb	r2, [r0, #16]
 8001614:	6800      	ldr	r0, [r0, #0]
}
 8001616:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 800161a:	f001 bf7f 	b.w	800351c <USB_HC_StartXfer>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800161e:	2602      	movs	r6, #2
 8001620:	e7de      	b.n	80015e0 <HAL_HCD_HC_SubmitRequest+0x84>
 8001622:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001624:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8001628:	b992      	cbnz	r2, 8001650 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800162a:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 800162e:	b91e      	cbnz	r6, 8001638 <HAL_HCD_HC_SubmitRequest+0xdc>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if(hhcd->hc[ch_num].urb_state  != URB_NOTREADY)
 8001634:	2328      	movs	r3, #40	; 0x28
 8001636:	e7d5      	b.n	80015e4 <HAL_HCD_HC_SubmitRequest+0x88>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001638:	2202      	movs	r2, #2
 800163a:	e7f9      	b.n	8001630 <HAL_HCD_HC_SubmitRequest+0xd4>
 800163c:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800163e:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8001642:	b92a      	cbnz	r2, 8001650 <HAL_HCD_HC_SubmitRequest+0xf4>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001644:	f893 6051 	ldrb.w	r6, [r3, #81]	; 0x51
 8001648:	b936      	cbnz	r6, 8001658 <HAL_HCD_HC_SubmitRequest+0xfc>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800164a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;  
 800164e:	e7d1      	b.n	80015f4 <HAL_HCD_HC_SubmitRequest+0x98>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001650:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001654:	2a00      	cmp	r2, #0
 8001656:	d0f8      	beq.n	800164a <HAL_HCD_HC_SubmitRequest+0xee>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001658:	2202      	movs	r2, #2
 800165a:	e7f6      	b.n	800164a <HAL_HCD_HC_SubmitRequest+0xee>

0800165c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001660:	6806      	ldr	r6, [r0, #0]
{
 8001662:	b087      	sub	sp, #28
 8001664:	4604      	mov	r4, r0
  uint32_t i = 0U , interrupt = 0U;
  
  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001666:	4630      	mov	r0, r6
 8001668:	f001 fdfc 	bl	8003264 <USB_GetMode>
 800166c:	2801      	cmp	r0, #1
 800166e:	f040 80ec 	bne.w	800184a <HAL_HCD_IRQHandler+0x1ee>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd)) 
 8001672:	6820      	ldr	r0, [r4, #0]
 8001674:	f001 fdf2 	bl	800325c <USB_ReadInterrupts>
 8001678:	2800      	cmp	r0, #0
 800167a:	f000 80e6 	beq.w	800184a <HAL_HCD_IRQHandler+0x1ee>
    {
      return;
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	f001 fdec 	bl	800325c <USB_ReadInterrupts>
 8001684:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001686:	bf48      	it	mi
 8001688:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800168a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800168c:	bf44      	itt	mi
 800168e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001692:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001694:	f001 fde2 	bl	800325c <USB_ReadInterrupts>
 8001698:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800169a:	bf48      	it	mi
 800169c:	6823      	ldrmi	r3, [r4, #0]
    }
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800169e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016a0:	bf44      	itt	mi
 80016a2:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 80016a6:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016a8:	f001 fdd8 	bl	800325c <USB_ReadInterrupts>
 80016ac:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016ae:	bf48      	it	mi
 80016b0:	6823      	ldrmi	r3, [r4, #0]
    }   
    
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016b2:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016b4:	bf44      	itt	mi
 80016b6:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80016ba:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016bc:	f001 fdce 	bl	800325c <USB_ReadInterrupts>
 80016c0:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016c2:	bf48      	it	mi
 80016c4:	6823      	ldrmi	r3, [r4, #0]
    }     
    
    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016c6:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016c8:	bf44      	itt	mi
 80016ca:	2202      	movmi	r2, #2
 80016cc:	615a      	strmi	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016ce:	f001 fdc5 	bl	800325c <USB_ReadInterrupts>
 80016d2:	0085      	lsls	r5, r0, #2
 80016d4:	d510      	bpl.n	80016f8 <HAL_HCD_IRQHandler+0x9c>
    {
      
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80016d6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80016da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80016de:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
      
      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 80016e2:	4620      	mov	r0, r4
 80016e4:	f003 ff20 	bl	8005528 <HAL_HCD_Disconnect_Callback>
      USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80016e8:	2101      	movs	r1, #1
 80016ea:	6820      	ldr	r0, [r4, #0]
 80016ec:	f001 fe48 	bl	8003380 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016f6:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016f8:	6820      	ldr	r0, [r4, #0]
 80016fa:	f001 fdaf 	bl	800325c <USB_ReadInterrupts>
 80016fe:	01c0      	lsls	r0, r0, #7
 8001700:	d540      	bpl.n	8001784 <HAL_HCD_IRQHandler+0x128>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;  
 8001702:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;
  
  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001704:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001708:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 800170a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 800170e:	9305      	str	r3, [sp, #20]
  
  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001710:	9b05      	ldr	r3, [sp, #20]
 8001712:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001716:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  /* Check whether Port Connect Detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001718:	9b04      	ldr	r3, [sp, #16]
 800171a:	0799      	lsls	r1, r3, #30
 800171c:	d50d      	bpl.n	800173a <HAL_HCD_IRQHandler+0xde>
  {  
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800171e:	9b04      	ldr	r3, [sp, #16]
 8001720:	07da      	lsls	r2, r3, #31
 8001722:	d506      	bpl.n	8001732 <HAL_HCD_IRQHandler+0xd6>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001724:	69ab      	ldr	r3, [r5, #24]
 8001726:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800172a:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800172c:	4620      	mov	r0, r4
 800172e:	f003 fef7 	bl	8005520 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001732:	9b05      	ldr	r3, [sp, #20]
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	9305      	str	r3, [sp, #20]
    
  }
  
  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800173a:	9b04      	ldr	r3, [sp, #16]
 800173c:	071b      	lsls	r3, r3, #28
 800173e:	d517      	bpl.n	8001770 <HAL_HCD_IRQHandler+0x114>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001740:	9b05      	ldr	r3, [sp, #20]
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	9305      	str	r3, [sp, #20]
    
    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001748:	9b04      	ldr	r3, [sp, #16]
 800174a:	075f      	lsls	r7, r3, #29
 800174c:	f140 8088 	bpl.w	8001860 <HAL_HCD_IRQHandler+0x204>
    {    
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001750:	69a1      	ldr	r1, [r4, #24]
 8001752:	2902      	cmp	r1, #2
 8001754:	d17c      	bne.n	8001850 <HAL_HCD_IRQHandler+0x1f4>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 8001756:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001758:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17U))
 800175a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800175e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001762:	bf18      	it	ne
 8001764:	2101      	movne	r1, #1
 8001766:	f001 fe0b 	bl	8003380 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }
      
      HAL_HCD_Connect_Callback(hhcd);
 800176a:	4620      	mov	r0, r4
 800176c:	f003 fed8 	bl	8005520 <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
    }    
  }
  
  /* Check for an over current */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001770:	9b04      	ldr	r3, [sp, #16]
 8001772:	0698      	lsls	r0, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001774:	bf42      	ittt	mi
 8001776:	9b05      	ldrmi	r3, [sp, #20]
 8001778:	f043 0320 	orrmi.w	r3, r3, #32
 800177c:	9305      	strmi	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800177e:	9b05      	ldr	r3, [sp, #20]
 8001780:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001784:	6820      	ldr	r0, [r4, #0]
 8001786:	f001 fd69 	bl	800325c <USB_ReadInterrupts>
 800178a:	0701      	lsls	r1, r0, #28
 800178c:	d505      	bpl.n	800179a <HAL_HCD_IRQHandler+0x13e>
      HAL_HCD_SOF_Callback(hhcd);
 800178e:	4620      	mov	r0, r4
 8001790:	f003 fec2 	bl	8005518 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	2208      	movs	r2, #8
 8001798:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800179a:	6820      	ldr	r0, [r4, #0]
 800179c:	f001 fd5e 	bl	800325c <USB_ReadInterrupts>
 80017a0:	0182      	lsls	r2, r0, #6
 80017a2:	d514      	bpl.n	80017ce <HAL_HCD_IRQHandler+0x172>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017a4:	6820      	ldr	r0, [r4, #0]
 80017a6:	f001 fff7 	bl	8003798 <USB_HC_ReadInterrupt>
 80017aa:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80017ae:	9002      	str	r0, [sp, #8]
 80017b0:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017b2:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1U << i))
 80017b6:	f04f 0a01 	mov.w	sl, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 80017ba:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80017bc:	f04f 0902 	mov.w	r9, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017c0:	68a3      	ldr	r3, [r4, #8]
 80017c2:	459b      	cmp	fp, r3
 80017c4:	d358      	bcc.n	8001878 <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017c6:	6823      	ldr	r3, [r4, #0]
 80017c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017cc:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80017ce:	6820      	ldr	r0, [r4, #0]
 80017d0:	f001 fd44 	bl	800325c <USB_ReadInterrupts>
 80017d4:	06c3      	lsls	r3, r0, #27
 80017d6:	d538      	bpl.n	800184a <HAL_HCD_IRQHandler+0x1ee>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017d8:	6825      	ldr	r5, [r4, #0]
 80017da:	69ab      	ldr	r3, [r5, #24]
 80017dc:	f023 0310 	bic.w	r3, r3, #16
 80017e0:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 80017e2:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17U;
 80017e4:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d129      	bne.n	8001840 <HAL_HCD_IRQHandler+0x1e4>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4U;
 80017ec:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80017f0:	f1b8 0f00 	cmp.w	r8, #0
 80017f4:	d024      	beq.n	8001840 <HAL_HCD_IRQHandler+0x1e4>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;  
 80017f6:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80017fa:	2628      	movs	r6, #40	; 0x28
 80017fc:	fb06 4607 	mla	r6, r6, r7, r4
 8001800:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001802:	b1e9      	cbz	r1, 8001840 <HAL_HCD_IRQHandler+0x1e4>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8001804:	4642      	mov	r2, r8
 8001806:	4628      	mov	r0, r5
 8001808:	f001 fd1a 	bl	8003240 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;           
 800180c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800180e:	4443      	add	r3, r8
 8001810:	6473      	str	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001812:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001816:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001818:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 800181c:	4443      	add	r3, r8
 800181e:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001820:	692a      	ldr	r2, [r5, #16]
 8001822:	4bb7      	ldr	r3, [pc, #732]	; (8001b00 <HAL_HCD_IRQHandler+0x4a4>)
 8001824:	4013      	ands	r3, r2
 8001826:	b15b      	cbz	r3, 8001840 <HAL_HCD_IRQHandler+0x1e4>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8001828:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800182a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800182e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8001832:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8001834:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	6993      	ldr	r3, [r2, #24]
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6193      	str	r3, [r2, #24]
}
 800184a:	b007      	add	sp, #28
 800184c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001850:	68e3      	ldr	r3, [r4, #12]
 8001852:	2b03      	cmp	r3, #3
          USBx_HOST->HFIR = 60000U;
 8001854:	bf04      	itt	eq
 8001856:	f64e 2260 	movweq	r2, #60000	; 0xea60
 800185a:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 800185e:	e784      	b.n	800176a <HAL_HCD_IRQHandler+0x10e>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001860:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 8001864:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001866:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800186a:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT); 
 800186e:	6993      	ldr	r3, [r2, #24]
 8001870:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001874:	6193      	str	r3, [r2, #24]
 8001876:	e77b      	b.n	8001770 <HAL_HCD_IRQHandler+0x114>
        if (interrupt & (1U << i))
 8001878:	9a02      	ldr	r2, [sp, #8]
 800187a:	fa0a f30b 	lsl.w	r3, sl, fp
 800187e:	4213      	tst	r3, r2
 8001880:	f000 8086 	beq.w	8001990 <HAL_HCD_IRQHandler+0x334>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8001884:	9b01      	ldr	r3, [sp, #4]
 8001886:	6820      	ldr	r0, [r4, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800188e:	fa5f f58b 	uxtb.w	r5, fp
 8001892:	f000 810a 	beq.w	8001aaa <HAL_HCD_IRQHandler+0x44e>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001896:	016a      	lsls	r2, r5, #5
 8001898:	f500 68a0 	add.w	r8, r0, #1280	; 0x500
 800189c:	eb02 0608 	add.w	r6, r2, r8
 80018a0:	68b1      	ldr	r1, [r6, #8]
 80018a2:	074b      	lsls	r3, r1, #29
 80018a4:	d513      	bpl.n	80018ce <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80018a6:	2104      	movs	r1, #4
 80018a8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80018aa:	68f1      	ldr	r1, [r6, #12]
 80018ac:	f041 0102 	orr.w	r1, r1, #2
 80018b0:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80018b2:	68b1      	ldr	r1, [r6, #8]
 80018b4:	058b      	lsls	r3, r1, #22
 80018b6:	d53d      	bpl.n	8001934 <HAL_HCD_IRQHandler+0x2d8>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80018b8:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80018ba:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 80018c2:	4629      	mov	r1, r5
    USB_HC_Halt(hhcd->Instance, chnum);  
 80018c4:	f001 ff77 	bl	80037b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80018c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018cc:	e12b      	b.n	8001b26 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80018ce:	68b1      	ldr	r1, [r6, #8]
 80018d0:	0689      	lsls	r1, r1, #26
 80018d2:	d502      	bpl.n	80018da <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80018d4:	2120      	movs	r1, #32
 80018d6:	60b1      	str	r1, [r6, #8]
 80018d8:	e7eb      	b.n	80018b2 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 80018da:	68b1      	ldr	r1, [r6, #8]
 80018dc:	070b      	lsls	r3, r1, #28
 80018de:	d513      	bpl.n	8001908 <HAL_HCD_IRQHandler+0x2ac>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80018e0:	68f1      	ldr	r1, [r6, #12]
 80018e2:	9203      	str	r2, [sp, #12]
 80018e4:	f041 0102 	orr.w	r1, r1, #2
 80018e8:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80018ea:	fb07 4105 	mla	r1, r7, r5, r4
 80018ee:	f04f 0e05 	mov.w	lr, #5
 80018f2:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80018f6:	2110      	movs	r1, #16
 80018f8:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);    
 80018fa:	2108      	movs	r1, #8
 80018fc:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);    
 80018fe:	4629      	mov	r1, r5
 8001900:	f001 ff59 	bl	80037b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001904:	9a03      	ldr	r2, [sp, #12]
 8001906:	e7d4      	b.n	80018b2 <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001908:	68b1      	ldr	r1, [r6, #8]
 800190a:	0549      	lsls	r1, r1, #21
 800190c:	d5d1      	bpl.n	80018b2 <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800190e:	68f1      	ldr	r1, [r6, #12]
 8001910:	9203      	str	r2, [sp, #12]
 8001912:	f041 0102 	orr.w	r1, r1, #2
 8001916:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001918:	4629      	mov	r1, r5
 800191a:	f001 ff4c 	bl	80037b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);    
 800191e:	2110      	movs	r1, #16
 8001920:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001922:	fb07 4105 	mla	r1, r7, r5, r4
 8001926:	2008      	movs	r0, #8
 8001928:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800192c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001930:	60b1      	str	r1, [r6, #8]
 8001932:	e7e7      	b.n	8001904 <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001934:	68b1      	ldr	r1, [r6, #8]
 8001936:	07c8      	lsls	r0, r1, #31
 8001938:	d540      	bpl.n	80019bc <HAL_HCD_IRQHandler+0x360>
    if (hhcd->Init.dma_enable)
 800193a:	6921      	ldr	r1, [r4, #16]
 800193c:	b149      	cbz	r1, 8001952 <HAL_HCD_IRQHandler+0x2f6>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800193e:	fb07 4e05 	mla	lr, r7, r5, r4
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001942:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001944:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
        (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001948:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800194c:	1a09      	subs	r1, r1, r0
 800194e:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8001952:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0U;
 8001956:	2000      	movs	r0, #0
 8001958:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XFRC;
 800195a:	f881 a05d 	strb.w	sl, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800195e:	f8c6 a008 	str.w	sl, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001962:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8001966:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 800196a:	d117      	bne.n	800199c <HAL_HCD_IRQHandler+0x340>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 800196c:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 800196e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001976:	4629      	mov	r1, r5
 8001978:	f001 ff1d 	bl	80037b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800197c:	2310      	movs	r3, #16
 800197e:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1U;
 8001980:	fb07 4505 	mla	r5, r7, r5, r4
 8001984:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8001990:	9b01      	ldr	r3, [sp, #4]
 8001992:	3320      	adds	r3, #32
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001994:	f10b 0b01 	add.w	fp, fp, #1
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	e711      	b.n	80017c0 <HAL_HCD_IRQHandler+0x164>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800199c:	2803      	cmp	r0, #3
 800199e:	d1ef      	bne.n	8001980 <HAL_HCD_IRQHandler+0x324>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80019a0:	f852 0008 	ldr.w	r0, [r2, r8]
 80019a4:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80019a8:	f842 0008 	str.w	r0, [r2, r8]
      hhcd->hc[chnum].urb_state = URB_DONE; 
 80019ac:	f881 a05c 	strb.w	sl, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80019b0:	2201      	movs	r2, #1
 80019b2:	4629      	mov	r1, r5
 80019b4:	4620      	mov	r0, r4
 80019b6:	f003 fdbb 	bl	8005530 <HAL_HCD_HC_NotifyURBChange_Callback>
 80019ba:	e7e1      	b.n	8001980 <HAL_HCD_IRQHandler+0x324>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80019bc:	68b1      	ldr	r1, [r6, #8]
 80019be:	0789      	lsls	r1, r1, #30
 80019c0:	d535      	bpl.n	8001a2e <HAL_HCD_IRQHandler+0x3d2>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80019c2:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80019c4:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 80019c8:	f021 0102 	bic.w	r1, r1, #2
 80019cc:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80019ce:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80019d2:	2901      	cmp	r1, #1
 80019d4:	d10c      	bne.n	80019f0 <HAL_HCD_IRQHandler+0x394>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80019d6:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80019da:	fb07 4305 	mla	r3, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80019de:	f8c6 9008 	str.w	r9, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);  
 80019e2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80019e6:	4629      	mov	r1, r5
 80019e8:	4620      	mov	r0, r4
 80019ea:	f003 fda1 	bl	8005530 <HAL_HCD_HC_NotifyURBChange_Callback>
 80019ee:	e7cf      	b.n	8001990 <HAL_HCD_IRQHandler+0x334>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 80019f0:	2905      	cmp	r1, #5
 80019f2:	d0f0      	beq.n	80019d6 <HAL_HCD_IRQHandler+0x37a>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80019f4:	2906      	cmp	r1, #6
 80019f6:	d001      	beq.n	80019fc <HAL_HCD_IRQHandler+0x3a0>
 80019f8:	2908      	cmp	r1, #8
 80019fa:	d1ee      	bne.n	80019da <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 80019fc:	fb07 4105 	mla	r1, r7, r5, r4
 8001a00:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8001a02:	2803      	cmp	r0, #3
 8001a04:	f100 0301 	add.w	r3, r0, #1
        hhcd->hc[chnum].ErrCnt = 0U;
 8001a08:	bf88      	it	hi
 8001a0a:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001a0c:	658b      	str	r3, [r1, #88]	; 0x58
        hhcd->hc[chnum].ErrCnt = 0U;
 8001a0e:	bf83      	ittte	hi
 8001a10:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a12:	2004      	movhi	r0, #4
 8001a14:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a18:	f881 905c 	strbls.w	r9, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001a1c:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a20:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a24:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001a28:	f842 1008 	str.w	r1, [r2, r8]
 8001a2c:	e7d5      	b.n	80019da <HAL_HCD_IRQHandler+0x37e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001a2e:	68b1      	ldr	r1, [r6, #8]
 8001a30:	060b      	lsls	r3, r1, #24
 8001a32:	d511      	bpl.n	8001a58 <HAL_HCD_IRQHandler+0x3fc>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001a34:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001a36:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	60f3      	str	r3, [r6, #12]
    hhcd->hc[chnum].ErrCnt++;
 8001a3e:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001a42:	4629      	mov	r1, r5
    hhcd->hc[chnum].ErrCnt++;
 8001a44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a46:	3201      	adds	r2, #1
 8001a48:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_XACTERR;
 8001a4a:	2206      	movs	r2, #6
 8001a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);     
 8001a50:	f001 feb1 	bl	80037b6 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	e066      	b.n	8001b26 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001a58:	68b1      	ldr	r1, [r6, #8]
 8001a5a:	06c8      	lsls	r0, r1, #27
 8001a5c:	d598      	bpl.n	8001990 <HAL_HCD_IRQHandler+0x334>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001a5e:	fb07 4105 	mla	r1, r7, r5, r4
 8001a62:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8001a66:	2903      	cmp	r1, #3
 8001a68:	d109      	bne.n	8001a7e <HAL_HCD_IRQHandler+0x422>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001a6a:	68f1      	ldr	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	9203      	str	r2, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001a70:	f041 0102 	orr.w	r1, r1, #2
 8001a74:	60f1      	str	r1, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);  
 8001a76:	4629      	mov	r1, r5
 8001a78:	f001 fe9d 	bl	80037b6 <USB_HC_Halt>
 8001a7c:	9a03      	ldr	r2, [sp, #12]
    hhcd->hc[chnum].state = HC_NAK;
 8001a7e:	fb07 4505 	mla	r5, r7, r5, r4
 8001a82:	2103      	movs	r1, #3
 8001a84:	f885 105d 	strb.w	r1, [r5, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001a88:	2110      	movs	r1, #16
 8001a8a:	60b1      	str	r1, [r6, #8]
    if  ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001a8c:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
 8001a90:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8001a94:	f47f af7c 	bne.w	8001990 <HAL_HCD_IRQHandler+0x334>
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001a98:	f852 1008 	ldr.w	r1, [r2, r8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a9c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001aa0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001aa4:	f842 1008 	str.w	r1, [r2, r8]
 8001aa8:	e772      	b.n	8001990 <HAL_HCD_IRQHandler+0x334>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001aaa:	f500 66a0 	add.w	r6, r0, #1280	; 0x500
 8001aae:	eb06 1645 	add.w	r6, r6, r5, lsl #5
 8001ab2:	68b3      	ldr	r3, [r6, #8]
 8001ab4:	0759      	lsls	r1, r3, #29
 8001ab6:	d506      	bpl.n	8001ac6 <HAL_HCD_IRQHandler+0x46a>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001ab8:	2304      	movs	r3, #4
 8001aba:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001abc:	68f3      	ldr	r3, [r6, #12]
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	60f3      	str	r3, [r6, #12]
 8001ac4:	e764      	b.n	8001990 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8001ac6:	68b3      	ldr	r3, [r6, #8]
 8001ac8:	f013 0320 	ands.w	r3, r3, #32
 8001acc:	d01a      	beq.n	8001b04 <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ace:	2320      	movs	r3, #32
 8001ad0:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1U)
 8001ad2:	fb07 4305 	mla	r3, r7, r5, r4
 8001ad6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001ada:	2a01      	cmp	r2, #1
 8001adc:	f47f af58 	bne.w	8001990 <HAL_HCD_IRQHandler+0x334>
      hhcd->hc[chnum].state = HC_NYET;     
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001ae6:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].state = HC_NYET;     
 8001ae8:	9303      	str	r3, [sp, #12]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001aea:	f042 0202 	orr.w	r2, r2, #2
 8001aee:	60f2      	str	r2, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum); 
 8001af0:	4629      	mov	r1, r5
 8001af2:	f001 fe60 	bl	80037b6 <USB_HC_Halt>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001af6:	9b03      	ldr	r3, [sp, #12]
 8001af8:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001afc:	e748      	b.n	8001990 <HAL_HCD_IRQHandler+0x334>
 8001afe:	bf00      	nop
 8001b00:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 8001b04:	68b2      	ldr	r2, [r6, #8]
 8001b06:	0652      	lsls	r2, r2, #25
 8001b08:	d50f      	bpl.n	8001b2a <HAL_HCD_IRQHandler+0x4ce>
    hhcd->hc[chnum].state = HC_NYET;
 8001b0a:	fb07 4205 	mla	r2, r7, r5, r4
 8001b0e:	2104      	movs	r1, #4
    hhcd->hc[chnum].ErrCnt= 0U;    
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001b12:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 8001b14:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f001 fe49 	bl	80037b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8001b24:	2340      	movs	r3, #64	; 0x40
 8001b26:	60b3      	str	r3, [r6, #8]
 8001b28:	e732      	b.n	8001990 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001b2a:	68b2      	ldr	r2, [r6, #8]
 8001b2c:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8001b30:	d005      	beq.n	8001b3e <HAL_HCD_IRQHandler+0x4e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001b32:	68f3      	ldr	r3, [r6, #12]
 8001b34:	f043 0302 	orr.w	r3, r3, #2
 8001b38:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);  
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	e6c2      	b.n	80018c4 <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001b3e:	68b3      	ldr	r3, [r6, #8]
 8001b40:	07d9      	lsls	r1, r3, #31
 8001b42:	d510      	bpl.n	8001b66 <HAL_HCD_IRQHandler+0x50a>
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001b44:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001b48:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001b4c:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0U;  
 8001b4e:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001b50:	f042 0202 	orr.w	r2, r2, #2
 8001b54:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001b56:	f001 fe2e 	bl	80037b6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8001b5a:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001b5c:	f8c6 a008 	str.w	sl, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001b60:	f883 a05d 	strb.w	sl, [r3, #93]	; 0x5d
 8001b64:	e714      	b.n	8001990 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)  
 8001b66:	68b3      	ldr	r3, [r6, #8]
 8001b68:	071a      	lsls	r2, r3, #28
 8001b6a:	d50e      	bpl.n	8001b8a <HAL_HCD_IRQHandler+0x52e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);  
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001b70:	68f3      	ldr	r3, [r6, #12]
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f001 fe1c 	bl	80037b6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;    
 8001b7e:	fb07 4505 	mla	r5, r7, r5, r4
 8001b82:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001b84:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001b88:	e702      	b.n	8001990 <HAL_HCD_IRQHandler+0x334>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001b8a:	68b3      	ldr	r3, [r6, #8]
 8001b8c:	06db      	lsls	r3, r3, #27
 8001b8e:	d511      	bpl.n	8001bb4 <HAL_HCD_IRQHandler+0x558>
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001b90:	fb07 4305 	mla	r3, r7, r5, r4
 8001b94:	2200      	movs	r2, #0
 8001b96:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001b98:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[chnum].ErrCnt = 0U;  
 8001b9a:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001b9c:	f042 0202 	orr.w	r2, r2, #2
 8001ba0:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);   
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f001 fe07 	bl	80037b6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_NAK;
 8001ba8:	9b03      	ldr	r3, [sp, #12]
 8001baa:	2203      	movs	r2, #3
 8001bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001bb0:	2310      	movs	r3, #16
 8001bb2:	e7b8      	b.n	8001b26 <HAL_HCD_IRQHandler+0x4ca>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001bb4:	68b3      	ldr	r3, [r6, #8]
 8001bb6:	0619      	lsls	r1, r3, #24
 8001bb8:	d50c      	bpl.n	8001bd4 <HAL_HCD_IRQHandler+0x578>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001bba:	68f3      	ldr	r3, [r6, #12]
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001bc2:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001bc4:	fb07 4505 	mla	r5, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001bc8:	f001 fdf5 	bl	80037b6 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;  
 8001bcc:	2306      	movs	r3, #6
 8001bce:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001bd2:	e73f      	b.n	8001a54 <HAL_HCD_IRQHandler+0x3f8>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001bd4:	68b1      	ldr	r1, [r6, #8]
 8001bd6:	f411 6180 	ands.w	r1, r1, #1024	; 0x400
 8001bda:	d00f      	beq.n	8001bfc <HAL_HCD_IRQHandler+0x5a0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum); 
 8001bdc:	68f3      	ldr	r3, [r6, #12]
 8001bde:	f043 0302 	orr.w	r3, r3, #2
 8001be2:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);      
 8001be4:	4629      	mov	r1, r5
 8001be6:	f001 fde6 	bl	80037b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001bea:	2310      	movs	r3, #16
 8001bec:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);    
 8001bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf2:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001bf4:	fb07 4505 	mla	r5, r7, r5, r4
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	e7c3      	b.n	8001b84 <HAL_HCD_IRQHandler+0x528>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 8001bfc:	68b3      	ldr	r3, [r6, #8]
 8001bfe:	079a      	lsls	r2, r3, #30
 8001c00:	f57f aec6 	bpl.w	8001990 <HAL_HCD_IRQHandler+0x334>
    __HAL_HCD_MASK_HALT_HC_INT(chnum); 
 8001c04:	68f3      	ldr	r3, [r6, #12]
 8001c06:	f023 0302 	bic.w	r3, r3, #2
 8001c0a:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001c0c:	fb07 4305 	mla	r3, r7, r5, r4
 8001c10:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
 8001c14:	2a01      	cmp	r2, #1
 8001c16:	d10d      	bne.n	8001c34 <HAL_HCD_IRQHandler+0x5d8>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001c18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001c1c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8001c20:	2a02      	cmp	r2, #2
 8001c22:	f47f aeda 	bne.w	80019da <HAL_HCD_IRQHandler+0x37e>
        hhcd->hc[chnum].toggle_out ^= 1U; 
 8001c26:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001c2a:	f082 0201 	eor.w	r2, r2, #1
 8001c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8001c32:	e6d2      	b.n	80019da <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NAK) 
 8001c34:	2a03      	cmp	r2, #3
 8001c36:	d102      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x5e2>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001c38:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001c3c:	e6cd      	b.n	80019da <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_NYET) 
 8001c3e:	2a04      	cmp	r2, #4
 8001c40:	d104      	bne.n	8001c4c <HAL_HCD_IRQHandler+0x5f0>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001c42:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
      hhcd->hc[chnum].do_ping = 0U;
 8001c46:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 8001c4a:	e6c6      	b.n	80019da <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[chnum].state == HC_STALL) 
 8001c4c:	2a05      	cmp	r2, #5
 8001c4e:	d102      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x5fa>
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001c54:	e6c1      	b.n	80019da <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001c56:	2a06      	cmp	r2, #6
 8001c58:	d002      	beq.n	8001c60 <HAL_HCD_IRQHandler+0x604>
 8001c5a:	2a08      	cmp	r2, #8
 8001c5c:	f47f aebd 	bne.w	80019da <HAL_HCD_IRQHandler+0x37e>
      if(hhcd->hc[chnum].ErrCnt++ > 3U)
 8001c60:	fb07 4305 	mla	r3, r7, r5, r4
 8001c64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c66:	1c51      	adds	r1, r2, #1
 8001c68:	2a03      	cmp	r2, #3
 8001c6a:	6599      	str	r1, [r3, #88]	; 0x58
 8001c6c:	d9e4      	bls.n	8001c38 <HAL_HCD_IRQHandler+0x5dc>
        hhcd->hc[chnum].ErrCnt = 0U;
 8001c6e:	2200      	movs	r2, #0
 8001c70:	659a      	str	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001c72:	2204      	movs	r2, #4
 8001c74:	e7ec      	b.n	8001c50 <HAL_HCD_IRQHandler+0x5f4>
 8001c76:	bf00      	nop

08001c78 <HAL_HCD_Start>:
{ 
 8001c78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd); 
 8001c7a:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001c7e:	2b01      	cmp	r3, #1
{ 
 8001c80:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001c82:	d00d      	beq.n	8001ca0 <HAL_HCD_Start+0x28>
 8001c84:	2501      	movs	r5, #1
 8001c86:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001c8a:	6800      	ldr	r0, [r0, #0]
 8001c8c:	f001 fa7e 	bl	800318c <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1U);  
 8001c90:	4629      	mov	r1, r5
 8001c92:	6820      	ldr	r0, [r4, #0]
 8001c94:	f001 fbaa 	bl	80033ec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd); 
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd); 
 8001ca0:	2002      	movs	r0, #2
}
 8001ca2:	bd38      	pop	{r3, r4, r5, pc}

08001ca4 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd); 
 8001ca4:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001ca8:	2b01      	cmp	r3, #1
{ 
 8001caa:	b510      	push	{r4, lr}
 8001cac:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd); 
 8001cae:	d009      	beq.n	8001cc4 <HAL_HCD_Stop+0x20>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001cb6:	6800      	ldr	r0, [r0, #0]
 8001cb8:	f001 fea2 	bl	8003a00 <USB_StopHost>
  __HAL_UNLOCK(hhcd); 
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001cc2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd); 
 8001cc4:	2002      	movs	r0, #2
}
 8001cc6:	bd10      	pop	{r4, pc}

08001cc8 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001cc8:	6800      	ldr	r0, [r0, #0]
 8001cca:	f001 bb76 	b.w	80033ba <USB_ResetPort>

08001cce <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001cce:	2328      	movs	r3, #40	; 0x28
 8001cd0:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001cd4:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001cd8:	4770      	bx	lr

08001cda <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count; 
 8001cda:	2328      	movs	r3, #40	; 0x28
 8001cdc:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001ce0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ce4:	6800      	ldr	r0, [r0, #0]
 8001ce6:	f001 bba8 	b.w	800343a <USB_GetCurrentFrame>

08001cea <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001cea:	6800      	ldr	r0, [r0, #0]
 8001cec:	f001 bb9c 	b.w	8003428 <USB_GetHostSpeed>

08001cf0 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cf0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d062      	beq.n	8001dbe <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001cf8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d00:	b91b      	cbnz	r3, 8001d0a <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d02:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d06:	f003 fa45 	bl	8005194 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d0a:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d0c:	4e2d      	ldr	r6, [pc, #180]	; (8001dc4 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001d0e:	4d2e      	ldr	r5, [pc, #184]	; (8001dc8 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d10:	2324      	movs	r3, #36	; 0x24
 8001d12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001d16:	6813      	ldr	r3, [r2, #0]
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d1e:	f000 fceb 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d22:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001d24:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001d26:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d2a:	42b3      	cmp	r3, r6
 8001d2c:	bf84      	itt	hi
 8001d2e:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001d32:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001d34:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d36:	bf91      	iteee	ls
 8001d38:	1c69      	addls	r1, r5, #1
 8001d3a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001d3e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001d42:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d44:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001d46:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d48:	d821      	bhi.n	8001d8e <HAL_I2C_Init+0x9e>
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d50:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	bf98      	it	ls
 8001d58:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d5a:	6a21      	ldr	r1, [r4, #32]
 8001d5c:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d5e:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d60:	430b      	orrs	r3, r1
 8001d62:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001d64:	68e1      	ldr	r1, [r4, #12]
 8001d66:	6923      	ldr	r3, [r4, #16]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001d6c:	69a1      	ldr	r1, [r4, #24]
 8001d6e:	6963      	ldr	r3, [r4, #20]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d7c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d80:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d86:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d88:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001d8e:	68a1      	ldr	r1, [r4, #8]
 8001d90:	b949      	cbnz	r1, 8001da6 <HAL_I2C_Init+0xb6>
 8001d92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001d96:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d9a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001d9e:	b163      	cbz	r3, 8001dba <HAL_I2C_Init+0xca>
 8001da0:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001da4:	e7d9      	b.n	8001d5a <HAL_I2C_Init+0x6a>
 8001da6:	2119      	movs	r1, #25
 8001da8:	434b      	muls	r3, r1
 8001daa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dae:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001db2:	b113      	cbz	r3, 8001dba <HAL_I2C_Init+0xca>
 8001db4:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001db8:	e7cf      	b.n	8001d5a <HAL_I2C_Init+0x6a>
 8001dba:	2001      	movs	r0, #1
 8001dbc:	e7cd      	b.n	8001d5a <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
}
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}
 8001dc2:	bf00      	nop
 8001dc4:	000186a0 	.word	0x000186a0
 8001dc8:	000f4240 	.word	0x000f4240

08001dcc <HAL_I2S_TxCpltCallback>:
 8001dcc:	4770      	bx	lr

08001dce <HAL_I2S_RxCpltCallback>:
 8001dce:	4770      	bx	lr

08001dd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
 __weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001dd0:	4770      	bx	lr
	...

08001dd4 <HAL_I2S_Init>:
{
 8001dd4:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	2800      	cmp	r0, #0
 8001dda:	d03f      	beq.n	8001e5c <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001ddc:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8001de0:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001de4:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8001de6:	f003 f9ff 	bl	80051e8 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dea:	6822      	ldr	r2, [r4, #0]
 8001dec:	69d3      	ldr	r3, [r2, #28]
 8001dee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001df2:	f023 030f 	bic.w	r3, r3, #15
 8001df6:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001df8:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8001dfa:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001dfc:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8001dfe:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e00:	d035      	beq.n	8001e6e <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e02:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 8001e04:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e06:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8001e08:	bf14      	ite	ne
 8001e0a:	2620      	movne	r6, #32
 8001e0c:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e0e:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e10:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8001e12:	bf98      	it	ls
 8001e14:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e16:	f000 fd17 	bl	8002848 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e1a:	6923      	ldr	r3, [r4, #16]
 8001e1c:	6961      	ldr	r1, [r4, #20]
 8001e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e22:	d11f      	bne.n	8001e64 <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e24:	68e3      	ldr	r3, [r4, #12]
 8001e26:	220a      	movs	r2, #10
 8001e28:	b1d3      	cbz	r3, 8001e60 <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001e2a:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e30:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8001e32:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001e34:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e38:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001e3a:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8001e3e:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 8001e42:	0212      	lsls	r2, r2, #8
 8001e44:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e48:	1e99      	subs	r1, r3, #2
 8001e4a:	29fd      	cmp	r1, #253	; 0xfd
 8001e4c:	d911      	bls.n	8001e72 <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff ffba 	bl	8001dd0 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8001e5c:	2001      	movs	r0, #1
}
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001e60:	00f3      	lsls	r3, r6, #3
 8001e62:	e7e3      	b.n	8001e2c <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001e64:	230a      	movs	r3, #10
 8001e66:	fbb0 f0f6 	udiv	r0, r0, r6
 8001e6a:	4343      	muls	r3, r0
 8001e6c:	e7e1      	b.n	8001e32 <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8001e6e:	2200      	movs	r2, #0
 8001e70:	e7ea      	b.n	8001e48 <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e72:	4313      	orrs	r3, r2
 8001e74:	6922      	ldr	r2, [r4, #16]
 8001e76:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001e78:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001e7e:	68e2      	ldr	r2, [r4, #12]
 8001e80:	68a3      	ldr	r3, [r4, #8]
 8001e82:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8001e84:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001e8a:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 8001e8e:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e90:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001e92:	b289      	uxth	r1, r1
 8001e94:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e96:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8001e98:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e9a:	d11c      	bne.n	8001ed6 <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e9c:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <HAL_I2S_Init+0x114>)
 8001e9e:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ea0:	4912      	ldr	r1, [pc, #72]	; (8001eec <HAL_I2S_Init+0x118>)
 8001ea2:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_I2S_Init+0x11c>)
 8001ea4:	4288      	cmp	r0, r1
 8001ea6:	bf18      	it	ne
 8001ea8:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8001eac:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001eb0:	69d1      	ldr	r1, [r2, #28]
 8001eb2:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8001eb6:	f021 010f 	bic.w	r1, r1, #15
 8001eba:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ebc:	f04f 0102 	mov.w	r1, #2
 8001ec0:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ec2:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 8001ec4:	bf0c      	ite	eq
 8001ec6:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8001eca:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ecc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed0:	4303      	orrs	r3, r0
 8001ed2:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8001ed4:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ed6:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ed8:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001eda:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001edc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8001ee0:	bd70      	pop	{r4, r5, r6, pc}
 8001ee2:	bf00      	nop
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08002001 	.word	0x08002001
 8001eec:	40003800 	.word	0x40003800
 8001ef0:	40003400 	.word	0x40003400

08001ef4 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001ef6:	6803      	ldr	r3, [r0, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001efc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001f00:	2a04      	cmp	r2, #4
{
 8001f02:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f04:	d13a      	bne.n	8001f7c <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f06:	9a01      	ldr	r2, [sp, #4]
 8001f08:	07d1      	lsls	r1, r2, #31
 8001f0a:	d519      	bpl.n	8001f40 <I2S_IRQHandler+0x4c>
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	0652      	lsls	r2, r2, #25
 8001f10:	d516      	bpl.n	8001f40 <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001f12:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001f14:	1c91      	adds	r1, r2, #2
 8001f16:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001f18:	68d9      	ldr	r1, [r3, #12]
 8001f1a:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8001f1c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001f1e:	3a01      	subs	r2, #1
 8001f20:	b292      	uxth	r2, r2
 8001f22:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 8001f24:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001f26:	b292      	uxth	r2, r2
 8001f28:	b952      	cbnz	r2, 8001f40 <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f30:	0412      	lsls	r2, r2, #16
 8001f32:	0c12      	lsrs	r2, r2, #16
 8001f34:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001f3c:	f7ff ff47 	bl	8001dce <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f40:	9b01      	ldr	r3, [sp, #4]
 8001f42:	0659      	lsls	r1, r3, #25
 8001f44:	d51a      	bpl.n	8001f7c <I2S_IRQHandler+0x88>
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	0692      	lsls	r2, r2, #26
 8001f4c:	d516      	bpl.n	8001f7c <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f54:	0412      	lsls	r2, r2, #16
 8001f56:	0c12      	lsrs	r2, r2, #16
 8001f58:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	9202      	str	r2, [sp, #8]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	9202      	str	r2, [sp, #8]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001f6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001f76:	4620      	mov	r0, r4
 8001f78:	f7ff ff2a 	bl	8001dd0 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f7c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d13a      	bne.n	8001ffa <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f84:	9b01      	ldr	r3, [sp, #4]
 8001f86:	079b      	lsls	r3, r3, #30
 8001f88:	d51b      	bpl.n	8001fc2 <I2S_IRQHandler+0xce>
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	6853      	ldr	r3, [r2, #4]
 8001f8e:	0618      	lsls	r0, r3, #24
 8001f90:	d517      	bpl.n	8001fc2 <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f94:	1c99      	adds	r1, r3, #2
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	6261      	str	r1, [r4, #36]	; 0x24
 8001f9a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001f9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8001fa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	b95b      	cbnz	r3, 8001fc2 <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001faa:	6853      	ldr	r3, [r2, #4]
 8001fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff ff05 	bl	8001dcc <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fc2:	9b01      	ldr	r3, [sp, #4]
 8001fc4:	0719      	lsls	r1, r3, #28
 8001fc6:	d518      	bpl.n	8001ffa <I2S_IRQHandler+0x106>
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	0692      	lsls	r2, r2, #26
 8001fce:	d514      	bpl.n	8001ffa <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd6:	0412      	lsls	r2, r2, #16
 8001fd8:	0c12      	lsrs	r2, r2, #16
 8001fda:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	9203      	str	r2, [sp, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	9303      	str	r3, [sp, #12]
 8001fe4:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff feeb 	bl	8001dd0 <HAL_I2S_ErrorCallback>
    }
  }
}
 8001ffa:	b004      	add	sp, #16
 8001ffc:	bd10      	pop	{r4, pc}

08001ffe <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ffe:	4770      	bx	lr

08002000 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8002002:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002004:	4992      	ldr	r1, [pc, #584]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 800200a:	4a92      	ldr	r2, [pc, #584]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800200c:	428b      	cmp	r3, r1
 800200e:	bf18      	it	ne
 8002010:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8002014:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002016:	6891      	ldr	r1, [r2, #8]
 8002018:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 800201a:	69d9      	ldr	r1, [r3, #28]
 800201c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002020:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002024:	d004      	beq.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002026:	69d9      	ldr	r1, [r3, #28]
 8002028:	f411 7f40 	tst.w	r1, #768	; 0x300
 800202c:	f040 8097 	bne.w	800215e <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002030:	9a00      	ldr	r2, [sp, #0]
 8002032:	0792      	lsls	r2, r2, #30
 8002034:	d51d      	bpl.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	0610      	lsls	r0, r2, #24
 800203a:	d51a      	bpl.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800203c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800203e:	1c91      	adds	r1, r2, #2
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	6261      	str	r1, [r4, #36]	; 0x24
 8002044:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 8002046:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002048:	3a01      	subs	r2, #1
 800204a:	b292      	uxth	r2, r2
 800204c:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 800204e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002050:	b292      	uxth	r2, r2
 8002052:	b972      	cbnz	r2, 8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800205a:	0412      	lsls	r2, r2, #16
 800205c:	0c12      	lsrs	r2, r2, #16
 800205e:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8002060:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002062:	b29b      	uxth	r3, r3
 8002064:	b92b      	cbnz	r3, 8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8002066:	2301      	movs	r3, #1
 8002068:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 800206c:	4620      	mov	r0, r4
 800206e:	f7ff ffc6 	bl	8001ffe <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002072:	9b01      	ldr	r3, [sp, #4]
 8002074:	07d9      	lsls	r1, r3, #31
 8002076:	d522      	bpl.n	80020be <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 8002078:	4a75      	ldr	r2, [pc, #468]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800207a:	6821      	ldr	r1, [r4, #0]
 800207c:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800207e:	4291      	cmp	r1, r2
 8002080:	bf18      	it	ne
 8002082:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	0652      	lsls	r2, r2, #25
 800208a:	d518      	bpl.n	80020be <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800208c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800208e:	1c91      	adds	r1, r2, #2
 8002090:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 8002096:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8002098:	3a01      	subs	r2, #1
 800209a:	b292      	uxth	r2, r2
 800209c:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 800209e:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80020a0:	b292      	uxth	r2, r2
 80020a2:	b962      	cbnz	r2, 80020be <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020aa:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 80020ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b92b      	cbnz	r3, 80020be <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020b8:	4620      	mov	r0, r4
 80020ba:	f7ff ffa0 	bl	8001ffe <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020be:	9b01      	ldr	r3, [sp, #4]
 80020c0:	0658      	lsls	r0, r3, #25
 80020c2:	d524      	bpl.n	800210e <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 80020c4:	4962      	ldr	r1, [pc, #392]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80020c6:	6823      	ldr	r3, [r4, #0]
 80020c8:	4a62      	ldr	r2, [pc, #392]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80020ca:	428b      	cmp	r3, r1
 80020cc:	bf18      	it	ne
 80020ce:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80020d2:	6851      	ldr	r1, [r2, #4]
 80020d4:	0689      	lsls	r1, r1, #26
 80020d6:	d51a      	bpl.n	800210e <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020d8:	6851      	ldr	r1, [r2, #4]
 80020da:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80020de:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020e6:	0412      	lsls	r2, r2, #16
 80020e8:	0c12      	lsrs	r2, r2, #16
 80020ea:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020ec:	2200      	movs	r2, #0
 80020ee:	9202      	str	r2, [sp, #8]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	9202      	str	r2, [sp, #8]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002100:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002108:	4620      	mov	r0, r4
 800210a:	f7ff fe61 	bl	8001dd0 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800210e:	9b00      	ldr	r3, [sp, #0]
 8002110:	071b      	lsls	r3, r3, #28
 8002112:	d522      	bpl.n	800215a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	0690      	lsls	r0, r2, #26
 800211a:	d51e      	bpl.n	800215a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800211c:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800211e:	494c      	ldr	r1, [pc, #304]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002124:	0412      	lsls	r2, r2, #16
 8002126:	0c12      	lsrs	r2, r2, #16
 8002128:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800212a:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800212c:	428b      	cmp	r3, r1
 800212e:	bf18      	it	ne
 8002130:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8002134:	6851      	ldr	r1, [r2, #4]
 8002136:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800213a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800213c:	2200      	movs	r2, #0
 800213e:	9203      	str	r2, [sp, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	9303      	str	r3, [sp, #12]
 8002144:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8002146:	2301      	movs	r3, #1
 8002148:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 800214c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800214e:	f043 0304 	orr.w	r3, r3, #4
 8002152:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002154:	4620      	mov	r0, r4
 8002156:	f7ff fe3b 	bl	8001dd0 <HAL_I2S_ErrorCallback>
}
 800215a:	b004      	add	sp, #16
 800215c:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800215e:	9b01      	ldr	r3, [sp, #4]
 8002160:	0799      	lsls	r1, r3, #30
 8002162:	d51a      	bpl.n	800219a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8002164:	6853      	ldr	r3, [r2, #4]
 8002166:	061b      	lsls	r3, r3, #24
 8002168:	d517      	bpl.n	800219a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800216a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800216c:	1c99      	adds	r1, r3, #2
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	6241      	str	r1, [r0, #36]	; 0x24
 8002172:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8002174:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002176:	3b01      	subs	r3, #1
 8002178:	b29b      	uxth	r3, r3
 800217a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 800217c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	b95b      	cbnz	r3, 800219a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002182:	6853      	ldr	r3, [r2, #4]
 8002184:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002188:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 800218a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800218c:	b29b      	uxth	r3, r3
 800218e:	b923      	cbnz	r3, 800219a <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 8002190:	2301      	movs	r3, #1
 8002192:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002196:	f7ff ff32 	bl	8001ffe <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800219a:	9b00      	ldr	r3, [sp, #0]
 800219c:	07d8      	lsls	r0, r3, #31
 800219e:	d51e      	bpl.n	80021de <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 80021a0:	6822      	ldr	r2, [r4, #0]
 80021a2:	6853      	ldr	r3, [r2, #4]
 80021a4:	0659      	lsls	r1, r3, #25
 80021a6:	d51a      	bpl.n	80021de <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80021a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021aa:	1c99      	adds	r1, r3, #2
 80021ac:	62e1      	str	r1, [r4, #44]	; 0x2c
 80021ae:	68d1      	ldr	r1, [r2, #12]
 80021b0:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 80021b2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80021b4:	3b01      	subs	r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 80021ba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80021bc:	b29b      	uxth	r3, r3
 80021be:	b973      	cbnz	r3, 80021de <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021c0:	6853      	ldr	r3, [r2, #4]
 80021c2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 80021cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	b92b      	cbnz	r3, 80021de <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 80021d2:	2301      	movs	r3, #1
 80021d4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021d8:	4620      	mov	r0, r4
 80021da:	f7ff ff10 	bl	8001ffe <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021de:	9b00      	ldr	r3, [sp, #0]
 80021e0:	065a      	lsls	r2, r3, #25
 80021e2:	d51d      	bpl.n	8002220 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 80021e4:	6822      	ldr	r2, [r4, #0]
 80021e6:	6853      	ldr	r3, [r2, #4]
 80021e8:	069b      	lsls	r3, r3, #26
 80021ea:	d519      	bpl.n	8002220 <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ec:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021ee:	4918      	ldr	r1, [pc, #96]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	0c1b      	lsrs	r3, r3, #16
 80021f8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80021fc:	428a      	cmp	r2, r1
 80021fe:	bf18      	it	ne
 8002200:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8002204:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800220c:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800220e:	2301      	movs	r3, #1
 8002210:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8002214:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800221c:	f7ff fdd8 	bl	8001dd0 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002220:	9b01      	ldr	r3, [sp, #4]
 8002222:	0718      	lsls	r0, r3, #28
 8002224:	d599      	bpl.n	800215a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002226:	490a      	ldr	r1, [pc, #40]	; (8002250 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8002228:	6822      	ldr	r2, [r4, #0]
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800222c:	428a      	cmp	r2, r1
 800222e:	bf18      	it	ne
 8002230:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8002234:	6859      	ldr	r1, [r3, #4]
 8002236:	0689      	lsls	r1, r1, #26
 8002238:	d58f      	bpl.n	800215a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8002240:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002242:	6853      	ldr	r3, [r2, #4]
 8002244:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	0c1b      	lsrs	r3, r3, #16
 800224c:	6053      	str	r3, [r2, #4]
 800224e:	e77a      	b.n	8002146 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002250:	40003800 	.word	0x40003800
 8002254:	40003400 	.word	0x40003400

08002258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	4604      	mov	r4, r0
 800225e:	b918      	cbnz	r0, 8002268 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8002260:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002262:	b002      	add	sp, #8
 8002264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002268:	6803      	ldr	r3, [r0, #0]
 800226a:	07dd      	lsls	r5, r3, #31
 800226c:	d410      	bmi.n	8002290 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	0798      	lsls	r0, r3, #30
 8002272:	d458      	bmi.n	8002326 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	071a      	lsls	r2, r3, #28
 8002278:	f100 809a 	bmi.w	80023b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	075b      	lsls	r3, r3, #29
 8002280:	f100 80b8 	bmi.w	80023f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002284:	69a2      	ldr	r2, [r4, #24]
 8002286:	2a00      	cmp	r2, #0
 8002288:	f040 8119 	bne.w	80024be <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800228c:	2000      	movs	r0, #0
 800228e:	e7e8      	b.n	8002262 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002290:	4ba6      	ldr	r3, [pc, #664]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	f002 020c 	and.w	r2, r2, #12
 8002298:	2a04      	cmp	r2, #4
 800229a:	d007      	beq.n	80022ac <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022a2:	2a08      	cmp	r2, #8
 80022a4:	d10a      	bne.n	80022bc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	0259      	lsls	r1, r3, #9
 80022aa:	d507      	bpl.n	80022bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	4b9f      	ldr	r3, [pc, #636]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	039a      	lsls	r2, r3, #14
 80022b2:	d5dc      	bpl.n	800226e <HAL_RCC_OscConfig+0x16>
 80022b4:	6863      	ldr	r3, [r4, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1d9      	bne.n	800226e <HAL_RCC_OscConfig+0x16>
 80022ba:	e7d1      	b.n	8002260 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022bc:	6863      	ldr	r3, [r4, #4]
 80022be:	4d9b      	ldr	r5, [pc, #620]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d111      	bne.n	80022ea <HAL_RCC_OscConfig+0x92>
 80022c6:	682b      	ldr	r3, [r5, #0]
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80022ce:	f7fe fd37 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4d96      	ldr	r5, [pc, #600]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80022d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	682b      	ldr	r3, [r5, #0]
 80022d8:	039b      	lsls	r3, r3, #14
 80022da:	d4c8      	bmi.n	800226e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fd30 	bl	8000d40 <HAL_GetTick>
 80022e0:	1b80      	subs	r0, r0, r6
 80022e2:	2864      	cmp	r0, #100	; 0x64
 80022e4:	d9f7      	bls.n	80022d6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80022e6:	2003      	movs	r0, #3
 80022e8:	e7bb      	b.n	8002262 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ee:	d104      	bne.n	80022fa <HAL_RCC_OscConfig+0xa2>
 80022f0:	682b      	ldr	r3, [r5, #0]
 80022f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f6:	602b      	str	r3, [r5, #0]
 80022f8:	e7e5      	b.n	80022c6 <HAL_RCC_OscConfig+0x6e>
 80022fa:	682a      	ldr	r2, [r5, #0]
 80022fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002300:	602a      	str	r2, [r5, #0]
 8002302:	682a      	ldr	r2, [r5, #0]
 8002304:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002308:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1df      	bne.n	80022ce <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800230e:	f7fe fd17 	bl	8000d40 <HAL_GetTick>
 8002312:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002314:	682b      	ldr	r3, [r5, #0]
 8002316:	039f      	lsls	r7, r3, #14
 8002318:	d5a9      	bpl.n	800226e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231a:	f7fe fd11 	bl	8000d40 <HAL_GetTick>
 800231e:	1b80      	subs	r0, r0, r6
 8002320:	2864      	cmp	r0, #100	; 0x64
 8002322:	d9f7      	bls.n	8002314 <HAL_RCC_OscConfig+0xbc>
 8002324:	e7df      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002326:	4b81      	ldr	r3, [pc, #516]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	f012 0f0c 	tst.w	r2, #12
 800232e:	d007      	beq.n	8002340 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002336:	2a08      	cmp	r2, #8
 8002338:	d111      	bne.n	800235e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	025e      	lsls	r6, r3, #9
 800233e:	d40e      	bmi.n	800235e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002340:	4b7a      	ldr	r3, [pc, #488]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	0795      	lsls	r5, r2, #30
 8002346:	d502      	bpl.n	800234e <HAL_RCC_OscConfig+0xf6>
 8002348:	68e2      	ldr	r2, [r4, #12]
 800234a:	2a01      	cmp	r2, #1
 800234c:	d188      	bne.n	8002260 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	6921      	ldr	r1, [r4, #16]
 8002352:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002356:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800235a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235c:	e78a      	b.n	8002274 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800235e:	68e2      	ldr	r2, [r4, #12]
 8002360:	4b73      	ldr	r3, [pc, #460]	; (8002530 <HAL_RCC_OscConfig+0x2d8>)
 8002362:	b1b2      	cbz	r2, 8002392 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002368:	f7fe fcea 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	4d6f      	ldr	r5, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800236e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	0798      	lsls	r0, r3, #30
 8002374:	d507      	bpl.n	8002386 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	682b      	ldr	r3, [r5, #0]
 8002378:	6922      	ldr	r2, [r4, #16]
 800237a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800237e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002382:	602b      	str	r3, [r5, #0]
 8002384:	e776      	b.n	8002274 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fcdb 	bl	8000d40 <HAL_GetTick>
 800238a:	1b80      	subs	r0, r0, r6
 800238c:	2802      	cmp	r0, #2
 800238e:	d9ef      	bls.n	8002370 <HAL_RCC_OscConfig+0x118>
 8002390:	e7a9      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8002392:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002394:	f7fe fcd4 	bl	8000d40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002398:	4d64      	ldr	r5, [pc, #400]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800239a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239c:	682b      	ldr	r3, [r5, #0]
 800239e:	0799      	lsls	r1, r3, #30
 80023a0:	f57f af68 	bpl.w	8002274 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a4:	f7fe fccc 	bl	8000d40 <HAL_GetTick>
 80023a8:	1b80      	subs	r0, r0, r6
 80023aa:	2802      	cmp	r0, #2
 80023ac:	d9f6      	bls.n	800239c <HAL_RCC_OscConfig+0x144>
 80023ae:	e79a      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023b0:	6962      	ldr	r2, [r4, #20]
 80023b2:	4b60      	ldr	r3, [pc, #384]	; (8002534 <HAL_RCC_OscConfig+0x2dc>)
 80023b4:	b17a      	cbz	r2, 80023d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80023b6:	2201      	movs	r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023ba:	f7fe fcc1 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	4d5b      	ldr	r5, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80023c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023c4:	079f      	lsls	r7, r3, #30
 80023c6:	f53f af59 	bmi.w	800227c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ca:	f7fe fcb9 	bl	8000d40 <HAL_GetTick>
 80023ce:	1b80      	subs	r0, r0, r6
 80023d0:	2802      	cmp	r0, #2
 80023d2:	d9f6      	bls.n	80023c2 <HAL_RCC_OscConfig+0x16a>
 80023d4:	e787      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80023d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80023d8:	f7fe fcb2 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4d53      	ldr	r5, [pc, #332]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80023de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80023e2:	0798      	lsls	r0, r3, #30
 80023e4:	f57f af4a 	bpl.w	800227c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe fcaa 	bl	8000d40 <HAL_GetTick>
 80023ec:	1b80      	subs	r0, r0, r6
 80023ee:	2802      	cmp	r0, #2
 80023f0:	d9f6      	bls.n	80023e0 <HAL_RCC_OscConfig+0x188>
 80023f2:	e778      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023f4:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 80023f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80023fc:	d128      	bne.n	8002450 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	9201      	str	r2, [sp, #4]
 8002400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002402:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002412:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002414:	4d48      	ldr	r5, [pc, #288]	; (8002538 <HAL_RCC_OscConfig+0x2e0>)
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	05d9      	lsls	r1, r3, #23
 800241a:	d51b      	bpl.n	8002454 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	68a3      	ldr	r3, [r4, #8]
 800241e:	4d43      	ldr	r5, [pc, #268]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 8002420:	2b01      	cmp	r3, #1
 8002422:	d127      	bne.n	8002474 <HAL_RCC_OscConfig+0x21c>
 8002424:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800242c:	f7fe fc88 	bl	8000d40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	4d3e      	ldr	r5, [pc, #248]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002432:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800243a:	079b      	lsls	r3, r3, #30
 800243c:	d539      	bpl.n	80024b2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800243e:	2e00      	cmp	r6, #0
 8002440:	f43f af20 	beq.w	8002284 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002444:	4a39      	ldr	r2, [pc, #228]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 8002446:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	e719      	b.n	8002284 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002450:	2600      	movs	r6, #0
 8002452:	e7df      	b.n	8002414 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800245c:	f7fe fc70 	bl	8000d40 <HAL_GetTick>
 8002460:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002462:	682b      	ldr	r3, [r5, #0]
 8002464:	05da      	lsls	r2, r3, #23
 8002466:	d4d9      	bmi.n	800241c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe fc6a 	bl	8000d40 <HAL_GetTick>
 800246c:	1bc0      	subs	r0, r0, r7
 800246e:	2802      	cmp	r0, #2
 8002470:	d9f7      	bls.n	8002462 <HAL_RCC_OscConfig+0x20a>
 8002472:	e738      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	2b05      	cmp	r3, #5
 8002476:	d104      	bne.n	8002482 <HAL_RCC_OscConfig+0x22a>
 8002478:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800247a:	f043 0304 	orr.w	r3, r3, #4
 800247e:	672b      	str	r3, [r5, #112]	; 0x70
 8002480:	e7d0      	b.n	8002424 <HAL_RCC_OscConfig+0x1cc>
 8002482:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	672a      	str	r2, [r5, #112]	; 0x70
 800248a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800248c:	f022 0204 	bic.w	r2, r2, #4
 8002490:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ca      	bne.n	800242c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8002496:	f7fe fc53 	bl	8000d40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800249e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80024a2:	0798      	lsls	r0, r3, #30
 80024a4:	d5cb      	bpl.n	800243e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a6:	f7fe fc4b 	bl	8000d40 <HAL_GetTick>
 80024aa:	1bc0      	subs	r0, r0, r7
 80024ac:	4540      	cmp	r0, r8
 80024ae:	d9f7      	bls.n	80024a0 <HAL_RCC_OscConfig+0x248>
 80024b0:	e719      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b2:	f7fe fc45 	bl	8000d40 <HAL_GetTick>
 80024b6:	1bc0      	subs	r0, r0, r7
 80024b8:	4540      	cmp	r0, r8
 80024ba:	d9bd      	bls.n	8002438 <HAL_RCC_OscConfig+0x1e0>
 80024bc:	e713      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024be:	4d1b      	ldr	r5, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
 80024c0:	68ab      	ldr	r3, [r5, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	f43f aeca 	beq.w	8002260 <HAL_RCC_OscConfig+0x8>
 80024cc:	4e1b      	ldr	r6, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x2e4>)
 80024ce:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80024d2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	d134      	bne.n	8002540 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80024d6:	f7fe fc33 	bl	8000d40 <HAL_GetTick>
 80024da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	0199      	lsls	r1, r3, #6
 80024e0:	d41e      	bmi.n	8002520 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e2:	6a22      	ldr	r2, [r4, #32]
 80024e4:	69e3      	ldr	r3, [r4, #28]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80024ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80024f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4c0d      	ldr	r4, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024f8:	0852      	lsrs	r2, r2, #1
 80024fa:	3a01      	subs	r2, #1
 80024fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002500:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002502:	2301      	movs	r3, #1
 8002504:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002506:	f7fe fc1b 	bl	8000d40 <HAL_GetTick>
 800250a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250c:	6823      	ldr	r3, [r4, #0]
 800250e:	019a      	lsls	r2, r3, #6
 8002510:	f53f aebc 	bmi.w	800228c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe fc14 	bl	8000d40 <HAL_GetTick>
 8002518:	1b40      	subs	r0, r0, r5
 800251a:	2802      	cmp	r0, #2
 800251c:	d9f6      	bls.n	800250c <HAL_RCC_OscConfig+0x2b4>
 800251e:	e6e2      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002520:	f7fe fc0e 	bl	8000d40 <HAL_GetTick>
 8002524:	1bc0      	subs	r0, r0, r7
 8002526:	2802      	cmp	r0, #2
 8002528:	d9d8      	bls.n	80024dc <HAL_RCC_OscConfig+0x284>
 800252a:	e6dc      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
 800252c:	40023800 	.word	0x40023800
 8002530:	42470000 	.word	0x42470000
 8002534:	42470e80 	.word	0x42470e80
 8002538:	40007000 	.word	0x40007000
 800253c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002540:	f7fe fbfe 	bl	8000d40 <HAL_GetTick>
 8002544:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002546:	682b      	ldr	r3, [r5, #0]
 8002548:	019b      	lsls	r3, r3, #6
 800254a:	f57f ae9f 	bpl.w	800228c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254e:	f7fe fbf7 	bl	8000d40 <HAL_GetTick>
 8002552:	1b00      	subs	r0, r0, r4
 8002554:	2802      	cmp	r0, #2
 8002556:	d9f6      	bls.n	8002546 <HAL_RCC_OscConfig+0x2ee>
 8002558:	e6c5      	b.n	80022e6 <HAL_RCC_OscConfig+0x8e>
 800255a:	bf00      	nop

0800255c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255c:	4913      	ldr	r1, [pc, #76]	; (80025ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800255e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002560:	688b      	ldr	r3, [r1, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d003      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x16>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002570:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002572:	4810      	ldr	r0, [pc, #64]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x58>)
 8002574:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002576:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002578:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800257c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002580:	bf14      	ite	ne
 8002582:	480c      	ldrne	r0, [pc, #48]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002584:	480a      	ldreq	r0, [pc, #40]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002586:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800258a:	bf18      	it	ne
 800258c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	fba1 0100 	umull	r0, r1, r1, r0
 8002596:	f7fe fa01 	bl	800099c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <HAL_RCC_GetSysClockFreq+0x50>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80025a2:	3301      	adds	r3, #1
 80025a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80025a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80025aa:	bd08      	pop	{r3, pc}
 80025ac:	40023800 	.word	0x40023800
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	007a1200 	.word	0x007a1200

080025b8 <HAL_RCC_ClockConfig>:
{
 80025b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80025be:	4604      	mov	r4, r0
 80025c0:	b910      	cbnz	r0, 80025c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80025c2:	2001      	movs	r0, #1
 80025c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <HAL_RCC_ClockConfig+0x124>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	f002 020f 	and.w	r2, r2, #15
 80025d0:	428a      	cmp	r2, r1
 80025d2:	d328      	bcc.n	8002626 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d4:	6821      	ldr	r1, [r4, #0]
 80025d6:	078f      	lsls	r7, r1, #30
 80025d8:	d42d      	bmi.n	8002636 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	07c8      	lsls	r0, r1, #31
 80025dc:	d440      	bmi.n	8002660 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025de:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_ClockConfig+0x124>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	f002 020f 	and.w	r2, r2, #15
 80025e6:	4295      	cmp	r5, r2
 80025e8:	d366      	bcc.n	80026b8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ea:	6822      	ldr	r2, [r4, #0]
 80025ec:	0751      	lsls	r1, r2, #29
 80025ee:	d46c      	bmi.n	80026ca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	0713      	lsls	r3, r2, #28
 80025f2:	d507      	bpl.n	8002604 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f4:	4a3a      	ldr	r2, [pc, #232]	; (80026e0 <HAL_RCC_ClockConfig+0x128>)
 80025f6:	6921      	ldr	r1, [r4, #16]
 80025f8:	6893      	ldr	r3, [r2, #8]
 80025fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002602:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002604:	f7ff ffaa 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8002608:	4b35      	ldr	r3, [pc, #212]	; (80026e0 <HAL_RCC_ClockConfig+0x128>)
 800260a:	4a36      	ldr	r2, [pc, #216]	; (80026e4 <HAL_RCC_ClockConfig+0x12c>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	40d8      	lsrs	r0, r3
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCC_ClockConfig+0x130>)
 8002618:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fb46 	bl	8000cac <HAL_InitTick>
  return HAL_OK;
 8002620:	2000      	movs	r0, #0
 8002622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	b2ca      	uxtb	r2, r1
 8002628:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	4299      	cmp	r1, r3
 8002632:	d1c6      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xa>
 8002634:	e7ce      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1c>
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	bf1e      	ittt	ne
 800263e:	689a      	ldrne	r2, [r3, #8]
 8002640:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002644:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002646:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002648:	bf42      	ittt	mi
 800264a:	689a      	ldrmi	r2, [r3, #8]
 800264c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002650:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	68a0      	ldr	r0, [r4, #8]
 8002656:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800265a:	4302      	orrs	r2, r0
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	e7bc      	b.n	80025da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002660:	6862      	ldr	r2, [r4, #4]
 8002662:	4b1f      	ldr	r3, [pc, #124]	; (80026e0 <HAL_RCC_ClockConfig+0x128>)
 8002664:	2a01      	cmp	r2, #1
 8002666:	d11d      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	d0a8      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002670:	4e1b      	ldr	r6, [pc, #108]	; (80026e0 <HAL_RCC_ClockConfig+0x128>)
 8002672:	68b3      	ldr	r3, [r6, #8]
 8002674:	f023 0303 	bic.w	r3, r3, #3
 8002678:	4313      	orrs	r3, r2
 800267a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800267c:	f7fe fb60 	bl	8000d40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002680:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002684:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	68b3      	ldr	r3, [r6, #8]
 8002688:	6862      	ldr	r2, [r4, #4]
 800268a:	f003 030c 	and.w	r3, r3, #12
 800268e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002692:	d0a4      	beq.n	80025de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7fe fb54 	bl	8000d40 <HAL_GetTick>
 8002698:	1bc0      	subs	r0, r0, r7
 800269a:	4540      	cmp	r0, r8
 800269c:	d9f3      	bls.n	8002686 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800269e:	2003      	movs	r0, #3
}
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a4:	1e91      	subs	r1, r2, #2
 80026a6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	d802      	bhi.n	80026b2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80026b0:	e7dd      	b.n	800266e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	f013 0f02 	tst.w	r3, #2
 80026b6:	e7da      	b.n	800266e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b8:	b2ea      	uxtb	r2, r5
 80026ba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	429d      	cmp	r5, r3
 80026c4:	f47f af7d 	bne.w	80025c2 <HAL_RCC_ClockConfig+0xa>
 80026c8:	e78f      	b.n	80025ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ca:	4905      	ldr	r1, [pc, #20]	; (80026e0 <HAL_RCC_ClockConfig+0x128>)
 80026cc:	68e0      	ldr	r0, [r4, #12]
 80026ce:	688b      	ldr	r3, [r1, #8]
 80026d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026d4:	4303      	orrs	r3, r0
 80026d6:	608b      	str	r3, [r1, #8]
 80026d8:	e78a      	b.n	80025f0 <HAL_RCC_ClockConfig+0x38>
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	0800594c 	.word	0x0800594c
 80026e8:	200000ec 	.word	0x200000ec

080026ec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026ec:	4b01      	ldr	r3, [pc, #4]	; (80026f4 <HAL_RCC_GetHCLKFreq+0x8>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	200000ec 	.word	0x200000ec

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_GetPCLK1Freq+0x14>)
 80026fa:	4a05      	ldr	r2, [pc, #20]	; (8002710 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	4a03      	ldr	r2, [pc, #12]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002706:	6810      	ldr	r0, [r2, #0]
}
 8002708:	40d8      	lsrs	r0, r3
 800270a:	4770      	bx	lr
 800270c:	40023800 	.word	0x40023800
 8002710:	0800595c 	.word	0x0800595c
 8002714:	200000ec 	.word	0x200000ec

08002718 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002718:	6803      	ldr	r3, [r0, #0]
 800271a:	f013 0f05 	tst.w	r3, #5
{
 800271e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002720:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002722:	d105      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002724:	6828      	ldr	r0, [r5, #0]
 8002726:	f010 0002 	ands.w	r0, r0, #2
 800272a:	d128      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 800272c:	b003      	add	sp, #12
 800272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002730:	4c41      	ldr	r4, [pc, #260]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002732:	4e42      	ldr	r6, [pc, #264]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002734:	2300      	movs	r3, #0
 8002736:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002738:	f7fe fb02 	bl	8000d40 <HAL_GetTick>
 800273c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800273e:	6833      	ldr	r3, [r6, #0]
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	d415      	bmi.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002744:	68ab      	ldr	r3, [r5, #8]
 8002746:	686a      	ldr	r2, [r5, #4]
 8002748:	071b      	lsls	r3, r3, #28
 800274a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800274e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002752:	2301      	movs	r3, #1
 8002754:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002756:	f7fe faf3 	bl	8000d40 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275a:	4c38      	ldr	r4, [pc, #224]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 800275c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	0118      	lsls	r0, r3, #4
 8002762:	d4df      	bmi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002764:	f7fe faec 	bl	8000d40 <HAL_GetTick>
 8002768:	1b80      	subs	r0, r0, r6
 800276a:	2802      	cmp	r0, #2
 800276c:	d9f7      	bls.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x46>
 800276e:	e004      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002770:	f7fe fae6 	bl	8000d40 <HAL_GetTick>
 8002774:	1bc0      	subs	r0, r0, r7
 8002776:	2802      	cmp	r0, #2
 8002778:	d9e1      	bls.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 800277a:	2003      	movs	r0, #3
 800277c:	e7d6      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	4b2e      	ldr	r3, [pc, #184]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002784:	4c2e      	ldr	r4, [pc, #184]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002788:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	9301      	str	r3, [sp, #4]
 8002796:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800279e:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80027a0:	f7fe face 	bl	8000d40 <HAL_GetTick>
 80027a4:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	05d9      	lsls	r1, r3, #23
 80027aa:	d51b      	bpl.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ac:	4c23      	ldr	r4, [pc, #140]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80027ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80027b4:	d11c      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b6:	68eb      	ldr	r3, [r5, #12]
 80027b8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80027bc:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80027c0:	4a1e      	ldr	r2, [pc, #120]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80027c2:	d134      	bne.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80027c4:	6891      	ldr	r1, [r2, #8]
 80027c6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80027ca:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80027ce:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80027d2:	4301      	orrs	r1, r0
 80027d4:	6091      	str	r1, [r2, #8]
 80027d6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80027d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027dc:	430b      	orrs	r3, r1
 80027de:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80027e0:	2000      	movs	r0, #0
 80027e2:	e7a3      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027e4:	f7fe faac 	bl	8000d40 <HAL_GetTick>
 80027e8:	1b80      	subs	r0, r0, r6
 80027ea:	2802      	cmp	r0, #2
 80027ec:	d9db      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80027ee:	e7c4      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f0:	68ea      	ldr	r2, [r5, #12]
 80027f2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d0dd      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80027fc:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80027fe:	2101      	movs	r1, #1
 8002800:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002806:	2100      	movs	r1, #0
 8002808:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 800280a:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800280c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800280e:	07da      	lsls	r2, r3, #31
 8002810:	d5d1      	bpl.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 8002812:	f7fe fa95 	bl	8000d40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002816:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800281a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800281e:	079b      	lsls	r3, r3, #30
 8002820:	d4c9      	bmi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fa8d 	bl	8000d40 <HAL_GetTick>
 8002826:	1b80      	subs	r0, r0, r6
 8002828:	42b8      	cmp	r0, r7
 800282a:	d9f7      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x104>
 800282c:	e7a5      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282e:	6891      	ldr	r1, [r2, #8]
 8002830:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002834:	e7ce      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002836:	bf00      	nop
 8002838:	42470068 	.word	0x42470068
 800283c:	40023800 	.word	0x40023800
 8002840:	40007000 	.word	0x40007000
 8002844:	42470e40 	.word	0x42470e40

08002848 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002848:	2801      	cmp	r0, #1
 800284a:	d120      	bne.n	800288e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800284c:	4b11      	ldr	r3, [pc, #68]	; (8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800284e:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002850:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002854:	d004      	beq.n	8002860 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002856:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 800285a:	bf18      	it	ne
 800285c:	2000      	movne	r0, #0
 800285e:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002860:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002862:	490c      	ldr	r1, [pc, #48]	; (8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002864:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002866:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002868:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800286c:	bf4c      	ite	mi
 800286e:	4b0b      	ldrmi	r3, [pc, #44]	; (800289c <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002870:	4b0b      	ldrpl	r3, [pc, #44]	; (80028a0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002872:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002876:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800287a:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800287e:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002882:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002884:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8002888:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 800288c:	4770      	bx	lr
  uint32_t frequency = 0U;
 800288e:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800
 8002898:	00bb8000 	.word	0x00bb8000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	00f42400 	.word	0x00f42400

080028a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028a8:	9e06      	ldr	r6, [sp, #24]
 80028aa:	4604      	mov	r4, r0
 80028ac:	4688      	mov	r8, r1
 80028ae:	4617      	mov	r7, r2
 80028b0:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80028b2:	6822      	ldr	r2, [r4, #0]
 80028b4:	6893      	ldr	r3, [r2, #8]
 80028b6:	ea38 0303 	bics.w	r3, r8, r3
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	429f      	cmp	r7, r3
 80028c2:	d102      	bne.n	80028ca <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80028c4:	2000      	movs	r0, #0
}
 80028c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80028ca:	1c6b      	adds	r3, r5, #1
 80028cc:	d0f2      	beq.n	80028b4 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80028ce:	bb55      	cbnz	r5, 8002926 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028d8:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028da:	6862      	ldr	r2, [r4, #4]
 80028dc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80028e0:	d10a      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80028e2:	68a2      	ldr	r2, [r4, #8]
 80028e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80028e8:	d002      	beq.n	80028f0 <SPI_WaitFlagStateUntilTimeout+0x4c>
 80028ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80028ee:	d103      	bne.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f6:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80028fe:	d109      	bne.n	8002914 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002906:	0412      	lsls	r2, r2, #16
 8002908:	0c12      	lsrs	r2, r2, #16
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002912:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8002914:	2301      	movs	r3, #1
 8002916:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800291a:	2300      	movs	r3, #0
 800291c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8002920:	2003      	movs	r0, #3
 8002922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002926:	f7fe fa0b 	bl	8000d40 <HAL_GetTick>
 800292a:	1b80      	subs	r0, r0, r6
 800292c:	4285      	cmp	r5, r0
 800292e:	d8c0      	bhi.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xe>
 8002930:	e7ce      	b.n	80028d0 <SPI_WaitFlagStateUntilTimeout+0x2c>

08002932 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002932:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002934:	460b      	mov	r3, r1
 8002936:	9200      	str	r2, [sp, #0]
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	2200      	movs	r2, #0
{
 800293c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800293e:	f7ff ffb1 	bl	80028a4 <SPI_WaitFlagStateUntilTimeout>
 8002942:	b120      	cbz	r0, 800294e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002944:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002946:	f043 0320 	orr.w	r3, r3, #32
 800294a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 800294c:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 800294e:	b002      	add	sp, #8
 8002950:	bd10      	pop	{r4, pc}

08002952 <HAL_SPI_Init>:
{
 8002952:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8002954:	4604      	mov	r4, r0
 8002956:	2800      	cmp	r0, #0
 8002958:	d036      	beq.n	80029c8 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 800295e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002962:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002966:	b91b      	cbnz	r3, 8002970 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002968:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800296c:	f002 fc6e 	bl	800524c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002970:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002972:	68a0      	ldr	r0, [r4, #8]
 8002974:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800297c:	680b      	ldr	r3, [r1, #0]
 800297e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002982:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002984:	6863      	ldr	r3, [r4, #4]
 8002986:	4303      	orrs	r3, r0
 8002988:	68e0      	ldr	r0, [r4, #12]
 800298a:	4303      	orrs	r3, r0
 800298c:	6920      	ldr	r0, [r4, #16]
 800298e:	4303      	orrs	r3, r0
 8002990:	6960      	ldr	r0, [r4, #20]
 8002992:	4303      	orrs	r3, r0
 8002994:	69e0      	ldr	r0, [r4, #28]
 8002996:	4303      	orrs	r3, r0
 8002998:	6a20      	ldr	r0, [r4, #32]
 800299a:	4303      	orrs	r3, r0
 800299c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800299e:	4303      	orrs	r3, r0
 80029a0:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80029a4:	4303      	orrs	r3, r0
 80029a6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80029a8:	0c12      	lsrs	r2, r2, #16
 80029aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029ac:	f002 0204 	and.w	r2, r2, #4
 80029b0:	431a      	orrs	r2, r3
 80029b2:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029b4:	69cb      	ldr	r3, [r1, #28]
 80029b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ba:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029bc:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80029be:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029c0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80029c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
}
 80029ca:	bd10      	pop	{r4, pc}

080029cc <HAL_SPI_TransmitReceive>:
{
 80029cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029d0:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80029d2:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80029d6:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80029d8:	2b01      	cmp	r3, #1
{
 80029da:	4604      	mov	r4, r0
 80029dc:	460d      	mov	r5, r1
 80029de:	4616      	mov	r6, r2
 80029e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80029e2:	f000 80ed 	beq.w	8002bc0 <HAL_SPI_TransmitReceive+0x1f4>
 80029e6:	2301      	movs	r3, #1
 80029e8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80029ec:	f7fe f9a8 	bl	8000d40 <HAL_GetTick>
  tmp  = hspi->State;
 80029f0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 80029f4:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 80029f6:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80029f8:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80029fa:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80029fc:	d00a      	beq.n	8002a14 <HAL_SPI_TransmitReceive+0x48>
 80029fe:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8002a02:	f040 80db 	bne.w	8002bbc <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002a06:	68a2      	ldr	r2, [r4, #8]
 8002a08:	2a00      	cmp	r2, #0
 8002a0a:	f040 80d7 	bne.w	8002bbc <HAL_SPI_TransmitReceive+0x1f0>
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	f040 80d4 	bne.w	8002bbc <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8002a14:	2d00      	cmp	r5, #0
 8002a16:	d04e      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0xea>
 8002a18:	2e00      	cmp	r6, #0
 8002a1a:	d04c      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0xea>
 8002a1c:	f1b9 0f00 	cmp.w	r9, #0
 8002a20:	d049      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8002a22:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a26:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8002a28:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a2a:	bf04      	itt	eq
 8002a2c:	2305      	moveq	r3, #5
 8002a2e:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002a36:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a38:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a3a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8002a3c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8002a40:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a44:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8002a46:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a4a:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8002a4c:	bf58      	it	pl
 8002a4e:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a50:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8002a52:	bf58      	it	pl
 8002a54:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8002a58:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8002a5c:	bf58      	it	pl
 8002a5e:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a60:	68e2      	ldr	r2, [r4, #12]
 8002a62:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002a66:	d15d      	bne.n	8002b24 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002a68:	b119      	cbz	r1, 8002a72 <HAL_SPI_TransmitReceive+0xa6>
 8002a6a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	2a01      	cmp	r2, #1
 8002a70:	d106      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002a72:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002a76:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002a78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002a80:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a84:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	b9bb      	cbnz	r3, 8002aba <HAL_SPI_TransmitReceive+0xee>
 8002a8a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	b9a3      	cbnz	r3, 8002aba <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002a90:	f8cd 8000 	str.w	r8, [sp]
 8002a94:	463b      	mov	r3, r7
 8002a96:	2201      	movs	r2, #1
 8002a98:	2102      	movs	r1, #2
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7ff ff02 	bl	80028a4 <SPI_WaitFlagStateUntilTimeout>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d135      	bne.n	8002b10 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	4639      	mov	r1, r7
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff ff42 	bl	8002932 <SPI_CheckFlag_BSY>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d079      	beq.n	8002ba6 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	e02b      	b.n	8002b12 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002aba:	f1b9 0f00 	cmp.w	r9, #0
 8002abe:	d00f      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x114>
 8002ac0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	b163      	cbz	r3, 8002ae0 <HAL_SPI_TransmitReceive+0x114>
 8002ac6:	6823      	ldr	r3, [r4, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	0791      	lsls	r1, r2, #30
 8002acc:	d508      	bpl.n	8002ae0 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002ace:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002ad2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002ad4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8002adc:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002ae0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b163      	cbz	r3, 8002b00 <HAL_SPI_TransmitReceive+0x134>
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	07d2      	lsls	r2, r2, #31
 8002aec:	d508      	bpl.n	8002b00 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002af4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002afc:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002b00:	1c78      	adds	r0, r7, #1
 8002b02:	d0bf      	beq.n	8002a84 <HAL_SPI_TransmitReceive+0xb8>
 8002b04:	f7fe f91c 	bl	8000d40 <HAL_GetTick>
 8002b08:	eba0 0008 	sub.w	r0, r0, r8
 8002b0c:	4287      	cmp	r7, r0
 8002b0e:	d8b9      	bhi.n	8002a84 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8002b10:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002b1e:	b005      	add	sp, #20
 8002b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002b24:	b119      	cbz	r1, 8002b2e <HAL_SPI_TransmitReceive+0x162>
 8002b26:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	2a01      	cmp	r2, #1
 8002b2c:	d106      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002b2e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002b32:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8002b34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002b3c:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b91b      	cbnz	r3, 8002b4e <HAL_SPI_TransmitReceive+0x182>
 8002b46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0a0      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002b4e:	f1b9 0f00 	cmp.w	r9, #0
 8002b52:	d00f      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x1a8>
 8002b54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b163      	cbz	r3, 8002b74 <HAL_SPI_TransmitReceive+0x1a8>
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	0791      	lsls	r1, r2, #30
 8002b60:	d508      	bpl.n	8002b74 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002b62:	782a      	ldrb	r2, [r5, #0]
 8002b64:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002b66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002b6e:	3501      	adds	r5, #1
        txallowed = 0U;
 8002b70:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002b74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	b163      	cbz	r3, 8002b94 <HAL_SPI_TransmitReceive+0x1c8>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	07d2      	lsls	r2, r2, #31
 8002b80:	d508      	bpl.n	8002b94 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8002b86:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002b8e:	3601      	adds	r6, #1
        txallowed = 1U;
 8002b90:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002b94:	1c7b      	adds	r3, r7, #1
 8002b96:	d0d3      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x174>
 8002b98:	f7fe f8d2 	bl	8000d40 <HAL_GetTick>
 8002b9c:	eba0 0008 	sub.w	r0, r0, r8
 8002ba0:	4287      	cmp	r7, r0
 8002ba2:	d8cd      	bhi.n	8002b40 <HAL_SPI_TransmitReceive+0x174>
 8002ba4:	e7b4      	b.n	8002b10 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ba6:	68a3      	ldr	r3, [r4, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1b2      	bne.n	8002b12 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	9003      	str	r0, [sp, #12]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	9203      	str	r2, [sp, #12]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	9303      	str	r3, [sp, #12]
 8002bb8:	9b03      	ldr	r3, [sp, #12]
 8002bba:	e7aa      	b.n	8002b12 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8002bbc:	2002      	movs	r0, #2
 8002bbe:	e7a8      	b.n	8002b12 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	e7ac      	b.n	8002b1e <HAL_SPI_TransmitReceive+0x152>

08002bc4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc4:	6a03      	ldr	r3, [r0, #32]
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bcc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002bce:	6842      	ldr	r2, [r0, #4]
{
 8002bd0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bd2:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bd4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bd6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002bda:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bdc:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002bde:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002be2:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002be4:	4c0c      	ldr	r4, [pc, #48]	; (8002c18 <TIM_OC1_SetConfig+0x54>)
 8002be6:	42a0      	cmp	r0, r4
 8002be8:	d009      	beq.n	8002bfe <TIM_OC1_SetConfig+0x3a>
 8002bea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002bee:	42a0      	cmp	r0, r4
 8002bf0:	d005      	beq.n	8002bfe <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf2:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bf4:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002bf6:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002bf8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002bfa:	6203      	str	r3, [r0, #32]
} 
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002bfe:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c00:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c02:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002c06:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c08:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c0e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c10:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c14:	4322      	orrs	r2, r4
 8002c16:	e7ec      	b.n	8002bf2 <TIM_OC1_SetConfig+0x2e>
 8002c18:	40010000 	.word	0x40010000

08002c1c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c1c:	6a03      	ldr	r3, [r0, #32]
 8002c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c22:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c24:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002c26:	6842      	ldr	r2, [r0, #4]
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c2a:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002c2e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c32:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c34:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002c36:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c3a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002c3e:	4c0e      	ldr	r4, [pc, #56]	; (8002c78 <TIM_OC3_SetConfig+0x5c>)
 8002c40:	42a0      	cmp	r0, r4
 8002c42:	d009      	beq.n	8002c58 <TIM_OC3_SetConfig+0x3c>
 8002c44:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c48:	42a0      	cmp	r0, r4
 8002c4a:	d005      	beq.n	8002c58 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4c:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c4e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002c50:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002c52:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c54:	6203      	str	r3, [r0, #32]
}
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c58:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c5a:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c60:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c64:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c6a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c70:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002c74:	e7ea      	b.n	8002c4c <TIM_OC3_SetConfig+0x30>
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000

08002c7c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c7c:	6a03      	ldr	r3, [r0, #32]
 8002c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c82:	6203      	str	r3, [r0, #32]
{
 8002c84:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c86:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002c88:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c8e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c96:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002c98:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c9c:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002ca0:	4d09      	ldr	r5, [pc, #36]	; (8002cc8 <TIM_OC4_SetConfig+0x4c>)
 8002ca2:	42a8      	cmp	r0, r5
 8002ca4:	d009      	beq.n	8002cba <TIM_OC4_SetConfig+0x3e>
 8002ca6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002caa:	42a8      	cmp	r0, r5
 8002cac:	d005      	beq.n	8002cba <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cae:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb0:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002cb2:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb4:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb6:	6204      	str	r4, [r0, #32]
}
 8002cb8:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cba:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cc0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002cc4:	e7f3      	b.n	8002cae <TIM_OC4_SetConfig+0x32>
 8002cc6:	bf00      	nop
 8002cc8:	40010000 	.word	0x40010000

08002ccc <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ccc:	6803      	ldr	r3, [r0, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
}
 8002cde:	2000      	movs	r0, #0
 8002ce0:	4770      	bx	lr

08002ce2 <HAL_TIM_OC_DelayElapsedCallback>:
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_IC_CaptureCallback>:
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_TriggerCallback>:
 8002ce8:	4770      	bx	lr

08002cea <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cea:	6803      	ldr	r3, [r0, #0]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	0791      	lsls	r1, r2, #30
{
 8002cf0:	b510      	push	{r4, lr}
 8002cf2:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf4:	d50e      	bpl.n	8002d14 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	0792      	lsls	r2, r2, #30
 8002cfa:	d50b      	bpl.n	8002d14 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cfc:	f06f 0202 	mvn.w	r2, #2
 8002d00:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d02:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d04:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d06:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d08:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d0a:	d077      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0c:	f7ff ffea 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d10:	2300      	movs	r3, #0
 8002d12:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	0750      	lsls	r0, r2, #29
 8002d1a:	d510      	bpl.n	8002d3e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	0751      	lsls	r1, r2, #29
 8002d20:	d50d      	bpl.n	8002d3e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d22:	f06f 0204 	mvn.w	r2, #4
 8002d26:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d28:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d2a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d30:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002d32:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d34:	d068      	beq.n	8002e08 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	f7ff ffd5 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	0712      	lsls	r2, r2, #28
 8002d44:	d50f      	bpl.n	8002d66 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	0710      	lsls	r0, r2, #28
 8002d4a:	d50c      	bpl.n	8002d66 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d4c:	f06f 0208 	mvn.w	r2, #8
 8002d50:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d52:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d54:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d56:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d58:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d5c:	d05a      	beq.n	8002e14 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	f7ff ffc1 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d62:	2300      	movs	r3, #0
 8002d64:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	691a      	ldr	r2, [r3, #16]
 8002d6a:	06d2      	lsls	r2, r2, #27
 8002d6c:	d510      	bpl.n	8002d90 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	06d0      	lsls	r0, r2, #27
 8002d72:	d50d      	bpl.n	8002d90 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d74:	f06f 0210 	mvn.w	r2, #16
 8002d78:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d7c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d7e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d82:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002d84:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d86:	d04b      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d88:	f7ff ffac 	bl	8002ce4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	07d1      	lsls	r1, r2, #31
 8002d96:	d508      	bpl.n	8002daa <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	07d2      	lsls	r2, r2, #31
 8002d9c:	d505      	bpl.n	8002daa <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d9e:	f06f 0201 	mvn.w	r2, #1
 8002da2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002da4:	4620      	mov	r0, r4
 8002da6:	f001 fed5 	bl	8004b54 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	0610      	lsls	r0, r2, #24
 8002db0:	d508      	bpl.n	8002dc4 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	0611      	lsls	r1, r2, #24
 8002db6:	d505      	bpl.n	8002dc4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f000 f9a9 	bl	8003116 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	0652      	lsls	r2, r2, #25
 8002dca:	d508      	bpl.n	8002dde <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	0650      	lsls	r0, r2, #25
 8002dd0:	d505      	bpl.n	8002dde <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f7ff ff85 	bl	8002ce8 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	0691      	lsls	r1, r2, #26
 8002de4:	d522      	bpl.n	8002e2c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	0692      	lsls	r2, r2, #26
 8002dea:	d51f      	bpl.n	8002e2c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dec:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002df0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df2:	611a      	str	r2, [r3, #16]
}
 8002df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002df8:	f000 b98c 	b.w	8003114 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfc:	f7ff ff71 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7ff ff70 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e06:	e783      	b.n	8002d10 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e08:	f7ff ff6b 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f7ff ff6a 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e12:	e792      	b.n	8002d3a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e14:	f7ff ff65 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7ff ff64 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e1e:	e7a0      	b.n	8002d62 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e20:	f7ff ff5f 	bl	8002ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7ff ff5e 	bl	8002ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8002e2a:	e7af      	b.n	8002d8c <HAL_TIM_IRQHandler+0xa2>
 8002e2c:	bd10      	pop	{r4, pc}
	...

08002e30 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002e30:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002e32:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002e34:	4290      	cmp	r0, r2
 8002e36:	d012      	beq.n	8002e5e <TIM_Base_SetConfig+0x2e>
 8002e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e3c:	d00f      	beq.n	8002e5e <TIM_Base_SetConfig+0x2e>
 8002e3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e42:	4290      	cmp	r0, r2
 8002e44:	d00b      	beq.n	8002e5e <TIM_Base_SetConfig+0x2e>
 8002e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e4a:	4290      	cmp	r0, r2
 8002e4c:	d007      	beq.n	8002e5e <TIM_Base_SetConfig+0x2e>
 8002e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e52:	4290      	cmp	r0, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_Base_SetConfig+0x2e>
 8002e56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e5a:	4290      	cmp	r0, r2
 8002e5c:	d11d      	bne.n	8002e9a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002e5e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e64:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002e66:	4a21      	ldr	r2, [pc, #132]	; (8002eec <TIM_Base_SetConfig+0xbc>)
 8002e68:	4290      	cmp	r0, r2
 8002e6a:	d104      	bne.n	8002e76 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e72:	4313      	orrs	r3, r2
 8002e74:	e028      	b.n	8002ec8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002e76:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e7a:	d0f7      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002e7c:	4a1c      	ldr	r2, [pc, #112]	; (8002ef0 <TIM_Base_SetConfig+0xc0>)
 8002e7e:	4290      	cmp	r0, r2
 8002e80:	d0f4      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e86:	4290      	cmp	r0, r2
 8002e88:	d0f0      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002e8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e8e:	4290      	cmp	r0, r2
 8002e90:	d0ec      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002e92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e96:	4290      	cmp	r0, r2
 8002e98:	d0e8      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <TIM_Base_SetConfig+0xc4>)
 8002e9c:	4290      	cmp	r0, r2
 8002e9e:	d0e5      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ea4:	4290      	cmp	r0, r2
 8002ea6:	d0e1      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eac:	4290      	cmp	r0, r2
 8002eae:	d0dd      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002eb0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002eb4:	4290      	cmp	r0, r2
 8002eb6:	d0d9      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ebc:	4290      	cmp	r0, r2
 8002ebe:	d0d5      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
 8002ec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ec4:	4290      	cmp	r0, r2
 8002ec6:	d0d1      	beq.n	8002e6c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002ec8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eca:	688b      	ldr	r3, [r1, #8]
 8002ecc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ece:	680b      	ldr	r3, [r1, #0]
 8002ed0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002ed2:	4b06      	ldr	r3, [pc, #24]	; (8002eec <TIM_Base_SetConfig+0xbc>)
 8002ed4:	4298      	cmp	r0, r3
 8002ed6:	d006      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb6>
 8002ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002edc:	4298      	cmp	r0, r3
 8002ede:	d002      	beq.n	8002ee6 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	6143      	str	r3, [r0, #20]
}
 8002ee4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee6:	690b      	ldr	r3, [r1, #16]
 8002ee8:	6303      	str	r3, [r0, #48]	; 0x30
 8002eea:	e7f9      	b.n	8002ee0 <TIM_Base_SetConfig+0xb0>
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40014000 	.word	0x40014000

08002ef8 <HAL_TIM_Base_Init>:
{ 
 8002ef8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002efa:	4604      	mov	r4, r0
 8002efc:	b1a0      	cbz	r0, 8002f28 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002efe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f06:	b91b      	cbnz	r3, 8002f10 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f08:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002f0c:	f002 fa0a 	bl	8005324 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f10:	2302      	movs	r3, #2
 8002f12:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	1d21      	adds	r1, r4, #4
 8002f1a:	f7ff ff89 	bl	8002e30 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002f24:	2000      	movs	r0, #0
 8002f26:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f28:	2001      	movs	r0, #1
}
 8002f2a:	bd10      	pop	{r4, pc}

08002f2c <HAL_TIM_PWM_Init>:
{
 8002f2c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002f2e:	4604      	mov	r4, r0
 8002f30:	b1a0      	cbz	r0, 8002f5c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f3a:	b91b      	cbnz	r3, 8002f44 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002f40:	f002 f9d8 	bl	80052f4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002f44:	2302      	movs	r3, #2
 8002f46:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f4a:	6820      	ldr	r0, [r4, #0]
 8002f4c:	1d21      	adds	r1, r4, #4
 8002f4e:	f7ff ff6f 	bl	8002e30 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f52:	2301      	movs	r3, #1
 8002f54:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002f58:	2000      	movs	r0, #0
 8002f5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f5c:	2001      	movs	r0, #1
}  
 8002f5e:	bd10      	pop	{r4, pc}

08002f60 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f60:	6a03      	ldr	r3, [r0, #32]
 8002f62:	f023 0310 	bic.w	r3, r3, #16
 8002f66:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f68:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002f6a:	6842      	ldr	r2, [r0, #4]
{
 8002f6c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002f6e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f72:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f76:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f7a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002f7c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f80:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002f84:	4c0d      	ldr	r4, [pc, #52]	; (8002fbc <TIM_OC2_SetConfig+0x5c>)
 8002f86:	42a0      	cmp	r0, r4
 8002f88:	d009      	beq.n	8002f9e <TIM_OC2_SetConfig+0x3e>
 8002f8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f8e:	42a0      	cmp	r0, r4
 8002f90:	d005      	beq.n	8002f9e <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8002f92:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002f94:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f96:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002f98:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002f9a:	6203      	str	r3, [r0, #32]
}
 8002f9c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f9e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fa0:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fa6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002faa:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb0:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fb6:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002fba:	e7ea      	b.n	8002f92 <TIM_OC2_SetConfig+0x32>
 8002fbc:	40010000 	.word	0x40010000

08002fc0 <HAL_TIM_PWM_ConfigChannel>:
{
 8002fc0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002fc2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002fc6:	2b01      	cmp	r3, #1
{
 8002fc8:	4604      	mov	r4, r0
 8002fca:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002fce:	d025      	beq.n	800301c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8002fda:	2a0c      	cmp	r2, #12
 8002fdc:	d818      	bhi.n	8003010 <HAL_TIM_PWM_ConfigChannel+0x50>
 8002fde:	e8df f002 	tbb	[pc, r2]
 8002fe2:	1707      	.short	0x1707
 8002fe4:	171e1717 	.word	0x171e1717
 8002fe8:	172f1717 	.word	0x172f1717
 8002fec:	1717      	.short	0x1717
 8002fee:	40          	.byte	0x40
 8002fef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ff0:	6820      	ldr	r0, [r4, #0]
 8002ff2:	f7ff fde7 	bl	8002bc4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ff6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	f042 0208 	orr.w	r2, r2, #8
 8003000:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	f022 0204 	bic.w	r2, r2, #4
 8003008:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800300e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003010:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003012:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003014:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003018:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800301c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	f7ff ff9e 	bl	8002f60 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003024:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003026:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800302e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800303e:	e7e6      	b.n	800300e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	f7ff fdeb 	bl	8002c1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003046:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8003048:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	f042 0208 	orr.w	r2, r2, #8
 8003050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	f022 0204 	bic.w	r2, r2, #4
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800305e:	61da      	str	r2, [r3, #28]
    break;
 8003060:	e7d6      	b.n	8003010 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003062:	6820      	ldr	r0, [r4, #0]
 8003064:	f7ff fe0a 	bl	8002c7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003068:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800306a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003072:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800307a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003082:	e7ec      	b.n	800305e <HAL_TIM_PWM_ConfigChannel+0x9e>

08003084 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8003084:	6a03      	ldr	r3, [r0, #32]
{
 8003086:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8003088:	2401      	movs	r4, #1
 800308a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800308c:	ea23 0304 	bic.w	r3, r3, r4
 8003090:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8003092:	6a03      	ldr	r3, [r0, #32]
 8003094:	408a      	lsls	r2, r1
 8003096:	431a      	orrs	r2, r3
 8003098:	6202      	str	r2, [r0, #32]
 800309a:	bd10      	pop	{r4, pc}

0800309c <HAL_TIM_PWM_Start>:
{
 800309c:	b510      	push	{r4, lr}
 800309e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030a0:	2201      	movs	r2, #1
 80030a2:	6800      	ldr	r0, [r0, #0]
 80030a4:	f7ff ffee 	bl	8003084 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	4a08      	ldr	r2, [pc, #32]	; (80030cc <HAL_TIM_PWM_Start+0x30>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d003      	beq.n	80030b8 <HAL_TIM_PWM_Start+0x1c>
 80030b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d103      	bne.n	80030c0 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80030b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
} 
 80030c8:	2000      	movs	r0, #0
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	40010000 	.word	0x40010000

080030d0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80030d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80030d4:	2b01      	cmp	r3, #1
{
 80030d6:	b510      	push	{r4, lr}
 80030d8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80030dc:	d018      	beq.n	8003110 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80030de:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030e2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80030e4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030e6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80030e8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030ee:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	4322      	orrs	r2, r4
 80030f4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8003104:	2301      	movs	r3, #1
 8003106:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800310a:	2300      	movs	r3, #0
 800310c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8003110:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8003112:	bd10      	pop	{r4, pc}

08003114 <HAL_TIMEx_CommutationCallback>:
 8003114:	4770      	bx	lr

08003116 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003116:	4770      	bx	lr

08003118 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003118:	b084      	sub	sp, #16
 800311a:	b538      	push	{r3, r4, r5, lr}
 800311c:	ad05      	add	r5, sp, #20
 800311e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003124:	2b01      	cmp	r3, #1
{
 8003126:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003128:	d126      	bne.n	8003178 <USB_CoreInit+0x60>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800312a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003132:	68c3      	ldr	r3, [r0, #12]
 8003134:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800313e:	68c3      	ldr	r3, [r0, #12]
 8003140:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003144:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8003146:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003148:	2b01      	cmp	r3, #1
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800314a:	bf02      	ittt	eq
 800314c:	68c3      	ldreq	r3, [r0, #12]
 800314e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8003152:	60c3      	streq	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003154:	f000 f88a 	bl	800326c <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8003158:	9b08      	ldr	r3, [sp, #32]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <USB_CoreInit+0x56>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800315e:	68a3      	ldr	r3, [r4, #8]
 8003160:	f043 0306 	orr.w	r3, r3, #6
 8003164:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003166:	68a3      	ldr	r3, [r4, #8]
 8003168:	f043 0320 	orr.w	r3, r3, #32
 800316c:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 800316e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003172:	2000      	movs	r0, #0
 8003174:	b004      	add	sp, #16
 8003176:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003178:	68c3      	ldr	r3, [r0, #12]
 800317a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800317e:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003180:	f000 f874 	bl	800326c <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8003184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003188:	63a3      	str	r3, [r4, #56]	; 0x38
 800318a:	e7e5      	b.n	8003158 <USB_CoreInit+0x40>

0800318c <USB_EnableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800318c:	6883      	ldr	r3, [r0, #8]
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003194:	2000      	movs	r0, #0
 8003196:	4770      	bx	lr

08003198 <USB_DisableGlobalInt>:
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003198:	6883      	ldr	r3, [r0, #8]
 800319a:	f023 0301 	bic.w	r3, r3, #1
 800319e:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 80031a0:	2000      	movs	r0, #0
 80031a2:	4770      	bx	lr

080031a4 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 80031a4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80031a6:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 80031a8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 80031aa:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80031ae:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 80031b0:	d108      	bne.n	80031c4 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 80031b2:	68c3      	ldr	r3, [r0, #12]
 80031b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031b8:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50U);
 80031ba:	2032      	movs	r0, #50	; 0x32
 80031bc:	f7fd fdc6 	bl	8000d4c <HAL_Delay>
  
  return HAL_OK;
}
 80031c0:	2000      	movs	r0, #0
 80031c2:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 80031c4:	2900      	cmp	r1, #0
 80031c6:	d1f8      	bne.n	80031ba <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80031c8:	68c3      	ldr	r3, [r0, #12]
 80031ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ce:	60c3      	str	r3, [r0, #12]
 80031d0:	e7f3      	b.n	80031ba <USB_SetCurrentMode+0x16>
	...

080031d4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80031d4:	0189      	lsls	r1, r1, #6
 80031d6:	f041 0120 	orr.w	r1, r1, #32
 80031da:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <USB_FlushTxFifo+0x20>)
 80031dc:	6101      	str	r1, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80031de:	3a01      	subs	r2, #1
 80031e0:	d005      	beq.n	80031ee <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031e2:	6903      	ldr	r3, [r0, #16]
 80031e4:	f013 0320 	ands.w	r3, r3, #32
 80031e8:	d1f9      	bne.n	80031de <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80031ea:	4618      	mov	r0, r3
 80031ec:	4770      	bx	lr
      return HAL_TIMEOUT;
 80031ee:	2003      	movs	r0, #3
}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	00030d41 	.word	0x00030d41

080031f8 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031f8:	2310      	movs	r3, #16
 80031fa:	4a06      	ldr	r2, [pc, #24]	; (8003214 <USB_FlushRxFifo+0x1c>)
 80031fc:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 80031fe:	3a01      	subs	r2, #1
 8003200:	d005      	beq.n	800320e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003202:	6903      	ldr	r3, [r0, #16]
 8003204:	f013 0310 	ands.w	r3, r3, #16
 8003208:	d1f9      	bne.n	80031fe <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800320a:	4618      	mov	r0, r3
 800320c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800320e:	2003      	movs	r0, #3
}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	00030d41 	.word	0x00030d41

08003218 <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003218:	b510      	push	{r4, lr}
 800321a:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b = 0U , i = 0U;
  
  if (dma == 0U)
 800321e:	b94c      	cbnz	r4, 8003234 <USB_WritePacket+0x1c>
  {
    count32b =  (len + 3U) / 4U;
 8003220:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++, src += 4U)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003222:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003226:	f023 0303 	bic.w	r3, r3, #3
 800322a:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 800322e:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++, src += 4U)
 8003230:	4299      	cmp	r1, r3
 8003232:	d101      	bne.n	8003238 <USB_WritePacket+0x20>
    }
  }
  return HAL_OK;
}
 8003234:	2000      	movs	r0, #0
 8003236:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003238:	f851 0b04 	ldr.w	r0, [r1], #4
 800323c:	6010      	str	r0, [r2, #0]
 800323e:	e7f7      	b.n	8003230 <USB_WritePacket+0x18>

08003240 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0U;
  uint32_t count32b = (len + 3U) / 4U;
 8003240:	3203      	adds	r2, #3
 8003242:	f022 0203 	bic.w	r2, r2, #3
 8003246:	440a      	add	r2, r1
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003248:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for ( i = 0U; i < count32b; i++, dest += 4U )
 800324c:	4291      	cmp	r1, r2
 800324e:	d101      	bne.n	8003254 <USB_ReadPacket+0x14>
    
  }
  return ((void *)dest);
}
 8003250:	4608      	mov	r0, r1
 8003252:	4770      	bx	lr
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003254:	6803      	ldr	r3, [r0, #0]
 8003256:	f841 3b04 	str.w	r3, [r1], #4
 800325a:	e7f7      	b.n	800324c <USB_ReadPacket+0xc>

0800325c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0U;
  
  v = USBx->GINTSTS;
 800325c:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 800325e:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8003260:	4010      	ands	r0, r2
 8003262:	4770      	bx	lr

08003264 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1U);
 8003264:	6940      	ldr	r0, [r0, #20]
}
 8003266:	f000 0001 	and.w	r0, r0, #1
 800326a:	4770      	bx	lr

0800326c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800326e:	3b01      	subs	r3, #1
 8003270:	d101      	bne.n	8003276 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003272:	2003      	movs	r0, #3
 8003274:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003276:	6902      	ldr	r2, [r0, #16]
 8003278:	2a00      	cmp	r2, #0
 800327a:	daf8      	bge.n	800326e <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800327c:	6903      	ldr	r3, [r0, #16]
 800327e:	4a06      	ldr	r2, [pc, #24]	; (8003298 <USB_CoreReset+0x2c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8003286:	3a01      	subs	r2, #1
 8003288:	d0f3      	beq.n	8003272 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800328a:	6903      	ldr	r3, [r0, #16]
 800328c:	f013 0301 	ands.w	r3, r3, #1
 8003290:	d1f9      	bne.n	8003286 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8003292:	4618      	mov	r0, r3
}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	00030d41 	.word	0x00030d41

0800329c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800329c:	b084      	sub	sp, #16
 800329e:	b538      	push	{r3, r4, r5, lr}
 80032a0:	4604      	mov	r4, r0
 80032a2:	a805      	add	r0, sp, #20
 80032a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i;
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  /* Activate VBUS Sensing B */
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || \
    defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
#else
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSASEN);
 80032ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &=~ (USB_OTG_GCCFG_VBUSBSEN);
 80032b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032b8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80032bc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80032be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032c4:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */

  /* Disable the FS/LS support mode only */
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80032c6:	9b07      	ldr	r3, [sp, #28]
 80032c8:	2b03      	cmp	r3, #3
     (USBx != USB_OTG_FS))
  {
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80032ca:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 80032ce:	d13c      	bne.n	800334a <USB_HostInit+0xae>
 80032d0:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 80032d4:	d039      	beq.n	800334a <USB_HostInit+0xae>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS; 
 80032d6:	f043 0304 	orr.w	r3, r3, #4
 80032da:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  {
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
  }

  /* Make sure the FIFOs are flushed. */
  USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80032de:	2110      	movs	r1, #16
 80032e0:	4620      	mov	r0, r4
 80032e2:	f7ff ff77 	bl	80031d4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff ff86 	bl	80031f8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	9906      	ldr	r1, [sp, #24]
 80032f0:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 80032f8:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80032fa:	428b      	cmp	r3, r1
 80032fc:	d12a      	bne.n	8003354 <USB_HostInit+0xb8>
  }
  
  /* Enable VBUS driving */
  USB_DriveVbus(USBx, 1U);
 80032fe:	2101      	movs	r1, #1
 8003300:	4620      	mov	r0, r4
 8003302:	f000 f873 	bl	80033ec <USB_DriveVbus>
  
  HAL_Delay(200U);
 8003306:	20c8      	movs	r0, #200	; 0xc8
 8003308:	f7fd fd20 	bl	8000d4c <HAL_Delay>
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
  
  if(USBx == USB_OTG_FS)
 8003310:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003314:	f04f 33ff 	mov.w	r3, #4294967295
 8003318:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 800331a:	d120      	bne.n	800335e <USB_HostInit+0xc2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U; 
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16U)& USB_OTG_NPTXFD) | 0x80U);
 8003320:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003324:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <USB_HostInit+0xd8>)
 8003328:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
  }
  
  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 800332c:	9b08      	ldr	r3, [sp, #32]
 800332e:	b91b      	cbnz	r3, 8003338 <USB_HostInit+0x9c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003330:	69a3      	ldr	r3, [r4, #24]
 8003332:	f043 0310 	orr.w	r3, r3, #16
 8003336:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8003338:	69a2      	ldr	r2, [r4, #24]
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <USB_HostInit+0xdc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             |USB_OTG_GINTSTS_DISCINT|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
}
 8003340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003344:	2000      	movs	r0, #0
 8003346:	b004      	add	sp, #16
 8003348:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);  
 800334a:	f023 0304 	bic.w	r3, r3, #4
 800334e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8003352:	e7c4      	b.n	80032de <USB_HostInit+0x42>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003354:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003356:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8003358:	60d5      	str	r5, [r2, #12]
 800335a:	3220      	adds	r2, #32
 800335c:	e7cd      	b.n	80032fa <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x200U; 
 800335e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003362:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16U)& USB_OTG_NPTXFD) | 0x200U);
 8003364:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8003368:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16U)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <USB_HostInit+0xe0>)
 800336c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003370:	e7dc      	b.n	800332c <USB_HostInit+0x90>
 8003372:	bf00      	nop
 8003374:	004000e0 	.word	0x004000e0
 8003378:	a3200008 	.word	0xa3200008
 800337c:	00e00300 	.word	0x00e00300

08003380 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock 
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003380:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003384:	f023 0303 	bic.w	r3, r3, #3
{
 8003388:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800338a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800338e:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8003392:	f001 0303 	and.w	r3, r1, #3
 8003396:	4323      	orrs	r3, r4
  
  if (freq ==  HCFG_48_MHZ)
 8003398:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800339a:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800339e:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 80033a2:	d104      	bne.n	80033ae <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80033a4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80033a8:	6053      	str	r3, [r2, #4]
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
  } 
  return HAL_OK;  
}
 80033aa:	2000      	movs	r0, #0
 80033ac:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 80033ae:	2902      	cmp	r1, #2
    USBx_HOST->HFIR = 6000U;
 80033b0:	bf04      	itt	eq
 80033b2:	f241 7370 	movweq	r3, #6000	; 0x1770
 80033b6:	6053      	streq	r3, [r2, #4]
 80033b8:	e7f7      	b.n	80033aa <USB_InitFSLSPClkSel+0x2a>

080033ba <USB_ResetPort>:
  * @retval HAL status
  * @note   (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80033ba:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 80033bc:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80033c0:	9301      	str	r3, [sp, #4]
  
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80033c2:	9b01      	ldr	r3, [sp, #4]
 80033c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033c8:	9301      	str	r3, [sp, #4]
    USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 80033ca:	9b01      	ldr	r3, [sp, #4]
 80033cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 80033d0:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);  
 80033d2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (10U);                                /* See Note #1 */
 80033d6:	200a      	movs	r0, #10
 80033d8:	f7fd fcb8 	bl	8000d4c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80033dc:	9b01      	ldr	r3, [sp, #4]
  return HAL_OK;
}
 80033de:	2000      	movs	r0, #0
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0); 
 80033e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e4:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
}
 80033e8:	b002      	add	sp, #8
 80033ea:	bd10      	pop	{r4, pc}

080033ec <USB_DriveVbus>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80033ec:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80033ee:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80033f2:	9301      	str	r3, [sp, #4]
  hprt0 &= ~(USB_OTG_HPRT_PENA    | USB_OTG_HPRT_PCDET |\
 80033f4:	9b01      	ldr	r3, [sp, #4]
 80033f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033fa:	9301      	str	r3, [sp, #4]
                         USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );
  
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	04da      	lsls	r2, r3, #19
 8003400:	d406      	bmi.n	8003410 <USB_DriveVbus+0x24>
 8003402:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0); 
 8003404:	bf02      	ittt	eq
 8003406:	9b01      	ldreq	r3, [sp, #4]
 8003408:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800340c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003410:	9b01      	ldr	r3, [sp, #4]
 8003412:	04db      	lsls	r3, r3, #19
 8003414:	d505      	bpl.n	8003422 <USB_DriveVbus+0x36>
 8003416:	b921      	cbnz	r1, 8003422 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0); 
 8003418:	9b01      	ldr	r3, [sp, #4]
 800341a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800341e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK; 
}
 8003422:	2000      	movs	r0, #0
 8003424:	b002      	add	sp, #8
 8003426:	4770      	bx	lr

08003428 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8003428:	b082      	sub	sp, #8
  __IO uint32_t hprt0;
  
  hprt0 = USBx_HPRT0;
 800342a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800342e:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17U);
 8003430:	9801      	ldr	r0, [sp, #4]
}
 8003432:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003436:	b002      	add	sp, #8
 8003438:	4770      	bx	lr

0800343a <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800343a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800343e:	6880      	ldr	r0, [r0, #8]
}
 8003440:	b280      	uxth	r0, r0
 8003442:	4770      	bx	lr

08003444 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003444:	b5f0      	push	{r4, r5, r6, r7, lr}
    
  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8003446:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 800344a:	eb04 1441 	add.w	r4, r4, r1, lsl #5
{
 800344e:	f89d 5018 	ldrb.w	r5, [sp, #24]
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFFU;
 8003452:	f04f 36ff 	mov.w	r6, #4294967295
 8003456:	60a6      	str	r6, [r4, #8]
 8003458:	b257      	sxtb	r7, r2
  
  /* Enable channel interrupts required for this transfer. */
  switch (ep_type) 
 800345a:	2d03      	cmp	r5, #3
 800345c:	d814      	bhi.n	8003488 <USB_HC_Init+0x44>
 800345e:	e8df f005 	tbb	[pc, r5]
 8003462:	5302      	.short	0x5302
 8003464:	4d02      	.short	0x4d02
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003466:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;
 
    if (epnum & 0x80U) 
 800346a:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800346c:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 800346e:	da04      	bge.n	800347a <USB_HC_Init+0x36>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;    
    
    if (epnum & 0x80U) 
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003470:	68e6      	ldr	r6, [r4, #12]
 8003472:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8003476:	60e6      	str	r6, [r4, #12]
 8003478:	e006      	b.n	8003488 <USB_HC_Init+0x44>
      if(USBx != USB_OTG_FS)
 800347a:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800347e:	d003      	beq.n	8003488 <USB_HC_Init+0x44>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003480:	68e6      	ldr	r6, [r4, #12]
 8003482:	f046 0660 	orr.w	r6, r6, #96	; 0x60
 8003486:	60e6      	str	r6, [r4, #12]
    }
    break;
  }
  
  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8003488:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418
 800348c:	2601      	movs	r6, #1
 800348e:	fa06 f101 	lsl.w	r1, r6, r1
 8003492:	ea41 010c 	orr.w	r1, r1, ip
 8003496:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  
  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800349a:	6981      	ldr	r1, [r0, #24]
  
  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 800349c:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 800349e:	02d2      	lsls	r2, r2, #11
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80034a0:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80034a4:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                             (((epnum & 0x7FU)<< 11U) & USB_OTG_HCCHAR_EPNUM)|\
 80034a8:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80034ac:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80034ae:	431a      	orrs	r2, r3
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80034b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80034b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
                             ((((epnum & 0x80U) == 0x80U)<< 15U) & USB_OTG_HCCHAR_EPDIR)|\
 80034b8:	2f00      	cmp	r7, #0
 80034ba:	bfb4      	ite	lt
 80034bc:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 80034c0:	2600      	movge	r6, #0
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80034c2:	f3c1 010a 	ubfx	r1, r1, #0, #11
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80034c6:	2b02      	cmp	r3, #2
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80034c8:	ea4f 4385 	mov.w	r3, r5, lsl #18
 80034cc:	ea42 0201 	orr.w	r2, r2, r1
 80034d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80034d4:	ea43 0302 	orr.w	r3, r3, r2
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 80034d8:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80034dc:	ea43 0306 	orr.w	r3, r3, r6
                             (((speed == USB_OTG_SPEED_LOW)<< 17U) & USB_OTG_HCCHAR_LSDEV)|\
 80034e0:	bf0c      	ite	eq
 80034e2:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 80034e6:	2000      	movne	r0, #0
                             ((ep_type << 18U) & USB_OTG_HCCHAR_EPTYP)|\
 80034e8:	4303      	orrs	r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22U) & USB_OTG_HCCHAR_DAD)  |\
 80034ea:	6023      	str	r3, [r4, #0]
    
  if (ep_type == EP_TYPE_INTR)
 80034ec:	2d03      	cmp	r5, #3
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80034ee:	bf02      	ittt	eq
 80034f0:	6823      	ldreq	r3, [r4, #0]
 80034f2:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80034f6:	6023      	streq	r3, [r4, #0]
  }

  return HAL_OK; 
}
 80034f8:	2000      	movs	r0, #0
 80034fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80034fc:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80U) 
 8003500:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003502:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 8003504:	dac0      	bge.n	8003488 <USB_HC_Init+0x44>
 8003506:	e7b3      	b.n	8003470 <USB_HC_Init+0x2c>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8003508:	f240 2625 	movw	r6, #549	; 0x225
 800350c:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80U) 
 800350e:	2f00      	cmp	r7, #0
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);      
 8003510:	bfbe      	ittt	lt
 8003512:	68e6      	ldrlt	r6, [r4, #12]
 8003514:	f446 76c0 	orrlt.w	r6, r6, #384	; 0x180
 8003518:	60e6      	strlt	r6, [r4, #12]
 800351a:	e7b5      	b.n	8003488 <USB_HC_Init+0x44>

0800351c <USB_HC_StartXfer>:
#pragma O0
#elif defined (__GNUC__) /*!< GNU Compiler */
#pragma GCC optimize ("O0")
#endif /* __CC_ARM */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	; 0x28
 8003520:	af02      	add	r7, sp, #8
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	4613      	mov	r3, r2
 8003528:	71fb      	strb	r3, [r7, #7]
  uint8_t  is_oddframe = 0; 
 800352a:	2300      	movs	r3, #0
 800352c:	777b      	strb	r3, [r7, #29]
  uint16_t len_words = 0;   
 800352e:	2300      	movs	r3, #0
 8003530:	837b      	strh	r3, [r7, #26]
  uint16_t num_packets = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	83fb      	strh	r3, [r7, #30]
  uint16_t max_hc_pkt_count = 256;
 8003536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800353a:	833b      	strh	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
    
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003546:	d02b      	beq.n	80035a0 <USB_HC_StartXfer+0x84>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d127      	bne.n	80035a0 <USB_HC_StartXfer+0x84>
  {
    if((dma == 0) && (hc->do_ping == 1U))
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <USB_HC_StartXfer+0x52>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	795b      	ldrb	r3, [r3, #5]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <USB_HC_StartXfer+0x52>
    {
      USB_DoPing(USBx, hc->ch_num);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	4619      	mov	r1, r3
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fa0f 	bl	8003988 <USB_DoPing>
      return HAL_OK;
 800356a:	2300      	movs	r3, #0
 800356c:	e10d      	b.n	800378a <USB_HC_StartXfer+0x26e>
    }
    else if(dma == 1)
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d115      	bne.n	80035a0 <USB_HC_StartXfer+0x84>
    {
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	785b      	ldrb	r3, [r3, #1]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	4619      	mov	r1, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003598:	60cb      	str	r3, [r1, #12]
      hc->do_ping = 0U;
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2200      	movs	r2, #0
 800359e:	715a      	strb	r2, [r3, #5]
    }
  }
  
  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d019      	beq.n	80035dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (hc->xfer_len + hc->max_packet - 1U) / hc->max_packet;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	8912      	ldrh	r2, [r2, #8]
 80035b0:	4413      	add	r3, r2
 80035b2:	3b01      	subs	r3, #1
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	8912      	ldrh	r2, [r2, #8]
 80035b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80035bc:	83fb      	strh	r3, [r7, #30]
    
    if (num_packets > max_hc_pkt_count)
 80035be:	8bfa      	ldrh	r2, [r7, #30]
 80035c0:	8b3b      	ldrh	r3, [r7, #24]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d90c      	bls.n	80035e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80035c6:	8b3b      	ldrh	r3, [r7, #24]
 80035c8:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = num_packets * hc->max_packet;
 80035ca:	8bfb      	ldrh	r3, [r7, #30]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	8912      	ldrh	r2, [r2, #8]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	611a      	str	r2, [r3, #16]
 80035da:	e001      	b.n	80035e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1;
 80035dc:	2301      	movs	r3, #1
 80035de:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	78db      	ldrb	r3, [r3, #3]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <USB_HC_StartXfer+0xdc>
  {
    hc->xfer_len = num_packets * hc->max_packet;
 80035e8:	8bfb      	ldrh	r3, [r7, #30]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	8912      	ldrh	r2, [r2, #8]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	611a      	str	r2, [r3, #16]
  }
  
  /* Initialize the HCTSIZn register */
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003606:	4619      	mov	r1, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f3c3 0212 	ubfx	r2, r3, #0, #19
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8003610:	8bfb      	ldrh	r3, [r7, #30]
 8003612:	04db      	lsls	r3, r3, #19
 8003614:	4618      	mov	r0, r3
 8003616:	4b5f      	ldr	r3, [pc, #380]	; (8003794 <USB_HC_StartXfer+0x278>)
 8003618:	4003      	ands	r3, r0
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800361a:	431a      	orrs	r2, r3
      (((hc->data_pid) << 29U) & USB_OTG_HCTSIZ_DPID);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	7a9b      	ldrb	r3, [r3, #10]
 8003620:	075b      	lsls	r3, r3, #29
 8003622:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
    ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 8003626:	4313      	orrs	r3, r2
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8003628:	610b      	str	r3, [r1, #16]
  
  if (dma)
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	785b      	ldrb	r3, [r3, #1]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	461a      	mov	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	6153      	str	r3, [r2, #20]
  }
  
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	777b      	strb	r3, [r7, #29]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	785b      	ldrb	r3, [r3, #1]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	4619      	mov	r1, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003682:	600b      	str	r3, [r1, #0]
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	785b      	ldrb	r3, [r3, #1]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003692:	4619      	mov	r1, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	7f7a      	ldrb	r2, [r7, #29]
 80036a6:	0752      	lsls	r2, r2, #29
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
  
  /* Set host channel enable */
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036c4:	617b      	str	r3, [r7, #20]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036cc:	617b      	str	r3, [r7, #20]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	6013      	str	r3, [r2, #0]
  
  if (dma == 0) /* Slave mode */
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d14f      	bne.n	8003788 <USB_HC_StartXfer+0x26c>
  {  
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	78db      	ldrb	r3, [r3, #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d14b      	bne.n	8003788 <USB_HC_StartXfer+0x26c>
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d047      	beq.n	8003788 <USB_HC_StartXfer+0x26c>
    {
      switch(hc->ep_type) 
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	79db      	ldrb	r3, [r3, #7]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d831      	bhi.n	8003764 <USB_HC_StartXfer+0x248>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <USB_HC_StartXfer+0x1ec>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	08003719 	.word	0x08003719
 800370c:	0800373d 	.word	0x0800373d
 8003710:	08003719 	.word	0x08003719
 8003714:	0800373d 	.word	0x0800373d
      {
        /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:
        
        len_words = (hc->xfer_len + 3) / 4;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	3303      	adds	r3, #3
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	837b      	strh	r3, [r7, #26]
        
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 8003722:	8b7a      	ldrh	r2, [r7, #26]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	b29b      	uxth	r3, r3
 800372a:	429a      	cmp	r2, r3
 800372c:	d91c      	bls.n	8003768 <USB_HC_StartXfer+0x24c>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	619a      	str	r2, [r3, #24]
        }
        break;
 800373a:	e015      	b.n	8003768 <USB_HC_StartXfer+0x24c>
        /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (hc->xfer_len + 3) / 4;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	3303      	adds	r3, #3
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	837b      	strh	r3, [r7, #26]
        /* check if there is enough space in FIFO space */
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8003746:	8b7a      	ldrh	r2, [r7, #26]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	b29b      	uxth	r3, r3
 8003752:	429a      	cmp	r2, r3
 8003754:	d90a      	bls.n	800376c <USB_HC_StartXfer+0x250>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;          
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	619a      	str	r2, [r3, #24]
        }
        break;
 8003762:	e003      	b.n	800376c <USB_HC_StartXfer+0x250>
        
      default:
        break;
 8003764:	bf00      	nop
 8003766:	e002      	b.n	800376e <USB_HC_StartXfer+0x252>
        break;
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <USB_HC_StartXfer+0x252>
        break;
 800376c:	bf00      	nop
      }
      
      /* Write packet into the Tx FIFO. */
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	785a      	ldrb	r2, [r3, #1]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	b298      	uxth	r0, r3
 800377c:	2300      	movs	r3, #0
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4603      	mov	r3, r0
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff fd48 	bl	8003218 <USB_WritePacket>
    }
  }
  
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	1ff80000 	.word	0x1ff80000

08003798 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	b29b      	uxth	r3, r3
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
  
  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0c9b      	lsrs	r3, r3, #18
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <USB_HC_Halt+0x40>
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	015a      	lsls	r2, r3, #5
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ea:	681b      	ldr	r3, [r3, #0]
  USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 80037ec:	0c9b      	lsrs	r3, r3, #18
 80037ee:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) || (((((USBx_HC(hc_num)->HCCHAR) & 
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d160      	bne.n	80038b8 <USB_HC_Halt+0x102>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	4619      	mov	r1, r3
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003816:	600b      	str	r3, [r1, #0]
    
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d135      	bne.n	8003890 <USB_HC_Halt+0xda>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003830:	4619      	mov	r1, r3
 8003832:	78fb      	ldrb	r3, [r7, #3]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003844:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	4619      	mov	r1, r3
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003866:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003874:	d81e      	bhi.n	80038b4 <USB_HC_Halt+0xfe>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 8003876:	78fb      	ldrb	r3, [r7, #3]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800388c:	d0ec      	beq.n	8003868 <USB_HC_Halt+0xb2>
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 800388e:	e074      	b.n	800397a <USB_HC_Halt+0x1c4>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389c:	4619      	mov	r1, r3
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038b0:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80038b2:	e062      	b.n	800397a <USB_HC_Halt+0x1c4>
          break;
 80038b4:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFF0000U) == 0U)
 80038b6:	e060      	b.n	800397a <USB_HC_Halt+0x1c4>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	4619      	mov	r1, r3
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038d8:	600b      	str	r3, [r1, #0]
    
    if ((USBx_HOST->HPTXSTS & 0xFFFFU) == 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d135      	bne.n	8003954 <USB_HC_Halt+0x19e>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80038e8:	78fb      	ldrb	r3, [r7, #3]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f4:	4619      	mov	r1, r3
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003908:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;  
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003916:	4619      	mov	r1, r3
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800392a:	600b      	str	r3, [r1, #0]
      do 
      {
        if (++count > 1000U) 
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3301      	adds	r3, #1
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003938:	d81e      	bhi.n	8003978 <USB_HC_Halt+0x1c2>
        {
          break;
        }
      } 
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);     
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800394c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003950:	d0ec      	beq.n	800392c <USB_HC_Halt+0x176>
 8003952:	e012      	b.n	800397a <USB_HC_Halt+0x1c4>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA; 
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	4619      	mov	r1, r3
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4413      	add	r3, r2
 800396a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003974:	600b      	str	r3, [r1, #0]
 8003976:	e000      	b.n	800397a <USB_HC_Halt+0x1c4>
          break;
 8003978:	bf00      	nop
    }
  }
  
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  uint8_t  num_packets = 1U;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19U) & USB_OTG_HCTSIZ_PKTCNT) |\
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	461a      	mov	r2, r3
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	04db      	lsls	r3, r3, #19
 80039ae:	4619      	mov	r1, r3
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <USB_DoPing+0x74>)
 80039b2:	400b      	ands	r3, r1
 80039b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_HCTSIZ_DOPING;
  
  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6013      	str	r3, [r2, #0]
  
  return HAL_OK;  
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	1ff80000 	.word	0x1ff80000

08003a00 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	613b      	str	r3, [r7, #16]
  uint32_t value;
  
  USB_DisableGlobalInt(USBx);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff fbc3 	bl	8003198 <USB_DisableGlobalInt>
  
    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10U);
 8003a12:	2110      	movs	r1, #16
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fbdd 	bl	80031d4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff fbec 	bl	80031f8 <USB_FlushRxFifo>
  
  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	75fb      	strb	r3, [r7, #23]
 8003a24:	e01f      	b.n	8003a66 <USB_StopHost+0x66>
  {   

    value = USBx_HC(i)->HCCHAR ;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a3c:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;  
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a44:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a4c:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 8003a4e:	7dfb      	ldrb	r3, [r7, #23]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	3301      	adds	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b0f      	cmp	r3, #15
 8003a6a:	d9dc      	bls.n	8003a26 <USB_StopHost+0x26>
  }
  
  /* Halt all channels to put them into a known state. */  
  for (i = 0; i <= 15; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	75fb      	strb	r3, [r7, #23]
 8003a70:	e034      	b.n	8003adc <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 8003a72:	7dfb      	ldrb	r3, [r7, #23]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
    
    value |= USB_OTG_HCCHAR_CHDIS;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a88:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;  
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a90:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a98:	60fb      	str	r3, [r7, #12]
    
    USBx_HC(i)->HCCHAR = value;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6013      	str	r3, [r2, #0]
    do 
    {
      if (++count > 1000U) 
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ab8:	d80c      	bhi.n	8003ad4 <USB_StopHost+0xd4>
      {
        break;
      }
    } 
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ad0:	d0ec      	beq.n	8003aac <USB_StopHost+0xac>
 8003ad2:	e000      	b.n	8003ad6 <USB_StopHost+0xd6>
        break;
 8003ad4:	bf00      	nop
  for (i = 0; i <= 15; i++)
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b0f      	cmp	r3, #15
 8003ae0:	d9c7      	bls.n	8003a72 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */  
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f04f 33ff 	mov.w	r3, #4294967295
 8003aee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff fb47 	bl	800318c <USB_EnableGlobalInt>
  return HAL_OK;  
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;  
}
 8003b08:	2000      	movs	r0, #0
 8003b0a:	4770      	bx	lr

08003b0c <USBH_CDC_InterfaceDeInit>:
{
 8003b0c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003b0e:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003b12:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8003b14:	7821      	ldrb	r1, [r4, #0]
{
 8003b16:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8003b18:	b139      	cbz	r1, 8003b2a <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003b1a:	f000 fded 	bl	80046f8 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8003b1e:	7821      	ldrb	r1, [r4, #0]
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 fe06 	bl	8004732 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0;     /* Reset the Channel as Free */
 8003b26:	2300      	movs	r3, #0
 8003b28:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8003b2a:	7b21      	ldrb	r1, [r4, #12]
 8003b2c:	b141      	cbz	r1, 8003b40 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003b2e:	4628      	mov	r0, r5
 8003b30:	f000 fde2 	bl	80046f8 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8003b34:	7b21      	ldrb	r1, [r4, #12]
 8003b36:	4628      	mov	r0, r5
 8003b38:	f000 fdfb 	bl	8004732 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0;     /* Reset the Channel as Free */
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8003b40:	7b61      	ldrb	r1, [r4, #13]
 8003b42:	b141      	cbz	r1, 8003b56 <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003b44:	4628      	mov	r0, r5
 8003b46:	f000 fdd7 	bl	80046f8 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8003b4a:	7b61      	ldrb	r1, [r4, #13]
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f000 fdf0 	bl	8004732 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0;     /* Reset the Channel as Free */
 8003b52:	2300      	movs	r3, #0
 8003b54:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 8003b56:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8003b5a:	69d8      	ldr	r0, [r3, #28]
 8003b5c:	b128      	cbz	r0, 8003b6a <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 8003b5e:	f001 fe13 	bl	8005788 <free>
    phost->pActiveClass->pData = 0;
 8003b62:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8003b66:	2200      	movs	r2, #0
 8003b68:	61da      	str	r2, [r3, #28]
}
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	bd38      	pop	{r3, r4, r5, pc}

08003b6e <USBH_CDC_InterfaceInit>:
{	
 8003b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, 
 8003b70:	2202      	movs	r2, #2
{	
 8003b72:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, 
 8003b74:	2301      	movs	r3, #1
 8003b76:	4611      	mov	r1, r2
{	
 8003b78:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, 
 8003b7a:	f000 f9b4 	bl	8003ee6 <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8003b7e:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8003b80:	4606      	mov	r6, r0
  if(interface == 0xFF) /* No Valid Interface */
 8003b82:	d102      	bne.n	8003b8a <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003b84:	2002      	movs	r0, #2
}
 8003b86:	b005      	add	sp, #20
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f000 f9a1 	bl	8003ed4 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003b92:	2050      	movs	r0, #80	; 0x50
 8003b94:	f8d5 7374 	ldr.w	r7, [r5, #884]	; 0x374
 8003b98:	f001 fdee 	bl	8005778 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003b9c:	231a      	movs	r3, #26
 8003b9e:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003ba2:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003ba4:	f896 3348 	ldrb.w	r3, [r6, #840]	; 0x348
 8003ba8:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003baa:	bf42      	ittt	mi
 8003bac:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003bae:	f8b6 334a 	ldrhmi.w	r3, [r6, #842]	; 0x34a
 8003bb2:	8143      	strhmi	r3, [r0, #10]
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003bb4:	4604      	mov	r4, r0
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003bb6:	7841      	ldrb	r1, [r0, #1]
 8003bb8:	4628      	mov	r0, r5
 8003bba:	f000 fda2 	bl	8004702 <USBH_AllocPipe>
 8003bbe:	4601      	mov	r1, r0
 8003bc0:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 8003bc2:	8960      	ldrh	r0, [r4, #10]
 8003bc4:	9002      	str	r0, [sp, #8]
 8003bc6:	2003      	movs	r0, #3
 8003bc8:	9001      	str	r0, [sp, #4]
 8003bca:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003bce:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003bd2:	7862      	ldrb	r2, [r4, #1]
 8003bd4:	9000      	str	r0, [sp, #0]
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	f000 fd7f 	bl	80046da <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0);    
 8003bdc:	2200      	movs	r2, #0
 8003bde:	7821      	ldrb	r1, [r4, #0]
 8003be0:	4628      	mov	r0, r5
 8003be2:	f001 fd60 	bl	80056a6 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost, 
 8003be6:	2300      	movs	r3, #0
 8003be8:	461a      	mov	r2, r3
 8003bea:	210a      	movs	r1, #10
 8003bec:	4628      	mov	r0, r5
 8003bee:	f000 f97a 	bl	8003ee6 <USBH_FindInterface>
    if(interface == 0xFF) /* No Valid Interface */
 8003bf2:	28ff      	cmp	r0, #255	; 0xff
 8003bf4:	d0c6      	beq.n	8003b84 <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003bf6:	231a      	movs	r3, #26
 8003bf8:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003bfc:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003c00:	f891 2348 	ldrb.w	r2, [r1, #840]	; 0x348
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003c04:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
 8003c08:	f8b1 134a 	ldrh.w	r1, [r1, #842]	; 0x34a
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8003c0c:	f012 0f80 	tst.w	r2, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003c10:	bf0d      	iteet	eq
 8003c12:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003c14:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003c16:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003c18:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8003c1a:	f013 0f80 	tst.w	r3, #128	; 0x80
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003c1e:	bf08      	it	eq
 8003c20:	73a3      	strbeq	r3, [r4, #14]
 8003c22:	f8b0 2352 	ldrh.w	r2, [r0, #850]	; 0x352
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c26:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003c28:	bf18      	it	ne
 8003c2a:	73e3      	strbne	r3, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c2c:	4628      	mov	r0, r5
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003c2e:	bf14      	ite	ne
 8003c30:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003c32:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c34:	f000 fd65 	bl	8004702 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8003c38:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003c3a:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 fd60 	bl	8004702 <USBH_AllocPipe>
 8003c42:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8003c44:	8b20      	ldrh	r0, [r4, #24]
 8003c46:	9002      	str	r0, [sp, #8]
 8003c48:	2602      	movs	r6, #2
 8003c4a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003c4e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003c52:	7ba2      	ldrb	r2, [r4, #14]
 8003c54:	7b61      	ldrb	r1, [r4, #13]
 8003c56:	9601      	str	r6, [sp, #4]
 8003c58:	9000      	str	r0, [sp, #0]
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 fd3d 	bl	80046da <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003c60:	8b60      	ldrh	r0, [r4, #26]
 8003c62:	9002      	str	r0, [sp, #8]
 8003c64:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003c68:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003c6c:	7be2      	ldrb	r2, [r4, #15]
 8003c6e:	7b21      	ldrb	r1, [r4, #12]
 8003c70:	9601      	str	r6, [sp, #4]
 8003c72:	9000      	str	r0, [sp, #0]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003c74:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8003c76:	4628      	mov	r0, r5
 8003c78:	f000 fd2f 	bl	80046da <USBH_OpenPipe>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8003c7c:	4632      	mov	r2, r6
 8003c7e:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003c80:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8003c84:	4628      	mov	r0, r5
 8003c86:	f001 fd0e 	bl	80056a6 <USBH_LL_SetToggle>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.InPipe,0);
 8003c8a:	4632      	mov	r2, r6
 8003c8c:	7b21      	ldrb	r1, [r4, #12]
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f001 fd09 	bl	80056a6 <USBH_LL_SetToggle>
      status = USBH_OK; 
 8003c94:	4630      	mov	r0, r6
 8003c96:	e776      	b.n	8003b86 <USBH_CDC_InterfaceInit+0x18>

08003c98 <USBH_CDC_ClassRequest>:
{   
 8003c98:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 8003c9a:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8003c9e:	69d9      	ldr	r1, [r3, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003ca0:	23a1      	movs	r3, #161	; 0xa1
 8003ca2:	7403      	strb	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003ca4:	2321      	movs	r3, #33	; 0x21
 8003ca6:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003ca8:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8003caa:	2300      	movs	r3, #0
 8003cac:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8003cae:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003cb0:	82c2      	strh	r2, [r0, #22]
 
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003cb2:	3140      	adds	r1, #64	; 0x40
{   
 8003cb4:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003cb6:	f000 fa97 	bl	80041e8 <USBH_CtlReq>
  if(status == USBH_OK)
 8003cba:	4605      	mov	r5, r0
 8003cbc:	b920      	cbnz	r0, 8003cc8 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8003cbe:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	4798      	blx	r3
}
 8003cc8:	4628      	mov	r0, r5
 8003cca:	bd38      	pop	{r3, r4, r5, pc}

08003ccc <USBH_CDC_TransmitCallback>:
 8003ccc:	4770      	bx	lr

08003cce <USBH_CDC_ReceiveCallback>:
 8003cce:	4770      	bx	lr

08003cd0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8003cd0:	4770      	bx	lr

08003cd2 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8003cd2:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 8003cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8003cd8:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8003cda:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8003cde:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d83d      	bhi.n	8003d60 <USBH_CDC_Process+0x8e>
 8003ce4:	e8df f003 	tbb	[pc, r3]
 8003ce8:	42170603 	.word	0x42170603
 8003cec:	a8          	.byte	0xa8
 8003ced:	00          	.byte	0x00
    status = USBH_OK;
 8003cee:	2000      	movs	r0, #0
}
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8003cf4:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8003cf6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8003cf8:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003cfe:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8003d04:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003d06:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecodin->Array , LINE_CODING_STRUCTURE_SIZE );  
 8003d08:	f000 fa6e 	bl	80041e8 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003d0c:	bb50      	cbnz	r0, 8003d64 <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE; 
 8003d0e:	2302      	movs	r3, #2
      CDC_Handle->state = CDC_ERROR_STATE; 
 8003d10:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8003d14:	e024      	b.n	8003d60 <USBH_CDC_Process+0x8e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003d16:	23a1      	movs	r3, #161	; 0xa1
 8003d18:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8003d1a:	2321      	movs	r3, #33	; 0x21
 8003d1c:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003d1e:	2207      	movs	r2, #7
  phost->Control.setup.b.wValue.w = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 8003d24:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8003d26:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003d28:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003d2c:	f000 fa5c 	bl	80041e8 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003d30:	b9c0      	cbnz	r0, 8003d64 <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8003d32:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003d34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
      CDC_Handle->state = CDC_IDLE_STATE; 
 8003d36:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 8003d3a:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8003d44:	4291      	cmp	r1, r2
 8003d46:	d10b      	bne.n	8003d60 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003d48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d4c:	795a      	ldrb	r2, [r3, #5]
 8003d4e:	4291      	cmp	r1, r2
 8003d50:	d106      	bne.n	8003d60 <USBH_CDC_Process+0x8e>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003d52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d102      	bne.n	8003d60 <USBH_CDC_Process+0x8e>
        USBH_CDC_LineCodingChanged(phost);
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f7ff ffb8 	bl	8003cd0 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003d60:	2001      	movs	r0, #1
 8003d62:	e7c5      	b.n	8003cf0 <USBH_CDC_Process+0x1e>
    else if(req_status != USBH_BUSY)
 8003d64:	2801      	cmp	r0, #1
 8003d66:	d0fb      	beq.n	8003d60 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_ERROR_STATE; 
 8003d68:	2304      	movs	r3, #4
 8003d6a:	e7d1      	b.n	8003d10 <USBH_CDC_Process+0x3e>
  switch(CDC_Handle->data_tx_state)
 8003d6c:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8003d70:	2901      	cmp	r1, #1
 8003d72:	d023      	beq.n	8003dbc <USBH_CDC_Process+0xea>
 8003d74:	2902      	cmp	r1, #2
 8003d76:	d030      	beq.n	8003dda <USBH_CDC_Process+0x108>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003d78:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8003d7c:	69de      	ldr	r6, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8003d7e:	f896 304e 	ldrb.w	r3, [r6, #78]	; 0x4e
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d047      	beq.n	8003e16 <USBH_CDC_Process+0x144>
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d1ea      	bne.n	8003d60 <USBH_CDC_Process+0x8e>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe); 
 8003d8a:	7b31      	ldrb	r1, [r6, #12]
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	f001 fc79 	bl	8005684 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8003d92:	2801      	cmp	r0, #1
 8003d94:	d1e4      	bne.n	8003d60 <USBH_CDC_Process+0x8e>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003d96:	7b31      	ldrb	r1, [r6, #12]
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f001 fc2f 	bl	80055fc <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8003d9e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003da0:	b282      	uxth	r2, r0
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8003da2:	4293      	cmp	r3, r2
 8003da4:	4610      	mov	r0, r2
 8003da6:	d040      	beq.n	8003e2a <USBH_CDC_Process+0x158>
 8003da8:	8b71      	ldrh	r1, [r6, #26]
 8003daa:	4291      	cmp	r1, r2
 8003dac:	d23d      	bcs.n	8003e2a <USBH_CDC_Process+0x158>
        CDC_Handle->RxDataLength -= length ;
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	62b3      	str	r3, [r6, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8003db2:	6a33      	ldr	r3, [r6, #32]
 8003db4:	4418      	add	r0, r3
 8003db6:	6230      	str	r0, [r6, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8003db8:	2303      	movs	r3, #3
 8003dba:	e033      	b.n	8003e24 <USBH_CDC_Process+0x152>
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003dbc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003dbe:	8b22      	ldrh	r2, [r4, #24]
 8003dc0:	7b63      	ldrb	r3, [r4, #13]
      USBH_BulkSendData (phost,
 8003dc2:	9100      	str	r1, [sp, #0]
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003dc4:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 8003dc6:	bf98      	it	ls
 8003dc8:	b282      	uxthls	r2, r0
 8003dca:	69e1      	ldr	r1, [r4, #28]
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f000 fc5d 	bl	800468c <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8003dd2:	2302      	movs	r3, #2
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8003dd4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8003dd8:	e7ce      	b.n	8003d78 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe); 
 8003dda:	7b61      	ldrb	r1, [r4, #13]
 8003ddc:	f001 fc52 	bl	8005684 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8003de0:	2801      	cmp	r0, #1
 8003de2:	d115      	bne.n	8003e10 <USBH_CDC_Process+0x13e>
      if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003de4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003de6:	8b22      	ldrh	r2, [r4, #24]
 8003de8:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 8003dea:	bf83      	ittte	hi
 8003dec:	1a9b      	subhi	r3, r3, r2
 8003dee:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003df0:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0;
 8003df2:	2300      	movls	r3, #0
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003df4:	bf8a      	itet	hi
 8003df6:	189b      	addhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0;
 8003df8:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003dfa:	61e3      	strhi	r3, [r4, #28]
      if( CDC_Handle->TxDataLength > 0)
 8003dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dfe:	b10b      	cbz	r3, 8003e04 <USBH_CDC_Process+0x132>
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 8003e00:	2301      	movs	r3, #1
 8003e02:	e7e7      	b.n	8003dd4 <USBH_CDC_Process+0x102>
        CDC_Handle->data_tx_state = CDC_IDLE;    
 8003e04:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f7ff ff5f 	bl	8003ccc <USBH_CDC_TransmitCallback>
 8003e0e:	e7b3      	b.n	8003d78 <USBH_CDC_Process+0xa6>
    else if( URB_Status == USBH_URB_NOTREADY )
 8003e10:	2802      	cmp	r0, #2
 8003e12:	d1b1      	bne.n	8003d78 <USBH_CDC_Process+0xa6>
 8003e14:	e7f4      	b.n	8003e00 <USBH_CDC_Process+0x12e>
    USBH_BulkReceiveData (phost,
 8003e16:	7b33      	ldrb	r3, [r6, #12]
 8003e18:	8b72      	ldrh	r2, [r6, #26]
 8003e1a:	6a31      	ldr	r1, [r6, #32]
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f000 fc4c 	bl	80046ba <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003e22:	2304      	movs	r3, #4
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8003e24:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8003e28:	e79a      	b.n	8003d60 <USBH_CDC_Process+0x8e>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8003e30:	4628      	mov	r0, r5
 8003e32:	f7ff ff4c 	bl	8003cce <USBH_CDC_ReceiveCallback>
 8003e36:	e793      	b.n	8003d60 <USBH_CDC_Process+0x8e>
    req_status = USBH_ClrFeature(phost, 0x00); 
 8003e38:	2100      	movs	r1, #0
 8003e3a:	f000 fbe1 	bl	8004600 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d18e      	bne.n	8003d60 <USBH_CDC_Process+0x8e>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003e42:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8003e46:	e78b      	b.n	8003d60 <USBH_CDC_Process+0x8e>

08003e48 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003e48:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8003e4c:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 8003e50:	2100      	movs	r1, #0
 8003e52:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d1fb      	bne.n	8003e52 <DeInitStateMachine+0xa>
 8003e5a:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003e5e:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8003e68:	4291      	cmp	r1, r2
 8003e6a:	d1fb      	bne.n	8003e64 <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8003e6c:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8003e6e:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 8003e70:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 8003e72:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 8003e74:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8003e76:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 8003e7a:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8003e7c:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8003e7e:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003e80:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8003e84:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 8003e88:	2000      	movs	r0, #0
 8003e8a:	4770      	bx	lr

08003e8c <USBH_Init>:
{
 8003e8c:	b538      	push	{r3, r4, r5, lr}
 8003e8e:	460d      	mov	r5, r1
  if(phost == NULL)
 8003e90:	4604      	mov	r4, r0
 8003e92:	b180      	cbz	r0, 8003eb6 <USBH_Init+0x2a>
  phost->pActiveClass = NULL;
 8003e94:	2300      	movs	r3, #0
  phost->id = id;
 8003e96:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8003e9a:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 8003e9e:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 8003ea2:	f7ff ffd1 	bl	8003e48 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003ea6:	b10d      	cbz	r5, 8003eac <USBH_Init+0x20>
    phost->pUser = pUsrFunc;
 8003ea8:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
  USBH_LL_Init(phost);
 8003eac:	4620      	mov	r0, r4
 8003eae:	f001 fb41 	bl	8005534 <USBH_LL_Init>
  return USBH_OK;
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL; 
 8003eb6:	2002      	movs	r0, #2
}
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}

08003eba <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 8003eba:	b149      	cbz	r1, 8003ed0 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003ebc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003ec0:	b933      	cbnz	r3, 8003ed0 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
 8003ec8:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
      status = USBH_OK;
 8003ecc:	4618      	mov	r0, r3
 8003ece:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 8003ed0:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003ed2:	4770      	bx	lr

08003ed4 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003ed4:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 8003ed8:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8003eda:	bf86      	itte	hi
 8003edc:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 8003ee0:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 8003ee2:	2002      	movls	r0, #2
  }
  return status;  
}
 8003ee4:	4770      	bx	lr

08003ee6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003ee6:	b530      	push	{r4, r5, lr}
 8003ee8:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 8003eea:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 8003eee:	428d      	cmp	r5, r1
 8003ef0:	d001      	beq.n	8003ef6 <USBH_FindInterface+0x10>
 8003ef2:	29ff      	cmp	r1, #255	; 0xff
 8003ef4:	d10d      	bne.n	8003f12 <USBH_FindInterface+0x2c>
 8003ef6:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 8003efa:	4295      	cmp	r5, r2
 8003efc:	d001      	beq.n	8003f02 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 8003efe:	2aff      	cmp	r2, #255	; 0xff
 8003f00:	d107      	bne.n	8003f12 <USBH_FindInterface+0x2c>
 8003f02:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 8003f06:	429d      	cmp	r5, r3
 8003f08:	d101      	bne.n	8003f0e <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8003f0a:	b2e0      	uxtb	r0, r4
 8003f0c:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8003f0e:	2bff      	cmp	r3, #255	; 0xff
 8003f10:	d0fb      	beq.n	8003f0a <USBH_FindInterface+0x24>
 8003f12:	3401      	adds	r4, #1
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003f14:	2c02      	cmp	r4, #2
 8003f16:	f100 001a 	add.w	r0, r0, #26
 8003f1a:	d1e6      	bne.n	8003eea <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 8003f1c:	20ff      	movs	r0, #255	; 0xff
}
 8003f1e:	bd30      	pop	{r4, r5, pc}

08003f20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003f20:	b510      	push	{r4, lr}
 8003f22:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003f24:	f001 fb32 	bl	800558c <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f001 fbae 	bl	800568c <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8003f30:	2000      	movs	r0, #0
 8003f32:	bd10      	pop	{r4, pc}

08003f34 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003f34:	b530      	push	{r4, r5, lr}
 8003f36:	b087      	sub	sp, #28
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8003f3e:	7803      	ldrb	r3, [r0, #0]
{
 8003f40:	4604      	mov	r4, r0
  switch (phost->gState)
 8003f42:	2b0a      	cmp	r3, #10
 8003f44:	d817      	bhi.n	8003f76 <USBH_Process+0x42>
 8003f46:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f4a:	000b      	.short	0x000b
 8003f4c:	00190016 	.word	0x00190016
 8003f50:	00160101 	.word	0x00160101
 8003f54:	00e90049 	.word	0x00e90049
 8003f58:	00c100b8 	.word	0x00c100b8
 8003f5c:	00f900ca 	.word	0x00f900ca
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8003f60:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8003f64:	b13b      	cbz	r3, 8003f76 <USBH_Process+0x42>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8003f66:	2301      	movs	r3, #1
 8003f68:	7003      	strb	r3, [r0, #0]
      USBH_Delay(200); 
 8003f6a:	20c8      	movs	r0, #200	; 0xc8
 8003f6c:	f001 fbaa 	bl	80056c4 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003f70:	4620      	mov	r0, r4
 8003f72:	f001 fb35 	bl	80055e0 <USBH_LL_ResetPort>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8003f76:	2000      	movs	r0, #0
 8003f78:	b007      	add	sp, #28
 8003f7a:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 8003f7c:	2064      	movs	r0, #100	; 0x64
 8003f7e:	f001 fba1 	bl	80056c4 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003f82:	4620      	mov	r0, r4
 8003f84:	f001 fb1e 	bl	80055c4 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8003f88:	2305      	movs	r3, #5
 8003f8a:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003f8c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8003f90:	2100      	movs	r1, #0
 8003f92:	4620      	mov	r0, r4
 8003f94:	f000 fbb5 	bl	8004702 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8003f98:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8003f9a:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f000 fbb0 	bl	8004702 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8003fa2:	79a2      	ldrb	r2, [r4, #6]
 8003fa4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8003fa8:	7120      	strb	r0, [r4, #4]
 8003faa:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8003fac:	9202      	str	r2, [sp, #8]
 8003fae:	2500      	movs	r5, #0
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8003fb0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003fb4:	9200      	str	r2, [sp, #0]
 8003fb6:	9501      	str	r5, [sp, #4]
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 fb8d 	bl	80046da <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8003fc0:	79a2      	ldrb	r2, [r4, #6]
 8003fc2:	9202      	str	r2, [sp, #8]
 8003fc4:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8003fc8:	9200      	str	r2, [sp, #0]
 8003fca:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003fce:	7961      	ldrb	r1, [r4, #5]
 8003fd0:	9501      	str	r5, [sp, #4]
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f000 fb80 	bl	80046da <USBH_OpenPipe>
 8003fda:	e7cc      	b.n	8003f76 <USBH_Process+0x42>
  switch (phost->EnumState)
 8003fdc:	7843      	ldrb	r3, [r0, #1]
 8003fde:	2b07      	cmp	r3, #7
 8003fe0:	d8c9      	bhi.n	8003f76 <USBH_Process+0x42>
 8003fe2:	e8df f003 	tbb	[pc, r3]
 8003fe6:	1404      	.short	0x1404
 8003fe8:	3c342d1c 	.word	0x3c342d1c
 8003fec:	5548      	.short	0x5548
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8003fee:	2108      	movs	r1, #8
 8003ff0:	f000 f9d3 	bl	800439a <USBH_Get_DevDesc>
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d1bd      	bne.n	8003f76 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003ffa:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003ffc:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004000:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8004002:	7921      	ldrb	r1, [r4, #4]
 8004004:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004008:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800400a:	9202      	str	r2, [sp, #8]
 800400c:	e7d0      	b.n	8003fb0 <USBH_Process+0x7c>
    }
    break;
    
  case ENUM_GET_FULL_DEV_DESC:  
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800400e:	2112      	movs	r1, #18
 8004010:	f000 f9c3 	bl	800439a <USBH_Get_DevDesc>
 8004014:	2800      	cmp	r0, #0
 8004016:	d1ae      	bne.n	8003f76 <USBH_Process+0x42>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );  
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );  
      
      phost->EnumState = ENUM_SET_ADDR;
 8004018:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 800401a:	7063      	strb	r3, [r4, #1]
 800401c:	e7ab      	b.n	8003f76 <USBH_Process+0x42>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800401e:	2101      	movs	r1, #1
 8004020:	f000 fad2 	bl	80045c8 <USBH_SetAddress>
 8004024:	4605      	mov	r5, r0
 8004026:	2800      	cmp	r0, #0
 8004028:	d1a5      	bne.n	8003f76 <USBH_Process+0x42>
      USBH_Delay(2);
 800402a:	2002      	movs	r0, #2
 800402c:	f001 fb4a 	bl	80056c4 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004030:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004032:	2301      	movs	r3, #1
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004034:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004036:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 800403a:	7921      	ldrb	r1, [r4, #4]
 800403c:	79a2      	ldrb	r2, [r4, #6]
 800403e:	e7e4      	b.n	800400a <USBH_Process+0xd6>
    if ( USBH_Get_CfgDesc(phost, 
 8004040:	2109      	movs	r1, #9
 8004042:	f000 fa03 	bl	800444c <USBH_Get_CfgDesc>
 8004046:	2800      	cmp	r0, #0
 8004048:	d195      	bne.n	8003f76 <USBH_Process+0x42>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 800404a:	2304      	movs	r3, #4
 800404c:	e7e5      	b.n	800401a <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 800404e:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 8004052:	f000 f9fb 	bl	800444c <USBH_Get_CfgDesc>
 8004056:	2800      	cmp	r0, #0
 8004058:	d18d      	bne.n	8003f76 <USBH_Process+0x42>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 800405a:	2305      	movs	r3, #5
 800405c:	e7dd      	b.n	800401a <USBH_Process+0xe6>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 800405e:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 8004062:	b131      	cbz	r1, 8004072 <USBH_Process+0x13e>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8004064:	23ff      	movs	r3, #255	; 0xff
 8004066:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800406a:	f000 fa86 	bl	800457a <USBH_Get_StringDesc>
 800406e:	2800      	cmp	r0, #0
 8004070:	d181      	bne.n	8003f76 <USBH_Process+0x42>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004072:	2306      	movs	r3, #6
 8004074:	e7d1      	b.n	800401a <USBH_Process+0xe6>
#endif       
    }
    break;
    
  case ENUM_GET_PRODUCT_STRING_DESC:   
    if (phost->device.DevDesc.iProduct != 0)
 8004076:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 800407a:	b139      	cbz	r1, 800408c <USBH_Process+0x158>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800407c:	23ff      	movs	r3, #255	; 0xff
 800407e:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8004082:	f000 fa7a 	bl	800457a <USBH_Get_StringDesc>
 8004086:	2800      	cmp	r0, #0
 8004088:	f47f af75 	bne.w	8003f76 <USBH_Process+0x42>
                               phost->device.Data, 
                               0xff) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 800408c:	2307      	movs	r3, #7
 800408e:	e7c4      	b.n	800401a <USBH_Process+0xe6>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8004090:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 8004094:	b139      	cbz	r1, 80040a6 <USBH_Process+0x172>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8004096:	23ff      	movs	r3, #255	; 0xff
 8004098:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800409c:	f000 fa6d 	bl	800457a <USBH_Get_StringDesc>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f47f af68 	bne.w	8003f76 <USBH_Process+0x42>
      phost->device.current_interface = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 80040ac:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d009      	beq.n	80040c8 <USBH_Process+0x194>
        phost->gState  = HOST_INPUT; 
 80040b4:	2307      	movs	r3, #7
      phost->gState  = HOST_ABORT_STATE;
 80040b6:	7023      	strb	r3, [r4, #0]
 80040b8:	e75d      	b.n	8003f76 <USBH_Process+0x42>
      if(phost->pUser != NULL)
 80040ba:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f43f af59 	beq.w	8003f76 <USBH_Process+0x42>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80040c4:	2101      	movs	r1, #1
 80040c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80040c8:	2308      	movs	r3, #8
 80040ca:	e7f4      	b.n	80040b6 <USBH_Process+0x182>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80040cc:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 80040d0:	f000 fa88 	bl	80045e4 <USBH_SetCfg>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	f47f af4e 	bne.w	8003f76 <USBH_Process+0x42>
      phost->gState  = HOST_CHECK_CLASS;
 80040da:	2309      	movs	r3, #9
 80040dc:	e7eb      	b.n	80040b6 <USBH_Process+0x182>
    if(phost->ClassNumber == 0)
 80040de:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f43f af47 	beq.w	8003f76 <USBH_Process+0x42>
      phost->pActiveClass = NULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80040ee:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
 80040f2:	f890 2341 	ldrb.w	r2, [r0, #833]	; 0x341
 80040f6:	7919      	ldrb	r1, [r3, #4]
 80040f8:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 80040fa:	bf08      	it	eq
 80040fc:	f8c0 3374 	streq.w	r3, [r0, #884]	; 0x374
      if(phost->pActiveClass != NULL)
 8004100:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8004104:	b1c3      	cbz	r3, 8004138 <USBH_Process+0x204>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4798      	blx	r3
 800410a:	b9a8      	cbnz	r0, 8004138 <USBH_Process+0x204>
          phost->gState  = HOST_CLASS_REQUEST; 
 800410c:	2306      	movs	r3, #6
 800410e:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8004110:	2103      	movs	r1, #3
 8004112:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8004116:	4620      	mov	r0, r4
 8004118:	4798      	blx	r3
 800411a:	e72c      	b.n	8003f76 <USBH_Process+0x42>
    if(phost->pActiveClass != NULL)
 800411c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8004120:	b153      	cbz	r3, 8004138 <USBH_Process+0x204>
      status = phost->pActiveClass->Requests(phost);
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	4798      	blx	r3
 8004126:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800412a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800412e:	2b00      	cmp	r3, #0
 8004130:	f47f af21 	bne.w	8003f76 <USBH_Process+0x42>
        phost->gState  = HOST_CLASS;        
 8004134:	230a      	movs	r3, #10
 8004136:	e7be      	b.n	80040b6 <USBH_Process+0x182>
      phost->gState  = HOST_ABORT_STATE;
 8004138:	230c      	movs	r3, #12
 800413a:	e7bc      	b.n	80040b6 <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 800413c:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8004140:	2b00      	cmp	r3, #0
 8004142:	f43f af18 	beq.w	8003f76 <USBH_Process+0x42>
      phost->pActiveClass->BgndProcess(phost);
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	4798      	blx	r3
 800414a:	e714      	b.n	8003f76 <USBH_Process+0x42>
    DeInitStateMachine(phost);  
 800414c:	f7ff fe7c 	bl	8003e48 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8004150:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8004154:	2b00      	cmp	r3, #0
 8004156:	f43f af0e 	beq.w	8003f76 <USBH_Process+0x42>
      phost->pActiveClass->DeInit(phost); 
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4620      	mov	r0, r4
 800415e:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8004160:	2300      	movs	r3, #0
 8004162:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 return USBH_OK;  
 8004166:	e706      	b.n	8003f76 <USBH_Process+0x42>

08004168 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8004168:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 800416c:	4770      	bx	lr

0800416e <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 800416e:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 8004172:	3201      	adds	r2, #1
 8004174:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8004178:	7802      	ldrb	r2, [r0, #0]
 800417a:	2a0a      	cmp	r2, #10
 800417c:	d104      	bne.n	8004188 <USBH_LL_IncTimer+0x1a>
 800417e:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8004182:	b10b      	cbz	r3, 8004188 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	4718      	bx	r3
 8004188:	4770      	bx	lr

0800418a <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 800418a:	7802      	ldrb	r2, [r0, #0]
{
 800418c:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 800418e:	b94a      	cbnz	r2, 80041a4 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1;
    
    if(phost->pUser != NULL)
 8004190:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
    phost->device.is_connected = 1;
 8004194:	2201      	movs	r2, #1
 8004196:	f880 231e 	strb.w	r2, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 800419a:	b10b      	cbz	r3, 80041a0 <USBH_LL_Connect+0x16>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 800419c:	2104      	movs	r1, #4
 800419e:	4798      	blx	r3
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 80041a0:	2000      	movs	r0, #0
 80041a2:	bd08      	pop	{r3, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 80041a4:	7802      	ldrb	r2, [r0, #0]
 80041a6:	2a01      	cmp	r2, #1
    phost->gState = HOST_DEV_ATTACHED ;
 80041a8:	bf04      	itt	eq
 80041aa:	2202      	moveq	r2, #2
 80041ac:	7002      	strbeq	r2, [r0, #0]
 80041ae:	e7f7      	b.n	80041a0 <USBH_LL_Connect+0x16>

080041b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80041b0:	b510      	push	{r4, lr}
 80041b2:	4604      	mov	r4, r0
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 80041b4:	f001 f9f8 	bl	80055a8 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80041b8:	7921      	ldrb	r1, [r4, #4]
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 fab9 	bl	8004732 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 80041c0:	7961      	ldrb	r1, [r4, #5]
 80041c2:	4620      	mov	r0, r4
 80041c4:	f000 fab5 	bl	8004732 <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 80041c8:	2300      	movs	r3, #0
 80041ca:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 80041ce:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80041d2:	b113      	cbz	r3, 80041da <USBH_LL_Disconnect+0x2a>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80041d4:	2105      	movs	r1, #5
 80041d6:	4620      	mov	r0, r4
 80041d8:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80041da:	4620      	mov	r0, r4
 80041dc:	f001 f9d6 	bl	800558c <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 80041e0:	2303      	movs	r3, #3
 80041e2:	7023      	strb	r3, [r4, #0]
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
#endif 
  
  return USBH_OK;
}
 80041e4:	2000      	movs	r0, #0
 80041e6:	bd10      	pop	{r4, pc}

080041e8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 80041e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ea:	4604      	mov	r4, r0
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 80041ec:	7880      	ldrb	r0, [r0, #2]
 80041ee:	2801      	cmp	r0, #1
 80041f0:	d003      	beq.n	80041fa <USBH_CtlReq+0x12>
 80041f2:	2802      	cmp	r0, #2
 80041f4:	d008      	beq.n	8004208 <USBH_CtlReq+0x20>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 80041f6:	2001      	movs	r0, #1
 80041f8:	e004      	b.n	8004204 <USBH_CtlReq+0x1c>
    phost->RequestState = CMD_WAIT;
 80041fa:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 80041fc:	60a1      	str	r1, [r4, #8]
    phost->Control.length = length;
 80041fe:	81a2      	strh	r2, [r4, #12]
    phost->Control.state = CTRL_SETUP;  
 8004200:	7620      	strb	r0, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8004202:	70a3      	strb	r3, [r4, #2]
}
 8004204:	b003      	add	sp, #12
 8004206:	bd30      	pop	{r4, r5, pc}
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  
  switch (phost->Control.state)
 8004208:	7e23      	ldrb	r3, [r4, #24]
 800420a:	3b01      	subs	r3, #1
 800420c:	2b0a      	cmp	r3, #10
 800420e:	d8f2      	bhi.n	80041f6 <USBH_CtlReq+0xe>
 8004210:	e8df f003 	tbb	[pc, r3]
 8004214:	31260f06 	.word	0x31260f06
 8004218:	6b604a3d 	.word	0x6b604a3d
 800421c:	897c      	.short	0x897c
 800421e:	92          	.byte	0x92
 800421f:	00          	.byte	0x00
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup     (phost, 
 8004220:	7962      	ldrb	r2, [r4, #5]
 8004222:	f104 0110 	add.w	r1, r4, #16
 8004226:	4620      	mov	r0, r4
 8004228:	f000 f9f8 	bl	800461c <USBH_CtlSendSetup>
	                   (uint8_t *)phost->Control.setup.d8 , 
	                   phost->Control.pipe_out); 
    
    phost->Control.state = CTRL_SETUP_WAIT; 
 800422c:	2302      	movs	r3, #2
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
    
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
 800422e:	7623      	strb	r3, [r4, #24]
 8004230:	e7e1      	b.n	80041f6 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8004232:	7961      	ldrb	r1, [r4, #5]
 8004234:	4620      	mov	r0, r4
 8004236:	f001 fa25 	bl	8005684 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800423a:	2801      	cmp	r0, #1
 800423c:	d123      	bne.n	8004286 <USBH_CtlReq+0x9e>
      if (phost->Control.setup.b.wLength.w != 0 )
 800423e:	8ae2      	ldrh	r2, [r4, #22]
 8004240:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004244:	b132      	cbz	r2, 8004254 <USBH_CtlReq+0x6c>
        if (direction == USB_D2H)
 8004246:	2b00      	cmp	r3, #0
 8004248:	da02      	bge.n	8004250 <USBH_CtlReq+0x68>
          phost->Control.state = CTRL_DATA_IN;
 800424a:	2303      	movs	r3, #3
 800424c:	7623      	strb	r3, [r4, #24]
 800424e:	e7d9      	b.n	8004204 <USBH_CtlReq+0x1c>
          phost->Control.state = CTRL_DATA_OUT;
 8004250:	2305      	movs	r3, #5
 8004252:	e7ec      	b.n	800422e <USBH_CtlReq+0x46>
        if (direction == USB_D2H)
 8004254:	2b00      	cmp	r3, #0
 8004256:	da01      	bge.n	800425c <USBH_CtlReq+0x74>
      phost->Control.state = CTRL_STATUS_OUT;
 8004258:	2309      	movs	r3, #9
 800425a:	e7e8      	b.n	800422e <USBH_CtlReq+0x46>
          phost->Control.state = CTRL_STATUS_IN;
 800425c:	2307      	movs	r3, #7
 800425e:	e7e6      	b.n	800422e <USBH_CtlReq+0x46>
     phost->Control.timer = phost->Timer;
 8004260:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8004264:	81e3      	strh	r3, [r4, #14]
    USBH_CtlReceiveData(phost,
 8004266:	89a2      	ldrh	r2, [r4, #12]
 8004268:	7923      	ldrb	r3, [r4, #4]
 800426a:	68a1      	ldr	r1, [r4, #8]
 800426c:	4620      	mov	r0, r4
 800426e:	f000 f9fd 	bl	800466c <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8004272:	2304      	movs	r3, #4
 8004274:	e7db      	b.n	800422e <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8004276:	7921      	ldrb	r1, [r4, #4]
 8004278:	4620      	mov	r0, r4
 800427a:	f001 fa03 	bl	8005684 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800427e:	2801      	cmp	r0, #1
 8004280:	d0ea      	beq.n	8004258 <USBH_CtlReq+0x70>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
   
    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL) 
 8004282:	2805      	cmp	r0, #5
 8004284:	d01a      	beq.n	80042bc <USBH_CtlReq+0xd4>
    else if(URB_Status == USBH_URB_ERROR)
 8004286:	2804      	cmp	r0, #4
 8004288:	d1b5      	bne.n	80041f6 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;
 800428a:	230b      	movs	r3, #11
 800428c:	e7cf      	b.n	800422e <USBH_CtlReq+0x46>
    }
    break;
    
  case CTRL_DATA_OUT:
    
    USBH_CtlSendData (phost,
 800428e:	2501      	movs	r5, #1
 8004290:	7963      	ldrb	r3, [r4, #5]
 8004292:	89a2      	ldrh	r2, [r4, #12]
 8004294:	9500      	str	r5, [sp, #0]
 8004296:	68a1      	ldr	r1, [r4, #8]
 8004298:	4620      	mov	r0, r4
 800429a:	f000 f9d0 	bl	800463e <USBH_CtlSendData>
                      phost->Control.buff, 
                      phost->Control.length , 
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800429e:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80042a2:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80042a4:	2306      	movs	r3, #6
 80042a6:	e7c2      	b.n	800422e <USBH_CtlReq+0x46>
    break;
    
  case CTRL_DATA_OUT_WAIT:
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 80042a8:	7961      	ldrb	r1, [r4, #5]
 80042aa:	4620      	mov	r0, r4
 80042ac:	f001 f9ea 	bl	8005684 <USBH_LL_GetURBState>
    
    if  (URB_Status == USBH_URB_DONE)
 80042b0:	2801      	cmp	r0, #1
 80042b2:	d0d3      	beq.n	800425c <USBH_CtlReq+0x74>
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    
    /* handle error cases */
    else if  (URB_Status == USBH_URB_STALL) 
 80042b4:	2805      	cmp	r0, #5
 80042b6:	d103      	bne.n	80042c0 <USBH_CtlReq+0xd8>
    { 
      /* In stall case, return to previous machine state*/
      phost->Control.state = CTRL_STALLED; 
 80042b8:	230c      	movs	r3, #12
 80042ba:	7623      	strb	r3, [r4, #24]
#endif      
    }
     else if(URB_Status == USBH_URB_STALL)
    {
      /* Control transfers completed, Exit the State Machine */
      status = USBH_NOT_SUPPORTED;
 80042bc:	2003      	movs	r0, #3
 80042be:	e7a1      	b.n	8004204 <USBH_CtlReq+0x1c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80042c0:	2802      	cmp	r0, #2
 80042c2:	d0c5      	beq.n	8004250 <USBH_CtlReq+0x68>
    else if (URB_Status == USBH_URB_ERROR)
 80042c4:	2804      	cmp	r0, #4
 80042c6:	d196      	bne.n	80041f6 <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 80042c8:	230b      	movs	r3, #11
 80042ca:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_SEND;
 80042cc:	2301      	movs	r3, #1
 80042ce:	70a3      	strb	r3, [r4, #2]
      status = USBH_FAIL;
 80042d0:	2002      	movs	r0, #2
  return status;
 80042d2:	e797      	b.n	8004204 <USBH_CtlReq+0x1c>
    USBH_CtlReceiveData (phost,
 80042d4:	2200      	movs	r2, #0
 80042d6:	7923      	ldrb	r3, [r4, #4]
 80042d8:	4611      	mov	r1, r2
 80042da:	4620      	mov	r0, r4
 80042dc:	f000 f9c6 	bl	800466c <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 80042e0:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 80042e4:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80042e6:	2308      	movs	r3, #8
 80042e8:	e7a1      	b.n	800422e <USBH_CtlReq+0x46>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 80042ea:	7921      	ldrb	r1, [r4, #4]
 80042ec:	4620      	mov	r0, r4
 80042ee:	f001 f9c9 	bl	8005684 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 80042f2:	2801      	cmp	r0, #1
 80042f4:	d104      	bne.n	8004300 <USBH_CtlReq+0x118>
      phost->RequestState = CMD_SEND;
 80042f6:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 80042f8:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 80042fa:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 80042fc:	7620      	strb	r0, [r4, #24]
 80042fe:	e781      	b.n	8004204 <USBH_CtlReq+0x1c>
    else if (URB_Status == USBH_URB_ERROR)
 8004300:	2804      	cmp	r0, #4
 8004302:	d0c2      	beq.n	800428a <USBH_CtlReq+0xa2>
     else if(URB_Status == USBH_URB_STALL)
 8004304:	2805      	cmp	r0, #5
 8004306:	f47f af76 	bne.w	80041f6 <USBH_CtlReq+0xe>
 800430a:	e7d7      	b.n	80042bc <USBH_CtlReq+0xd4>
#endif      
    }
    break;
    
  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800430c:	2200      	movs	r2, #0
 800430e:	2501      	movs	r5, #1
 8004310:	7963      	ldrb	r3, [r4, #5]
 8004312:	9500      	str	r5, [sp, #0]
 8004314:	4611      	mov	r1, r2
 8004316:	4620      	mov	r0, r4
 8004318:	f000 f991 	bl	800463e <USBH_CtlSendData>
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
 800431c:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8004320:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004322:	230a      	movs	r3, #10
 8004324:	e783      	b.n	800422e <USBH_CtlReq+0x46>
    break;
    
  case CTRL_STATUS_OUT_WAIT: 
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8004326:	7961      	ldrb	r1, [r4, #5]
 8004328:	4620      	mov	r0, r4
 800432a:	f001 f9ab 	bl	8005684 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800432e:	2801      	cmp	r0, #1
 8004330:	d0e1      	beq.n	80042f6 <USBH_CtlReq+0x10e>
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004332:	2802      	cmp	r0, #2
 8004334:	d1a7      	bne.n	8004286 <USBH_CtlReq+0x9e>
 8004336:	e78f      	b.n	8004258 <USBH_CtlReq+0x70>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004338:	7e63      	ldrb	r3, [r4, #25]
 800433a:	3301      	adds	r3, #1
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	7663      	strb	r3, [r4, #25]
 8004342:	d806      	bhi.n	8004352 <USBH_CtlReq+0x16a>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8004344:	4620      	mov	r0, r4
 8004346:	f001 f92f 	bl	80055a8 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 800434a:	2001      	movs	r0, #1
 800434c:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 800434e:	70a0      	strb	r0, [r4, #2]
 8004350:	e758      	b.n	8004204 <USBH_CtlReq+0x1c>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004352:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8004356:	2106      	movs	r1, #6
 8004358:	4620      	mov	r0, r4
 800435a:	4798      	blx	r3
      phost->Control.errorcount = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	7663      	strb	r3, [r4, #25]
 8004360:	e7b4      	b.n	80042cc <USBH_CtlReq+0xe4>

08004362 <USBH_GetDescriptor>:
{ 
 8004362:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8004364:	7884      	ldrb	r4, [r0, #2]
{ 
 8004366:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 800436a:	2c01      	cmp	r4, #1
 800436c:	d110      	bne.n	8004390 <USBH_GetDescriptor+0x2e>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800436e:	f061 047f 	orn	r4, r1, #127	; 0x7f
 8004372:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8004374:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
 8004378:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 800437c:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800437e:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0x0409;
 8004382:	bf0c      	ite	eq
 8004384:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8004388:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800438a:	7441      	strb	r1, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0;
 800438c:	8282      	strh	r2, [r0, #20]
    phost->Control.setup.b.wLength.w = length; 
 800438e:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff , length );     
 8004390:	462a      	mov	r2, r5
 8004392:	4619      	mov	r1, r3
}
 8004394:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 8004396:	f7ff bf27 	b.w	80041e8 <USBH_CtlReq>

0800439a <USBH_Get_DevDesc>:
{
 800439a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 800439c:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80043a0:	460d      	mov	r5, r1
 80043a2:	9100      	str	r1, [sp, #0]
 80043a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043a8:	2100      	movs	r1, #0
{
 80043aa:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80043ac:	f7ff ffd9 	bl	8004362 <USBH_GetDescriptor>
 80043b0:	2800      	cmp	r0, #0
 80043b2:	d149      	bne.n	8004448 <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80043b4:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
 80043b8:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80043bc:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80043c0:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80043c4:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
 80043c8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80043cc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80043d0:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80043d4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 80043d8:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80043dc:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 80043e0:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80043e4:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 80043e8:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8)
 80043ec:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80043ee:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 80043f2:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 80043f6:	d927      	bls.n	8004448 <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 80043f8:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80043fc:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8004400:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004404:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 8004408:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
 800440c:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8004410:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004414:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004418:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
 800441c:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8004420:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004424:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8004428:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800442c:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004430:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8004434:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8004438:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800443c:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004440:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8004444:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 8004448:	b003      	add	sp, #12
 800444a:	bd30      	pop	{r4, r5, pc}

0800444c <USBH_Get_CfgDesc>:
{
 800444c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 8004450:	f100 051c 	add.w	r5, r0, #28
{
 8004454:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 8004456:	9100      	str	r1, [sp, #0]
 8004458:	462b      	mov	r3, r5
 800445a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445e:	2100      	movs	r1, #0
{
 8004460:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004462:	f7ff ff7e 	bl	8004362 <USBH_GetDescriptor>
 8004466:	bb68      	cbnz	r0, 80044c4 <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004468:	7f23      	ldrb	r3, [r4, #28]
 800446a:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800446e:	7f63      	ldrb	r3, [r4, #29]
 8004470:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8004474:	7fa6      	ldrb	r6, [r4, #30]
 8004476:	7fe3      	ldrb	r3, [r4, #31]
 8004478:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800447c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8004480:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004484:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004488:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800448c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004490:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004494:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8004498:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800449c:	b2b6      	uxth	r6, r6
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 800449e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80044a2:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80044a6:	2f09      	cmp	r7, #9
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 80044a8:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80044ac:	d90a      	bls.n	80044c4 <USBH_Get_CfgDesc+0x78>
 80044ae:	4622      	mov	r2, r4
 80044b0:	462b      	mov	r3, r5
 80044b2:	4686      	mov	lr, r0
 80044b4:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80044b6:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 80044ba:	f1be 0f02 	cmp.w	lr, #2
 80044be:	d001      	beq.n	80044c4 <USBH_Get_CfgDesc+0x78>
 80044c0:	428e      	cmp	r6, r1
 80044c2:	d802      	bhi.n	80044ca <USBH_Get_CfgDesc+0x7e>
}
 80044c4:	b002      	add	sp, #8
 80044c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80044ca:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80044cc:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80044ce:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80044d0:	785d      	ldrb	r5, [r3, #1]
 80044d2:	2d04      	cmp	r5, #4
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80044d4:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 80044d6:	d1f0      	bne.n	80044ba <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80044d8:	781d      	ldrb	r5, [r3, #0]
 80044da:	f882 533c 	strb.w	r5, [r2, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80044de:	785d      	ldrb	r5, [r3, #1]
 80044e0:	f882 533d 	strb.w	r5, [r2, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80044e4:	789d      	ldrb	r5, [r3, #2]
 80044e6:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80044ea:	78dd      	ldrb	r5, [r3, #3]
 80044ec:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80044f0:	791d      	ldrb	r5, [r3, #4]
 80044f2:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80044f6:	795d      	ldrb	r5, [r3, #5]
 80044f8:	f882 5341 	strb.w	r5, [r2, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80044fc:	799d      	ldrb	r5, [r3, #6]
 80044fe:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004502:	79dd      	ldrb	r5, [r3, #7]
 8004504:	f882 5343 	strb.w	r5, [r2, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8004508:	7a1d      	ldrb	r5, [r3, #8]
 800450a:	f882 5344 	strb.w	r5, [r2, #836]	; 0x344
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800450e:	fb08 f90e 	mul.w	r9, r8, lr
        ep_ix = 0;
 8004512:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004514:	f892 7340 	ldrb.w	r7, [r2, #832]	; 0x340
 8004518:	42bd      	cmp	r5, r7
 800451a:	db03      	blt.n	8004524 <USBH_Get_CfgDesc+0xd8>
 800451c:	f10e 0e01 	add.w	lr, lr, #1
 8004520:	321a      	adds	r2, #26
 8004522:	e7ca      	b.n	80044ba <USBH_Get_CfgDesc+0x6e>
 8004524:	428e      	cmp	r6, r1
 8004526:	d9f9      	bls.n	800451c <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004528:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 800452a:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800452c:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 800452e:	785f      	ldrb	r7, [r3, #1]
 8004530:	2f05      	cmp	r7, #5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8004532:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 8004534:	d1ee      	bne.n	8004514 <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004536:	1c6f      	adds	r7, r5, #1
 8004538:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 800453c:	4425      	add	r5, r4
 800453e:	f893 c000 	ldrb.w	ip, [r3]
 8004542:	f885 c33e 	strb.w	ip, [r5, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004546:	f893 c001 	ldrb.w	ip, [r3, #1]
 800454a:	f885 c33f 	strb.w	ip, [r5, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800454e:	f893 c002 	ldrb.w	ip, [r3, #2]
 8004552:	f885 c340 	strb.w	ip, [r5, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004556:	f893 c003 	ldrb.w	ip, [r3, #3]
 800455a:	f885 c341 	strb.w	ip, [r5, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800455e:	f893 a005 	ldrb.w	sl, [r3, #5]
 8004562:	f893 c004 	ldrb.w	ip, [r3, #4]
 8004566:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 800456a:	f8a5 c342 	strh.w	ip, [r5, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800456e:	f893 c006 	ldrb.w	ip, [r3, #6]
 8004572:	f885 c344 	strb.w	ip, [r5, #836]	; 0x344
            ep_ix++;
 8004576:	b27d      	sxtb	r5, r7
 8004578:	e7cc      	b.n	8004514 <USBH_Get_CfgDesc+0xc8>

0800457a <USBH_Get_StringDesc>:
{
 800457a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 800457c:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8004580:	4614      	mov	r4, r2
 8004582:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800458a:	462b      	mov	r3, r5
 800458c:	2100      	movs	r1, #0
{
 800458e:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8004590:	f7ff fee7 	bl	8004362 <USBH_GetDescriptor>
 8004594:	b978      	cbnz	r0, 80045b6 <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 8004596:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 800459a:	2b03      	cmp	r3, #3
 800459c:	d10b      	bne.n	80045b6 <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800459e:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 80045a2:	3b02      	subs	r3, #2
 80045a4:	42bb      	cmp	r3, r7
 80045a6:	bfa8      	it	ge
 80045a8:	463b      	movge	r3, r7
 80045aa:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 80045ac:	4602      	mov	r2, r0
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d803      	bhi.n	80045ba <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 80045b2:	2300      	movs	r3, #0
 80045b4:	7023      	strb	r3, [r4, #0]
}
 80045b6:	b003      	add	sp, #12
 80045b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80045ba:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 80045bc:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 80045be:	7889      	ldrb	r1, [r1, #2]
 80045c0:	f804 1b01 	strb.w	r1, [r4], #1
    for (idx = 0; idx < strlength; idx+=2 )
 80045c4:	b292      	uxth	r2, r2
 80045c6:	e7f2      	b.n	80045ae <USBH_Get_StringDesc+0x34>

080045c8 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80045c8:	7883      	ldrb	r3, [r0, #2]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d106      	bne.n	80045dc <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80045ce:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80045d0:	2205      	movs	r2, #5
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80045d2:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80045d4:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80045d6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80045d8:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 80045da:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 80045dc:	2200      	movs	r2, #0
 80045de:	4611      	mov	r1, r2
 80045e0:	f7ff be02 	b.w	80041e8 <USBH_CtlReq>

080045e4 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80045e4:	7883      	ldrb	r3, [r0, #2]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d106      	bne.n	80045f8 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80045ea:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80045ec:	2209      	movs	r2, #9
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80045ee:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80045f0:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80045f2:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0;
 80045f4:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80045f6:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 80045f8:	2200      	movs	r2, #0
 80045fa:	4611      	mov	r1, r2
 80045fc:	f7ff bdf4 	b.w	80041e8 <USBH_CtlReq>

08004600 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004600:	7883      	ldrb	r3, [r0, #2]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d106      	bne.n	8004614 <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 8004606:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004608:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800460a:	2300      	movs	r3, #0
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 800460c:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800460e:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004610:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;           
 8004612:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 8004614:	2200      	movs	r2, #0
 8004616:	4611      	mov	r1, r2
 8004618:	f7ff bde6 	b.w	80041e8 <USBH_CtlReq>

0800461c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 800461c:	b530      	push	{r4, r5, lr}
 800461e:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004620:	2400      	movs	r4, #0
{
 8004622:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004624:	2308      	movs	r3, #8
 8004626:	9302      	str	r3, [sp, #8]
 8004628:	9101      	str	r1, [sp, #4]
 800462a:	9403      	str	r4, [sp, #12]
 800462c:	9400      	str	r4, [sp, #0]
 800462e:	4623      	mov	r3, r4
 8004630:	4622      	mov	r2, r4
 8004632:	4629      	mov	r1, r5
 8004634:	f001 f80c 	bl	8005650 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8004638:	4620      	mov	r0, r4
 800463a:	b005      	add	sp, #20
 800463c:	bd30      	pop	{r4, r5, pc}

0800463e <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800463e:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004640:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004644:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004646:	2d00      	cmp	r5, #0
{
 8004648:	461c      	mov	r4, r3
 800464a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800464e:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8004650:	bf18      	it	ne
 8004652:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004654:	9303      	str	r3, [sp, #12]
 8004656:	2301      	movs	r3, #1
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	2300      	movs	r3, #0
 800465c:	9101      	str	r1, [sp, #4]
 800465e:	461a      	mov	r2, r3
 8004660:	4621      	mov	r1, r4
 8004662:	f000 fff5 	bl	8005650 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 8004666:	2000      	movs	r0, #0
 8004668:	b005      	add	sp, #20
 800466a:	bd30      	pop	{r4, r5, pc}

0800466c <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 800466c:	b530      	push	{r4, r5, lr}
 800466e:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004670:	2400      	movs	r4, #0
{
 8004672:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004674:	9202      	str	r2, [sp, #8]
 8004676:	2201      	movs	r2, #1
 8004678:	9101      	str	r1, [sp, #4]
 800467a:	9403      	str	r4, [sp, #12]
 800467c:	9200      	str	r2, [sp, #0]
 800467e:	4623      	mov	r3, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f000 ffe5 	bl	8005650 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 8004686:	4620      	mov	r0, r4
 8004688:	b005      	add	sp, #20
 800468a:	bd30      	pop	{r4, r5, pc}

0800468c <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 800468c:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 800468e:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 8004692:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004694:	2d00      	cmp	r5, #0
{ 
 8004696:	461c      	mov	r4, r3
 8004698:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800469c:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 800469e:	bf18      	it	ne
 80046a0:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80046a2:	9303      	str	r3, [sp, #12]
 80046a4:	2301      	movs	r3, #1
 80046a6:	9101      	str	r1, [sp, #4]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2200      	movs	r2, #0
 80046ac:	2302      	movs	r3, #2
 80046ae:	4621      	mov	r1, r4
 80046b0:	f000 ffce 	bl	8005650 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 80046b4:	2000      	movs	r0, #0
 80046b6:	b005      	add	sp, #20
 80046b8:	bd30      	pop	{r4, r5, pc}

080046ba <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 80046ba:	b530      	push	{r4, r5, lr}
 80046bc:	b085      	sub	sp, #20
 80046be:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80046c0:	2400      	movs	r4, #0
 80046c2:	9202      	str	r2, [sp, #8]
 80046c4:	2201      	movs	r2, #1
 80046c6:	9101      	str	r1, [sp, #4]
 80046c8:	9403      	str	r4, [sp, #12]
 80046ca:	9200      	str	r2, [sp, #0]
 80046cc:	2302      	movs	r3, #2
 80046ce:	4629      	mov	r1, r5
 80046d0:	f000 ffbe 	bl	8005650 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 80046d4:	4620      	mov	r0, r4
 80046d6:	b005      	add	sp, #20
 80046d8:	bd30      	pop	{r4, r5, pc}

080046da <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80046da:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 80046dc:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80046e0:	9402      	str	r4, [sp, #8]
 80046e2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80046e6:	9401      	str	r4, [sp, #4]
 80046e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80046ec:	9400      	str	r4, [sp, #0]
 80046ee:	f000 ff89 	bl	8005604 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 80046f2:	2000      	movs	r0, #0
 80046f4:	b004      	add	sp, #16
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80046f8:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80046fa:	f000 ff9b 	bl	8005634 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 80046fe:	2000      	movs	r0, #0
 8004700:	bd08      	pop	{r3, pc}

08004702 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004702:	b530      	push	{r4, r5, lr}
 8004704:	2300      	movs	r3, #0
 8004706:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 800470a:	f854 5b04 	ldr.w	r5, [r4], #4
 800470e:	042d      	lsls	r5, r5, #16
 8004710:	b2da      	uxtb	r2, r3
 8004712:	d408      	bmi.n	8004726 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 8004714:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8004718:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 800471c:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 800471e:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 8004722:	b2d0      	uxtb	r0, r2
 8004724:	bd30      	pop	{r4, r5, pc}
 8004726:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 8004728:	2b0b      	cmp	r3, #11
 800472a:	d1ee      	bne.n	800470a <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 800472c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004730:	e7f7      	b.n	8004722 <USBH_AllocPipe+0x20>

08004732 <USBH_FreePipe>:
   if(idx < 11)
 8004732:	290a      	cmp	r1, #10
 8004734:	bf9f      	itttt	ls
 8004736:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 800473a:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 800473e:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8004742:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 8004746:	2000      	movs	r0, #0
 8004748:	4770      	bx	lr
	...

0800474c <Set_Key>:

/* USER CODE BEGIN 0 */

void Set_Key(int key,int state)				// sterowanie gornymi kluczami falownika; key - numer klucza (1-3), state - stan (1/0)
{
	switch (key)
 800474c:	2802      	cmp	r0, #2
{
 800474e:	460a      	mov	r2, r1
	switch (key)
 8004750:	d00a      	beq.n	8004768 <Set_Key+0x1c>
 8004752:	2803      	cmp	r0, #3
 8004754:	d00d      	beq.n	8004772 <Set_Key+0x26>
 8004756:	2801      	cmp	r0, #1
 8004758:	d110      	bne.n	800477c <Set_Key+0x30>
	{
	case 1:
		if(state)	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_SET);
 800475a:	b101      	cbz	r1, 800475e <Set_Key+0x12>
 800475c:	4602      	mov	r2, r0
		else		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_9,GPIO_PIN_RESET);
 800475e:	f44f 7100 	mov.w	r1, #512	; 0x200
		else		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);
	break;

	case 3:
		if(state)	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
		else		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
 8004762:	4807      	ldr	r0, [pc, #28]	; (8004780 <Set_Key+0x34>)
 8004764:	f7fc be72 	b.w	800144c <HAL_GPIO_WritePin>
		if(state)	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);
 8004768:	b101      	cbz	r1, 800476c <Set_Key+0x20>
 800476a:	2201      	movs	r2, #1
		else		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);
 800476c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004770:	e7f7      	b.n	8004762 <Set_Key+0x16>
		if(state)	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_SET);
 8004772:	b101      	cbz	r1, 8004776 <Set_Key+0x2a>
 8004774:	2201      	movs	r2, #1
		else		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_11,GPIO_PIN_RESET);
 8004776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800477a:	e7f2      	b.n	8004762 <Set_Key+0x16>
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40020c00 	.word	0x40020c00

08004784 <PWM_SetValue>:

void PWM_SetValue( int channel, int duty_perc)		// ustawienie wypelnienia PWM, channel - kanal PWM (1,2,3), duty_perc - wypelnienie w procentach(1-100)
{
	int value = duty_perc*PWM_PERIOD/100;			// value - wartosc wypelnienia (0 - 1000)

    switch (channel)
 8004784:	2802      	cmp	r0, #2
	int value = duty_perc*PWM_PERIOD/100;			// value - wartosc wypelnienia (0 - 1000)
 8004786:	ea4f 01c1 	mov.w	r1, r1, lsl #3
    switch (channel)
 800478a:	d007      	beq.n	800479c <PWM_SetValue+0x18>
 800478c:	2803      	cmp	r0, #3
 800478e:	d009      	beq.n	80047a4 <PWM_SetValue+0x20>
 8004790:	2801      	cmp	r0, #1
 8004792:	d10a      	bne.n	80047aa <PWM_SetValue+0x26>
    {
    case 1:
    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, value);	// uaktualnienie wartosci wypelnienia
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <PWM_SetValue+0x28>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6359      	str	r1, [r3, #52]	; 0x34
	break;
 800479a:	4770      	bx	lr

    case 2:
    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, value);
 800479c:	4b03      	ldr	r3, [pc, #12]	; (80047ac <PWM_SetValue+0x28>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6399      	str	r1, [r3, #56]	; 0x38
    break;
 80047a2:	4770      	bx	lr

    case 3:
    	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, value);
 80047a4:	4b01      	ldr	r3, [pc, #4]	; (80047ac <PWM_SetValue+0x28>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	63d9      	str	r1, [r3, #60]	; 0x3c
 80047aa:	4770      	bx	lr
 80047ac:	20000228 	.word	0x20000228

080047b0 <SPI2_SendRec>:
    break;
    }
}

uint16_t SPI2_SendRec(uint16_t data) {							// wysyla i pobiera dane po SPI 2
 80047b0:	b510      	push	{r4, lr}
	uint8_t answer;												// data - dane do wyslania 16 bit
																// answer - odpowiedz urzadzenia 16 bit
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80047b2:	4c0f      	ldr	r4, [pc, #60]	; (80047f0 <SPI2_SendRec+0x40>)
uint16_t SPI2_SendRec(uint16_t data) {							// wysyla i pobiera dane po SPI 2
 80047b4:	b086      	sub	sp, #24
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80047b6:	2200      	movs	r2, #0
uint16_t SPI2_SendRec(uint16_t data) {							// wysyla i pobiera dane po SPI 2
 80047b8:	f8ad 000e 	strh.w	r0, [sp, #14]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 80047bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047c0:	4620      	mov	r0, r4
 80047c2:	f7fc fe43 	bl	800144c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&data, &answer, 1, HAL_MAX_DELAY);		// arg1 - struktura init
 80047c6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	f10d 0217 	add.w	r2, sp, #23
 80047d0:	2301      	movs	r3, #1
 80047d2:	f10d 010e 	add.w	r1, sp, #14
 80047d6:	4807      	ldr	r0, [pc, #28]	; (80047f4 <SPI2_SendRec+0x44>)
 80047d8:	f7fe f8f8 	bl	80029cc <HAL_SPI_TransmitReceive>
																						// arg2 - dane do wyslania (jawne rzutowanie na 8 bitow)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);									// arg3 - dane zwrotne
 80047dc:	4620      	mov	r0, r4
 80047de:	2201      	movs	r2, #1
 80047e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047e4:	f7fc fe32 	bl	800144c <HAL_GPIO_WritePin>
	return answer;																		// arg4 - rozmiar bufora
																						// arg5 - maksymalny czas komunikacji
}
 80047e8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80047ec:	b006      	add	sp, #24
 80047ee:	bd10      	pop	{r4, pc}
 80047f0:	40020400 	.word	0x40020400
 80047f4:	200001d0 	.word	0x200001d0

080047f8 <ADC_VSense_Read>:
	//_Warning_Reg = SPI2_SendRec(DRV8305_WARNING_REG_READ);
	//_OVVDS_Reg = SPI2_SendRec(DRV8305_OVVDS_REG_READ);
}

void ADC_VSense_Read()		// odczytuje ADC Vsense i zapisuje do globalnych zmiennych
{
 80047f8:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc1);
 80047fa:	4c22      	ldr	r4, [pc, #136]	; (8004884 <ADC_VSense_Read+0x8c>)
{
 80047fc:	ed2d 8b02 	vpush	{d8}
	HAL_ADC_Start(&hadc1);
 8004800:	4620      	mov	r0, r4
 8004802:	f7fc fb5b 	bl	8000ebc <HAL_ADC_Start>

		HAL_ADC_PollForConversion(&hadc1,10);
 8004806:	210a      	movs	r1, #10
 8004808:	4620      	mov	r0, r4
 800480a:	f7fc fbd5 	bl	8000fb8 <HAL_ADC_PollForConversion>
		_Vsense_Read_A = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 800480e:	4620      	mov	r0, r4
 8004810:	f7fc fc22 	bl	8001058 <HAL_ADC_GetValue>
 8004814:	ee07 0a90 	vmov	s15, r0
 8004818:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 8004888 <ADC_VSense_Read+0x90>
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <ADC_VSense_Read+0x94>)
 800481e:	eeb8 7a67 	vcvt.f32.u32	s14, s15

		HAL_ADC_PollForConversion(&hadc1,10);
 8004822:	210a      	movs	r1, #10
		_Vsense_Read_A = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 8004824:	ee27 7a08 	vmul.f32	s14, s14, s16
		HAL_ADC_PollForConversion(&hadc1,10);
 8004828:	4620      	mov	r0, r4
		_Vsense_Read_A = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 800482a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800482e:	ed83 7a00 	vstr	s14, [r3]
		HAL_ADC_PollForConversion(&hadc1,10);
 8004832:	f7fc fbc1 	bl	8000fb8 <HAL_ADC_PollForConversion>
		_Vsense_Read_B = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 8004836:	4620      	mov	r0, r4
 8004838:	f7fc fc0e 	bl	8001058 <HAL_ADC_GetValue>
 800483c:	ee07 0a90 	vmov	s15, r0
 8004840:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004844:	4b12      	ldr	r3, [pc, #72]	; (8004890 <ADC_VSense_Read+0x98>)
 8004846:	ee27 7a08 	vmul.f32	s14, s14, s16

		HAL_ADC_PollForConversion(&hadc1,10);
 800484a:	210a      	movs	r1, #10
		_Vsense_Read_B = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 800484c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		HAL_ADC_PollForConversion(&hadc1,10);
 8004850:	4620      	mov	r0, r4
		_Vsense_Read_B = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 8004852:	ed83 7a00 	vstr	s14, [r3]
		HAL_ADC_PollForConversion(&hadc1,10);
 8004856:	f7fc fbaf 	bl	8000fb8 <HAL_ADC_PollForConversion>
		_Vsense_Read_C = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 800485a:	4620      	mov	r0, r4
 800485c:	f7fc fbfc 	bl	8001058 <HAL_ADC_GetValue>
 8004860:	ee07 0a90 	vmov	s15, r0
 8004864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <ADC_VSense_Read+0x9c>)
 800486a:	ee67 7a88 	vmul.f32	s15, s15, s16

	HAL_ADC_Stop(&hadc1);
}
 800486e:	ecbd 8b02 	vpop	{d8}
		_Vsense_Read_C = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 8004872:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	HAL_ADC_Stop(&hadc1);
 8004876:	4620      	mov	r0, r4
}
 8004878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_Vsense_Read_C = (_Supply_Voltage/(_ADC_Resolution/4)) * HAL_ADC_GetValue(&hadc1);
 800487c:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADC_Stop(&hadc1);
 8004880:	f7fc bb7c 	b.w	8000f7c <HAL_ADC_Stop>
 8004884:	2000033c 	.word	0x2000033c
 8004888:	404e4ce5 	.word	0x404e4ce5
 800488c:	200001a4 	.word	0x200001a4
 8004890:	200001a8 	.word	0x200001a8
 8004894:	200001ac 	.word	0x200001ac

08004898 <ADC_Joy_Read>:

void ADC_Joy_Read()			// odczytuje ADC joystick i zapisuje do globalnej zmiennej
{
 8004898:	b508      	push	{r3, lr}
	if (HAL_ADC_PollForConversion(&hadc2, 10) == HAL_OK)
 800489a:	210a      	movs	r1, #10
 800489c:	4808      	ldr	r0, [pc, #32]	; (80048c0 <ADC_Joy_Read+0x28>)
 800489e:	f7fc fb8b 	bl	8000fb8 <HAL_ADC_PollForConversion>
 80048a2:	b960      	cbnz	r0, 80048be <ADC_Joy_Read+0x26>
	{
		HAL_ADC_Start(&hadc2);
 80048a4:	4806      	ldr	r0, [pc, #24]	; (80048c0 <ADC_Joy_Read+0x28>)
 80048a6:	f7fc fb09 	bl	8000ebc <HAL_ADC_Start>
		_ADC_Joy_Read = HAL_ADC_GetValue(&hadc2);
 80048aa:	4805      	ldr	r0, [pc, #20]	; (80048c0 <ADC_Joy_Read+0x28>)
 80048ac:	f7fc fbd4 	bl	8001058 <HAL_ADC_GetValue>
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <ADC_Joy_Read+0x2c>)
 80048b2:	8018      	strh	r0, [r3, #0]
		HAL_ADC_Start(&hadc2);
 80048b4:	4802      	ldr	r0, [pc, #8]	; (80048c0 <ADC_Joy_Read+0x28>)
	}
}
 80048b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_ADC_Start(&hadc2);
 80048ba:	f7fc baff 	b.w	8000ebc <HAL_ADC_Start>
 80048be:	bd08      	pop	{r3, pc}
 80048c0:	20000264 	.word	0x20000264
 80048c4:	20000198 	.word	0x20000198

080048c8 <HAL_Sense>:

	return Sense_ABC_flags;
}

uint8_t HAL_Sense ()			// odczytuje stan czujnikow HALLA, zwraca 8 bitow, z czego 0,1,2 to kolejno HAL_1, HAL_2, HAL_3
{
 80048c8:	b510      	push	{r4, lr}
	uint8_t aux_flag = 0;

	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) 		// HAL_1
 80048ca:	2180      	movs	r1, #128	; 0x80
 80048cc:	480b      	ldr	r0, [pc, #44]	; (80048fc <HAL_Sense+0x34>)
 80048ce:	f7fc fdb7 	bl	8001440 <HAL_GPIO_ReadPin>
			aux_flag |= 0x1;
	else	aux_flag &= ~0x1;

	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) 		// HAL_2
 80048d2:	f44f 7180 	mov.w	r1, #256	; 0x100
			aux_flag |= 0x1;
 80048d6:	1c04      	adds	r4, r0, #0
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) 		// HAL_2
 80048d8:	4808      	ldr	r0, [pc, #32]	; (80048fc <HAL_Sense+0x34>)
			aux_flag |= 0x1;
 80048da:	bf18      	it	ne
 80048dc:	2401      	movne	r4, #1
	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) 		// HAL_2
 80048de:	f7fc fdaf 	bl	8001440 <HAL_GPIO_ReadPin>
 80048e2:	b108      	cbz	r0, 80048e8 <HAL_Sense+0x20>
			aux_flag |= 0x2;
 80048e4:	f044 0402 	orr.w	r4, r4, #2
	else	aux_flag &= ~0x2;

	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_9)) 		// HAL_3
 80048e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ec:	4803      	ldr	r0, [pc, #12]	; (80048fc <HAL_Sense+0x34>)
 80048ee:	f7fc fda7 	bl	8001440 <HAL_GPIO_ReadPin>
 80048f2:	b108      	cbz	r0, 80048f8 <HAL_Sense+0x30>
			aux_flag |= 0x4;
 80048f4:	f044 0404 	orr.w	r4, r4, #4
	else	aux_flag &= ~0x4;

	return aux_flag;
}
 80048f8:	4620      	mov	r0, r4
 80048fa:	bd10      	pop	{r4, pc}
 80048fc:	40021000 	.word	0x40021000

08004900 <Regulacja_PI>:

unsigned int  Regulacja_PI()
{
	KU = 0.35;
 8004900:	a131      	add	r1, pc, #196	; (adr r1, 80049c8 <Regulacja_PI+0xc8>)
 8004902:	e9d1 0100 	ldrd	r0, r1, [r1]
{
 8004906:	b508      	push	{r3, lr}
	KU = 0.35;
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <Regulacja_PI+0xa0>)
 800490a:	e9c3 0100 	strd	r0, r1, [r3]
	PU = 0.1;
 800490e:	a11e      	add	r1, pc, #120	; (adr r1, 8004988 <Regulacja_PI+0x88>)
 8004910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <Regulacja_PI+0xa4>)
 8004916:	e9c3 0100 	strd	r0, r1, [r3]

	KP = 0.6*KU;	// wartosci wzmocnien wedlug metody zieglera-nicholsa
 800491a:	a11d      	add	r1, pc, #116	; (adr r1, 8004990 <Regulacja_PI+0x90>)
 800491c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <Regulacja_PI+0xa8>)
 8004922:	e9c3 0100 	strd	r0, r1, [r3]
	KI = 2*KP/PU;	//
 8004926:	a11c      	add	r1, pc, #112	; (adr r1, 8004998 <Regulacja_PI+0x98>)
 8004928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <Regulacja_PI+0xac>)
 800492e:	e9c3 0100 	strd	r0, r1, [r3]

	unsigned int output = 0;

	if(_Vsense_Read_A <= prog_napiecia
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <Regulacja_PI+0xb0>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b1f      	ldr	r3, [pc, #124]	; (80049b4 <Regulacja_PI+0xb4>)
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <Regulacja_PI+0xb8>)
 800493c:	4282      	cmp	r2, r0
 800493e:	dd07      	ble.n	8004950 <Regulacja_PI+0x50>
	|| _Vsense_Read_B <= prog_napiecia
 8004940:	491e      	ldr	r1, [pc, #120]	; (80049bc <Regulacja_PI+0xbc>)
 8004942:	6809      	ldr	r1, [r1, #0]
 8004944:	4288      	cmp	r0, r1
 8004946:	da03      	bge.n	8004950 <Regulacja_PI+0x50>
	|| _Vsense_Read_C <= prog_napiecia)
 8004948:	491d      	ldr	r1, [pc, #116]	; (80049c0 <Regulacja_PI+0xc0>)
 800494a:	6809      	ldr	r1, [r1, #0]
 800494c:	4288      	cmp	r0, r1
 800494e:	db15      	blt.n	800497c <Regulacja_PI+0x7c>
	{
		uchyb = prog_napiecia - _Vsense_Read_A;
 8004950:	1a80      	subs	r0, r0, r2
 8004952:	6018      	str	r0, [r3, #0]

		integrator = 0;
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <Regulacja_PI+0xc4>)
 8004956:	2200      	movs	r2, #0
 8004958:	601a      	str	r2, [r3, #0]
		//integrator += uchyb*czas_iteracji;
		if(integrator > 1)	integrator = 1;

		output = KP*uchyb + KI*integrator;
 800495a:	f7fb fd87 	bl	800046c <__aeabi_i2d>
 800495e:	a30c      	add	r3, pc, #48	; (adr r3, 8004990 <Regulacja_PI+0x90>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb fde8 	bl	8000538 <__aeabi_dmul>
 8004968:	2200      	movs	r2, #0
 800496a:	2300      	movs	r3, #0
 800496c:	f7fb fc32 	bl	80001d4 <__adddf3>
 8004970:	f7fb fff4 	bl	800095c <__aeabi_d2uiz>
 8004974:	2862      	cmp	r0, #98	; 0x62
 8004976:	bf28      	it	cs
 8004978:	2062      	movcs	r0, #98	; 0x62
 800497a:	bd08      	pop	{r3, pc}

		return output;
	}
	else
	{
		uchyb = 0;
 800497c:	2000      	movs	r0, #0
 800497e:	6018      	str	r0, [r3, #0]
		return 0;
	}
}
 8004980:	bd08      	pop	{r3, pc}
 8004982:	bf00      	nop
 8004984:	f3af 8000 	nop.w
 8004988:	9999999a 	.word	0x9999999a
 800498c:	3fb99999 	.word	0x3fb99999
 8004990:	ae147ae1 	.word	0xae147ae1
 8004994:	3fcae147 	.word	0x3fcae147
 8004998:	cccccccc 	.word	0xcccccccc
 800499c:	4010cccc 	.word	0x4010cccc
 80049a0:	20000188 	.word	0x20000188
 80049a4:	20000190 	.word	0x20000190
 80049a8:	20000180 	.word	0x20000180
 80049ac:	20000178 	.word	0x20000178
 80049b0:	200001a4 	.word	0x200001a4
 80049b4:	200000e8 	.word	0x200000e8
 80049b8:	200001b8 	.word	0x200001b8
 80049bc:	200001a8 	.word	0x200001a8
 80049c0:	200001ac 	.word	0x200001ac
 80049c4:	200001b0 	.word	0x200001b0
 80049c8:	66666666 	.word	0x66666666
 80049cc:	3fd66666 	.word	0x3fd66666

080049d0 <Rotate>:

void Rotate()		// steruje kluczami wedlug odczytu HALLow
{
 80049d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t aux_hall = _HAL_Sense_Flag;
 80049d4:	4b39      	ldr	r3, [pc, #228]	; (8004abc <Rotate+0xec>)
 80049d6:	781f      	ldrb	r7, [r3, #0]

	if(_ADC_Joy_Read >= 500)		// obrot w lewo
 80049d8:	4b39      	ldr	r3, [pc, #228]	; (8004ac0 <Rotate+0xf0>)
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049e0:	d32d      	bcc.n	8004a3e <Rotate+0x6e>
	{
		for(int i = 0; i < 6; i++)						// iteracja po kolejnych stopniach obrotu
		{
			if(_BLDC_Steps_Left[i][0] == aux_hall)		// porownanie odczytu HALLow z tablica
 80049e2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8004ac4 <Rotate+0xf4>
						PWM_SetValue(j,0);			// wylaczenie PWM
					}
					else if(_BLDC_Steps_Left[i][j] == 1)
					{
						Set_Key(j,0);				// wylaczenie gornego klucza
						PWM_SetValue(j,_PWM_Duty);	// wlaczenie PWM
 80049e6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8004ac8 <Rotate+0xf8>
 80049ea:	2500      	movs	r5, #0
 80049ec:	46c1      	mov	r9, r8
			if(_BLDC_Steps_Left[i][0] == aux_hall)		// porownanie odczytu HALLow z tablica
 80049ee:	f855 3008 	ldr.w	r3, [r5, r8]
 80049f2:	42bb      	cmp	r3, r7
 80049f4:	d004      	beq.n	8004a00 <Rotate+0x30>
 80049f6:	3510      	adds	r5, #16
		for(int i = 0; i < 6; i++)						// iteracja po kolejnych stopniach obrotu
 80049f8:	2d60      	cmp	r5, #96	; 0x60
 80049fa:	d1f8      	bne.n	80049ee <Rotate+0x1e>
 80049fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a00:	2401      	movs	r4, #1
					if(_BLDC_Steps_Left[i][j] == 0)
 8004a02:	eb09 0b05 	add.w	fp, r9, r5
 8004a06:	f85b 6024 	ldr.w	r6, [fp, r4, lsl #2]
 8004a0a:	b92e      	cbnz	r6, 8004a18 <Rotate+0x48>
						Set_Key(j,0);				// wylaczenie gornego klucza
 8004a0c:	4631      	mov	r1, r6
					}
					else if(_BLDC_Steps_Left[i][j] == 2)
					{
						Set_Key(j,1);				// wlaczenie gornego klucza
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7ff fe9c 	bl	800474c <Set_Key>
						PWM_SetValue(j,0);			// wylaczenie PWM
 8004a14:	2100      	movs	r1, #0
 8004a16:	e007      	b.n	8004a28 <Rotate+0x58>
					else if(_BLDC_Steps_Left[i][j] == 1)
 8004a18:	2e01      	cmp	r6, #1
 8004a1a:	d10c      	bne.n	8004a36 <Rotate+0x66>
						Set_Key(j,0);				// wylaczenie gornego klucza
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f7ff fe94 	bl	800474c <Set_Key>
						PWM_SetValue(j,_PWM_Duty);	// wlaczenie PWM
 8004a24:	f8da 1000 	ldr.w	r1, [sl]
						PWM_SetValue(j,0);			// wylaczenie PWM
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff feab 	bl	8004784 <PWM_SetValue>
				for(int j = 1; j<4; j++)				// iteracja po fazach A B C
 8004a2e:	3401      	adds	r4, #1
 8004a30:	2c04      	cmp	r4, #4
 8004a32:	d1e8      	bne.n	8004a06 <Rotate+0x36>
 8004a34:	e7df      	b.n	80049f6 <Rotate+0x26>
					else if(_BLDC_Steps_Left[i][j] == 2)
 8004a36:	2e02      	cmp	r6, #2
 8004a38:	d1f9      	bne.n	8004a2e <Rotate+0x5e>
						Set_Key(j,1);				// wlaczenie gornego klucza
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	e7e7      	b.n	8004a0e <Rotate+0x3e>
					}
				}
			}
		}
	}
	else if(_ADC_Joy_Read <= 470)		// obrot w prawo
 8004a3e:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8004a42:	d82d      	bhi.n	8004aa0 <Rotate+0xd0>
	{
		for(int i = 0; i < 6; i++)						// iteracja po kolejnych stopniach obrotu
		{
			if(_BLDC_Steps_Right[i][0] == aux_hall)		// porownanie odczytu HALLow z tablica
 8004a44:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004acc <Rotate+0xfc>
						PWM_SetValue(j,0);			// wylaczenie PWM
					}
					else if(_BLDC_Steps_Right[i][j] == 1)
					{
						Set_Key(j,0);				// wylaczenie gornego klucza
						PWM_SetValue(j,_PWM_Duty);	// wlaczenie PWM
 8004a48:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8004ac8 <Rotate+0xf8>
 8004a4c:	2500      	movs	r5, #0
 8004a4e:	46c1      	mov	r9, r8
			if(_BLDC_Steps_Right[i][0] == aux_hall)		// porownanie odczytu HALLow z tablica
 8004a50:	f855 3008 	ldr.w	r3, [r5, r8]
 8004a54:	42bb      	cmp	r3, r7
 8004a56:	d004      	beq.n	8004a62 <Rotate+0x92>
 8004a58:	3510      	adds	r5, #16
		for(int i = 0; i < 6; i++)						// iteracja po kolejnych stopniach obrotu
 8004a5a:	2d60      	cmp	r5, #96	; 0x60
 8004a5c:	d1f8      	bne.n	8004a50 <Rotate+0x80>
 8004a5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a62:	2401      	movs	r4, #1
					if(_BLDC_Steps_Right[i][j] == 0)
 8004a64:	eb09 0b05 	add.w	fp, r9, r5
 8004a68:	f85b 6024 	ldr.w	r6, [fp, r4, lsl #2]
 8004a6c:	b92e      	cbnz	r6, 8004a7a <Rotate+0xaa>
						Set_Key(j,0);				// wylaczenie gornego klucza
 8004a6e:	4631      	mov	r1, r6
					}
					else if(_BLDC_Steps_Right[i][j] == 2)
					{
						Set_Key(j,1);				// wlaczenie gornego klucza
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7ff fe6b 	bl	800474c <Set_Key>
						PWM_SetValue(j,0);			// wylaczenie PWM
 8004a76:	2100      	movs	r1, #0
 8004a78:	e007      	b.n	8004a8a <Rotate+0xba>
					else if(_BLDC_Steps_Right[i][j] == 1)
 8004a7a:	2e01      	cmp	r6, #1
 8004a7c:	d10c      	bne.n	8004a98 <Rotate+0xc8>
						Set_Key(j,0);				// wylaczenie gornego klucza
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7ff fe63 	bl	800474c <Set_Key>
						PWM_SetValue(j,_PWM_Duty);	// wlaczenie PWM
 8004a86:	f8da 1000 	ldr.w	r1, [sl]
						PWM_SetValue(j,0);			// wylaczenie PWM
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7ff fe7a 	bl	8004784 <PWM_SetValue>
				for(int j = 1; j<4; j++)				// iteracja po fazach A B C
 8004a90:	3401      	adds	r4, #1
 8004a92:	2c04      	cmp	r4, #4
 8004a94:	d1e8      	bne.n	8004a68 <Rotate+0x98>
 8004a96:	e7df      	b.n	8004a58 <Rotate+0x88>
					else if(_BLDC_Steps_Right[i][j] == 2)
 8004a98:	2e02      	cmp	r6, #2
 8004a9a:	d1f9      	bne.n	8004a90 <Rotate+0xc0>
						Set_Key(j,1);				// wlaczenie gornego klucza
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	e7e7      	b.n	8004a70 <Rotate+0xa0>
 8004aa0:	2401      	movs	r4, #1
	}
	else
	{
		for(int j = 1; j<4; j++)		// iteracja po fazach A B C
		{
			Set_Key(j,0);				// wylaczenie gornego klucza
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f7ff fe51 	bl	800474c <Set_Key>
			PWM_SetValue(j,0);			// wylaczenie PWM
 8004aaa:	4620      	mov	r0, r4
 8004aac:	2100      	movs	r1, #0
		for(int j = 1; j<4; j++)		// iteracja po fazach A B C
 8004aae:	3401      	adds	r4, #1
			PWM_SetValue(j,0);			// wylaczenie PWM
 8004ab0:	f7ff fe68 	bl	8004784 <PWM_SetValue>
		for(int j = 1; j<4; j++)		// iteracja po fazach A B C
 8004ab4:	2c04      	cmp	r4, #4
 8004ab6:	d1f4      	bne.n	8004aa2 <Rotate+0xd2>
 8004ab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004abc:	2000019a 	.word	0x2000019a
 8004ac0:	20000198 	.word	0x20000198
 8004ac4:	20000028 	.word	0x20000028
 8004ac8:	200001a0 	.word	0x200001a0
 8004acc:	20000088 	.word	0x20000088

08004ad0 <Check_And_Rotate>:

	}
}

void Check_And_Rotate()
{
 8004ad0:	b508      	push	{r3, lr}
	_PI_Test = Regulacja_PI();
 8004ad2:	f7ff ff15 	bl	8004900 <Regulacja_PI>
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <Check_And_Rotate+0x68>)
 8004ad8:	4a18      	ldr	r2, [pc, #96]	; (8004b3c <Check_And_Rotate+0x6c>)
 8004ada:	6018      	str	r0, [r3, #0]

	if(_ADC_Joy_Read < 485)				// wychylenie galki w dol
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <Check_And_Rotate+0x70>)
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8004ae4:	d811      	bhi.n	8004b0a <Check_And_Rotate+0x3a>
	_PWM_Duty = ((100 - (_ADC_Joy_Read)/5)) /*- _PI_Test*/;
 8004ae6:	2105      	movs	r1, #5
 8004ae8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aec:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004af0:	6013      	str	r3, [r2, #0]
	else								// wychylenie galki w gore
	_PWM_Duty = ((2*((_ADC_Joy_Read-(_ADC_Resolution/8))/(_ADC_Resolution/4))*100)) /*- _PI_Test*/;	// regulacja PWM na podstawie joysticka

	ADC_VSense_Read();					// pomiar pradu kluczy
 8004af2:	f7ff fe81 	bl	80047f8 <ADC_VSense_Read>
	_HAL_Sense_Flag = HAL_Sense();		// odczyt HALL
 8004af6:	f7ff fee7 	bl	80048c8 <HAL_Sense>
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <Check_And_Rotate+0x74>)
 8004afc:	7018      	strb	r0, [r3, #0]
	ADC_Joy_Read();						// odczyt adc_joystick
 8004afe:	f7ff fecb 	bl	8004898 <ADC_Joy_Read>
	Rotate();							// ustawienie PWM i kluczy - obrot
}
 8004b02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Rotate();							// ustawienie PWM i kluczy - obrot
 8004b06:	f7ff bf63 	b.w	80049d0 <Rotate>
	_PWM_Duty = ((2*((_ADC_Joy_Read-(_ADC_Resolution/8))/(_ADC_Resolution/4))*100)) /*- _PI_Test*/;	// regulacja PWM na podstawie joysticka
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004b48 <Check_And_Rotate+0x78>
 8004b12:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004b4c <Check_And_Rotate+0x7c>
 8004b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004b22:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004b50 <Check_And_Rotate+0x80>
 8004b26:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004b2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b2e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b32:	ed82 7a00 	vstr	s14, [r2]
 8004b36:	e7dc      	b.n	8004af2 <Check_And_Rotate+0x22>
 8004b38:	2000019c 	.word	0x2000019c
 8004b3c:	200001a0 	.word	0x200001a0
 8004b40:	20000198 	.word	0x20000198
 8004b44:	2000019a 	.word	0x2000019a
 8004b48:	43fff000 	.word	0x43fff000
 8004b4c:	447ff000 	.word	0x447ff000
 8004b50:	42c80000 	.word	0x42c80000

08004b54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){	// funkcja operacji wykonywanych po zapelnieniu licznika

 if(htim->Instance == TIM7)
 8004b54:	6802      	ldr	r2, [r0, #0]
 8004b56:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_PeriodElapsedCallback+0x12>
 {
	HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_15);						// led blink
 8004b5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b60:	4802      	ldr	r0, [pc, #8]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8004b62:	f7fc bc78 	b.w	8001456 <HAL_GPIO_TogglePin>
 8004b66:	4770      	bx	lr
 8004b68:	40001400 	.word	0x40001400
 8004b6c:	40020c00 	.word	0x40020c00

08004b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b70:	b530      	push	{r4, r5, lr}
 8004b72:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b74:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <SystemClock_Config+0xbc>)
 8004b76:	2100      	movs	r1, #0
 8004b78:	9101      	str	r1, [sp, #4]
 8004b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
 8004b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b8c:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <SystemClock_Config+0xc0>)
 8004b8e:	9102      	str	r1, [sp, #8]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9e:	9302      	str	r3, [sp, #8]
 8004ba0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ba6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004ba8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bac:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004bb2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bb6:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bb8:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004bba:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bbc:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004bbe:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004bc0:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bc2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bc4:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004bc6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bc8:	f7fd fb46 	bl	8002258 <HAL_RCC_OscConfig>
 8004bcc:	b100      	cbz	r0, 8004bd0 <SystemClock_Config+0x60>
 8004bce:	e7fe      	b.n	8004bce <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bd0:	230f      	movs	r3, #15
 8004bd2:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bd8:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004bda:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004bdc:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004be2:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004be4:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004be6:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004be8:	f7fd fce6 	bl	80025b8 <HAL_RCC_ClockConfig>
 8004bec:	b100      	cbz	r0, 8004bf0 <SystemClock_Config+0x80>
 8004bee:	e7fe      	b.n	8004bee <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8004bf0:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bf2:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004bf4:	9405      	str	r4, [sp, #20]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004bf6:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8004bf8:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bfa:	f7fd fd8d 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8004bfe:	4604      	mov	r4, r0
 8004c00:	b100      	cbz	r0, 8004c04 <SystemClock_Config+0x94>
 8004c02:	e7fe      	b.n	8004c02 <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004c04:	f7fd fd72 	bl	80026ec <HAL_RCC_GetHCLKFreq>
 8004c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c10:	f7fc fb0e 	bl	8001230 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004c14:	2004      	movs	r0, #4
 8004c16:	f7fc fb21 	bl	800125c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c22:	f7fc fac5 	bl	80011b0 <HAL_NVIC_SetPriority>
}
 8004c26:	b019      	add	sp, #100	; 0x64
 8004c28:	bd30      	pop	{r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40007000 	.word	0x40007000

08004c34 <main>:
{	// -----------------------------MAIN-----------------------------------------
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b090      	sub	sp, #64	; 0x40
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c38:	2400      	movs	r4, #0
  HAL_Init();
 8004c3a:	f7fc f85b 	bl	8000cf4 <HAL_Init>
  SystemClock_Config();
 8004c3e:	f7ff ff97 	bl	8004b70 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c42:	4b9d      	ldr	r3, [pc, #628]	; (8004eb8 <main+0x284>)
 8004c44:	9401      	str	r4, [sp, #4]
 8004c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004c48:	489c      	ldr	r0, [pc, #624]	; (8004ebc <main+0x288>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004c4a:	4f9d      	ldr	r7, [pc, #628]	; (8004ec0 <main+0x28c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c4c:	f042 0210 	orr.w	r2, r2, #16
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
 8004c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c54:	f002 0210 	and.w	r2, r2, #16
 8004c58:	9201      	str	r2, [sp, #4]
 8004c5a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c5c:	9402      	str	r4, [sp, #8]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c60:	f042 0204 	orr.w	r2, r2, #4
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
 8004c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c68:	f002 0204 	and.w	r2, r2, #4
 8004c6c:	9202      	str	r2, [sp, #8]
 8004c6e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c70:	9403      	str	r4, [sp, #12]
 8004c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
 8004c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c7c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004c80:	9203      	str	r2, [sp, #12]
 8004c82:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c84:	9404      	str	r4, [sp, #16]
 8004c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c90:	f002 0201 	and.w	r2, r2, #1
 8004c94:	9204      	str	r2, [sp, #16]
 8004c96:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c98:	9405      	str	r4, [sp, #20]
 8004c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c9c:	f042 0202 	orr.w	r2, r2, #2
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca4:	f002 0202 	and.w	r2, r2, #2
 8004ca8:	9205      	str	r2, [sp, #20]
 8004caa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cac:	9406      	str	r4, [sp, #24]
 8004cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb0:	f042 0208 	orr.w	r2, r2, #8
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004cbe:	4622      	mov	r2, r4
 8004cc0:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cc2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8004cc4:	f7fc fbc2 	bl	800144c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4611      	mov	r1, r2
 8004ccc:	487d      	ldr	r0, [pc, #500]	; (8004ec4 <main+0x290>)
 8004cce:	f7fc fbbd 	bl	800144c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, klucz_1_Pin|klucz_2_Pin|klucz_3_Pin|LD6_Pin 
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	f648 6110 	movw	r1, #36368	; 0x8e10
 8004cd8:	487b      	ldr	r0, [pc, #492]	; (8004ec8 <main+0x294>)
 8004cda:	f7fc fbb7 	bl	800144c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cde:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004ce0:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004ce2:	a909      	add	r1, sp, #36	; 0x24
 8004ce4:	4875      	ldr	r0, [pc, #468]	; (8004ebc <main+0x288>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8004ce6:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce8:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cec:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8004cee:	f7fc fac7 	bl	8001280 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004cf2:	a909      	add	r1, sp, #36	; 0x24
 8004cf4:	4873      	ldr	r0, [pc, #460]	; (8004ec4 <main+0x290>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004cf6:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cf8:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cfc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfe:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d00:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004d02:	f7fc fabd 	bl	8001280 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004d06:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004d08:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0a:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004d0c:	486d      	ldr	r0, [pc, #436]	; (8004ec4 <main+0x290>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0e:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d12:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d14:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004d18:	f7fc fab2 	bl	8001280 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d1c:	a909      	add	r1, sp, #36	; 0x24
 8004d1e:	486b      	ldr	r0, [pc, #428]	; (8004ecc <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004d20:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = B1_Pin;
 8004d22:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004d26:	f7fc faab 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004d2a:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004d2c:	a909      	add	r1, sp, #36	; 0x24
 8004d2e:	4868      	ldr	r0, [pc, #416]	; (8004ed0 <main+0x29c>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8004d30:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d32:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004d36:	f7fc faa3 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAL_in_1_Pin HAL_in_2_Pin HAL_in_3_Pin */
  GPIO_InitStruct.Pin = HAL_in_1_Pin|HAL_in_2_Pin|HAL_in_3_Pin;
 8004d3a:	f44f 7360 	mov.w	r3, #896	; 0x380
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d3e:	a909      	add	r1, sp, #36	; 0x24
 8004d40:	485e      	ldr	r0, [pc, #376]	; (8004ebc <main+0x288>)
  GPIO_InitStruct.Pin = HAL_in_1_Pin|HAL_in_2_Pin|HAL_in_3_Pin;
 8004d42:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d44:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d46:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d48:	f7fc fa9a 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004d50:	a909      	add	r1, sp, #36	; 0x24
 8004d52:	485f      	ldr	r0, [pc, #380]	; (8004ed0 <main+0x29c>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004d54:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d56:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d58:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d5a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d5c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8004d60:	f7fc fa8e 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : klucz_1_Pin klucz_2_Pin klucz_3_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = klucz_1_Pin|klucz_2_Pin|klucz_3_Pin|LD6_Pin 
 8004d64:	f648 6310 	movw	r3, #36368	; 0x8e10
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d68:	a909      	add	r1, sp, #36	; 0x24
 8004d6a:	4857      	ldr	r0, [pc, #348]	; (8004ec8 <main+0x294>)
  GPIO_InitStruct.Pin = klucz_1_Pin|klucz_2_Pin|klucz_3_Pin|LD6_Pin 
 8004d6c:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d6e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d70:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d72:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d74:	f7fc fa84 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004d78:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004d7a:	a909      	add	r1, sp, #36	; 0x24
 8004d7c:	4852      	ldr	r0, [pc, #328]	; (8004ec8 <main+0x294>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8004d7e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d80:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d82:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8004d84:	f7fc fa7c 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004d88:	484c      	ldr	r0, [pc, #304]	; (8004ebc <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004d8a:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004d8c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8004d8e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	940b      	str	r4, [sp, #44]	; 0x2c
  hi2c1.Init.ClockSpeed = 100000;
 8004d92:	4f50      	ldr	r7, [pc, #320]	; (8004ed4 <main+0x2a0>)
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8004d94:	f7fc fa74 	bl	8001280 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8004d98:	484f      	ldr	r0, [pc, #316]	; (8004ed8 <main+0x2a4>)
  hi2c1.Init.ClockSpeed = 100000;
 8004d9a:	4b50      	ldr	r3, [pc, #320]	; (8004edc <main+0x2a8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004d9c:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8004d9e:	e880 0088 	stmia.w	r0, {r3, r7}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004da2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8004da6:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004da8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004daa:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004dac:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dae:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004db0:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004db2:	f7fc ff9d 	bl	8001cf0 <HAL_I2C_Init>
 8004db6:	b100      	cbz	r0, 8004dba <main+0x186>
 8004db8:	e7fe      	b.n	8004db8 <main+0x184>
  hi2s3.Instance = SPI3;
 8004dba:	4b49      	ldr	r3, [pc, #292]	; (8004ee0 <main+0x2ac>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004dbc:	4a49      	ldr	r2, [pc, #292]	; (8004ee4 <main+0x2b0>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8004dbe:	6098      	str	r0, [r3, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8004dc0:	f44f 7400 	mov.w	r4, #512	; 0x200
 8004dc4:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004dc8:	60d8      	str	r0, [r3, #12]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8004dca:	4a47      	ldr	r2, [pc, #284]	; (8004ee8 <main+0x2b4>)
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8004dcc:	6198      	str	r0, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8004dce:	61d8      	str	r0, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8004dd0:	6218      	str	r0, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004dd2:	4618      	mov	r0, r3
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8004dd4:	611c      	str	r4, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8004dd6:	615a      	str	r2, [r3, #20]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004dd8:	f7fc fffc 	bl	8001dd4 <HAL_I2S_Init>
 8004ddc:	b100      	cbz	r0, 8004de0 <main+0x1ac>
 8004dde:	e7fe      	b.n	8004dde <main+0x1aa>
  hspi1.Instance = SPI1;
 8004de0:	4b42      	ldr	r3, [pc, #264]	; (8004eec <main+0x2b8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004de2:	4943      	ldr	r1, [pc, #268]	; (8004ef0 <main+0x2bc>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004de4:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004de6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004dea:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dee:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004df0:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004df2:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df4:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004df6:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004df8:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dfa:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004dfc:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004dfe:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e00:	619c      	str	r4, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e04:	f7fd fda5 	bl	8002952 <HAL_SPI_Init>
 8004e08:	4607      	mov	r7, r0
 8004e0a:	b100      	cbz	r0, 8004e0e <main+0x1da>
 8004e0c:	e7fe      	b.n	8004e0c <main+0x1d8>
  MX_USB_HOST_Init();
 8004e0e:	f000 fb2d 	bl	800546c <MX_USB_HOST_Init>
  hadc1.Instance = ADC1;
 8004e12:	4c38      	ldr	r4, [pc, #224]	; (8004ef4 <main+0x2c0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8004e14:	4a38      	ldr	r2, [pc, #224]	; (8004ef8 <main+0x2c4>)
  hadc1.Init.ScanConvMode = ENABLE;
 8004e16:	6125      	str	r5, [r4, #16]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8004e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e1c:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
 8004e20:	e884 010c 	stmia.w	r4, {r2, r3, r8}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e24:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e26:	4b35      	ldr	r3, [pc, #212]	; (8004efc <main+0x2c8>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004e28:	61a5      	str	r5, [r4, #24]
  hadc1.Init.NbrOfConversion = 3;
 8004e2a:	f04f 0803 	mov.w	r8, #3
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004e2e:	6227      	str	r7, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e30:	62e7      	str	r7, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e32:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e34:	60e7      	str	r7, [r4, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004e36:	f8c4 801c 	str.w	r8, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004e3a:	6327      	str	r7, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e3c:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e3e:	f7fb ff99 	bl	8000d74 <HAL_ADC_Init>
 8004e42:	b100      	cbz	r0, 8004e46 <main+0x212>
 8004e44:	e7fe      	b.n	8004e44 <main+0x210>
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004e46:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e48:	a909      	add	r1, sp, #36	; 0x24
 8004e4a:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8004e4c:	9509      	str	r5, [sp, #36]	; 0x24
  sConfig.Rank = 1;
 8004e4e:	950a      	str	r5, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004e50:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e52:	f7fc f905 	bl	8001060 <HAL_ADC_ConfigChannel>
 8004e56:	b100      	cbz	r0, 8004e5a <main+0x226>
 8004e58:	e7fe      	b.n	8004e58 <main+0x224>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e5a:	a909      	add	r1, sp, #36	; 0x24
 8004e5c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8004e5e:	9609      	str	r6, [sp, #36]	; 0x24
  sConfig.Rank = 2;
 8004e60:	960a      	str	r6, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e62:	f7fc f8fd 	bl	8001060 <HAL_ADC_ConfigChannel>
 8004e66:	b100      	cbz	r0, 8004e6a <main+0x236>
 8004e68:	e7fe      	b.n	8004e68 <main+0x234>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e6a:	a909      	add	r1, sp, #36	; 0x24
 8004e6c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8004e6e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  sConfig.Rank = 3;
 8004e72:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e76:	f7fc f8f3 	bl	8001060 <HAL_ADC_ConfigChannel>
 8004e7a:	b100      	cbz	r0, 8004e7e <main+0x24a>
 8004e7c:	e7fe      	b.n	8004e7c <main+0x248>
  htim10.Instance = TIM10;
 8004e7e:	4b20      	ldr	r3, [pc, #128]	; (8004f00 <main+0x2cc>)
 8004e80:	4a20      	ldr	r2, [pc, #128]	; (8004f04 <main+0x2d0>)
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e82:	6098      	str	r0, [r3, #8]
  htim10.Init.Prescaler = 2-1;
 8004e84:	e883 0024 	stmia.w	r3, {r2, r5}
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e88:	6118      	str	r0, [r3, #16]
  htim10.Init.Period = 1000-1;
 8004e8a:	f240 32e7 	movw	r2, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004e8e:	4618      	mov	r0, r3
  htim10.Init.Period = 1000-1;
 8004e90:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004e92:	f7fe f831 	bl	8002ef8 <HAL_TIM_Base_Init>
 8004e96:	b100      	cbz	r0, 8004e9a <main+0x266>
 8004e98:	e7fe      	b.n	8004e98 <main+0x264>
  htim7.Instance = TIM7;
 8004e9a:	4c1b      	ldr	r4, [pc, #108]	; (8004f08 <main+0x2d4>)
  htim7.Init.Prescaler = 8400-1;
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <main+0x2d8>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9e:	60a0      	str	r0, [r4, #8]
  htim7.Init.Prescaler = 8400-1;
 8004ea0:	f242 0ccf 	movw	ip, #8399	; 0x20cf
 8004ea4:	e884 1008 	stmia.w	r4, {r3, ip}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004ea8:	4620      	mov	r0, r4
  htim7.Init.Period = 5000-1;
 8004eaa:	f241 3387 	movw	r3, #4999	; 0x1387
 8004eae:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004eb0:	f7fe f822 	bl	8002ef8 <HAL_TIM_Base_Init>
 8004eb4:	b360      	cbz	r0, 8004f10 <main+0x2dc>
 8004eb6:	e7fe      	b.n	8004eb6 <main+0x282>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	10120000 	.word	0x10120000
 8004ec4:	40020800 	.word	0x40020800
 8004ec8:	40020c00 	.word	0x40020c00
 8004ecc:	40020000 	.word	0x40020000
 8004ed0:	40020400 	.word	0x40020400
 8004ed4:	000186a0 	.word	0x000186a0
 8004ed8:	200002ac 	.word	0x200002ac
 8004edc:	40005400 	.word	0x40005400
 8004ee0:	20000418 	.word	0x20000418
 8004ee4:	40003c00 	.word	0x40003c00
 8004ee8:	00017700 	.word	0x00017700
 8004eec:	20000384 	.word	0x20000384
 8004ef0:	40013000 	.word	0x40013000
 8004ef4:	2000033c 	.word	0x2000033c
 8004ef8:	40012000 	.word	0x40012000
 8004efc:	0f000001 	.word	0x0f000001
 8004f00:	20000300 	.word	0x20000300
 8004f04:	40014400 	.word	0x40014400
 8004f08:	200003dc 	.word	0x200003dc
 8004f0c:	40001400 	.word	0x40001400
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f10:	9009      	str	r0, [sp, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f12:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004f14:	a909      	add	r1, sp, #36	; 0x24
 8004f16:	4620      	mov	r0, r4
 8004f18:	f7fe f8da 	bl	80030d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f1c:	b100      	cbz	r0, 8004f20 <main+0x2ec>
 8004f1e:	e7fe      	b.n	8004f1e <main+0x2ea>
  hspi2.Instance = SPI2;
 8004f20:	4849      	ldr	r0, [pc, #292]	; (8005048 <main+0x414>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f22:	4b4a      	ldr	r3, [pc, #296]	; (800504c <main+0x418>)
 8004f24:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f2c:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f30:	2300      	movs	r3, #0
 8004f32:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004f34:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f36:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f38:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004f3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f3e:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f40:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f42:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f44:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004f46:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004f48:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8004f4a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f4c:	f7fd fd01 	bl	8002952 <HAL_SPI_Init>
 8004f50:	b100      	cbz	r0, 8004f54 <main+0x320>
 8004f52:	e7fe      	b.n	8004f52 <main+0x31e>
  htim4.Instance = TIM4;
 8004f54:	4d3e      	ldr	r5, [pc, #248]	; (8005050 <main+0x41c>)
  htim4.Init.Prescaler = 2-1;
 8004f56:	4b3f      	ldr	r3, [pc, #252]	; (8005054 <main+0x420>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f58:	60a8      	str	r0, [r5, #8]
  htim4.Init.Prescaler = 2-1;
 8004f5a:	2701      	movs	r7, #1
 8004f5c:	e885 0088 	stmia.w	r5, {r3, r7}
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f60:	6128      	str	r0, [r5, #16]
  htim4.Init.Period = 1000-1;
 8004f62:	f240 33e7 	movw	r3, #999	; 0x3e7
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004f66:	4628      	mov	r0, r5
  htim4.Init.Period = 1000-1;
 8004f68:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004f6a:	f7fd ffdf 	bl	8002f2c <HAL_TIM_PWM_Init>
 8004f6e:	b100      	cbz	r0, 8004f72 <main+0x33e>
 8004f70:	e7fe      	b.n	8004f70 <main+0x33c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f72:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f74:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f76:	a907      	add	r1, sp, #28
 8004f78:	4628      	mov	r0, r5
 8004f7a:	f7fe f8a9 	bl	80030d0 <HAL_TIMEx_MasterConfigSynchronization>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	b100      	cbz	r0, 8004f84 <main+0x350>
 8004f82:	e7fe      	b.n	8004f82 <main+0x34e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f84:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8004f86:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f88:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f8a:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f8c:	a909      	add	r1, sp, #36	; 0x24
 8004f8e:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f90:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f92:	f7fe f815 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8004f96:	b100      	cbz	r0, 8004f9a <main+0x366>
 8004f98:	e7fe      	b.n	8004f98 <main+0x364>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f9a:	2204      	movs	r2, #4
 8004f9c:	a909      	add	r1, sp, #36	; 0x24
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f7fe f80e 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8004fa4:	b100      	cbz	r0, 8004fa8 <main+0x374>
 8004fa6:	e7fe      	b.n	8004fa6 <main+0x372>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004fa8:	2208      	movs	r2, #8
 8004faa:	a909      	add	r1, sp, #36	; 0x24
 8004fac:	4628      	mov	r0, r5
 8004fae:	f7fe f807 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	b100      	cbz	r0, 8004fb8 <main+0x384>
 8004fb6:	e7fe      	b.n	8004fb6 <main+0x382>
  HAL_TIM_MspPostInit(&htim4);
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f000 f9e9 	bl	8005390 <HAL_TIM_MspPostInit>
  hadc2.Instance = ADC2;
 8004fbe:	4c26      	ldr	r4, [pc, #152]	; (8005058 <main+0x424>)
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8004fc0:	4926      	ldr	r1, [pc, #152]	; (800505c <main+0x428>)
  hadc2.Init.ScanConvMode = DISABLE;
 8004fc2:	6126      	str	r6, [r4, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 8004fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004fcc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004fd0:	4620      	mov	r0, r4
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <main+0x42c>)
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004fd4:	61a6      	str	r6, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004fd6:	6226      	str	r6, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004fd8:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004fda:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004fdc:	60e6      	str	r6, [r4, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004fde:	61e7      	str	r7, [r4, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004fe0:	6326      	str	r6, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004fe2:	6167      	str	r7, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004fe4:	f7fb fec6 	bl	8000d74 <HAL_ADC_Init>
 8004fe8:	b100      	cbz	r0, 8004fec <main+0x3b8>
 8004fea:	e7fe      	b.n	8004fea <main+0x3b6>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004fec:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfig.Channel = ADC_CHANNEL_8;
 8004fee:	2608      	movs	r6, #8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ff0:	a909      	add	r1, sp, #36	; 0x24
 8004ff2:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 8004ff4:	970a      	str	r7, [sp, #40]	; 0x28
  sConfig.Channel = ADC_CHANNEL_8;
 8004ff6:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ff8:	f7fc f832 	bl	8001060 <HAL_ADC_ConfigChannel>
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	b100      	cbz	r0, 8005002 <main+0x3ce>
 8005000:	e7fe      	b.n	8005000 <main+0x3cc>
  HAL_TIM_Base_Start_IT(&htim7);		// uruchomienie timera TIM7 	(blink LED)
 8005002:	4818      	ldr	r0, [pc, #96]	; (8005064 <main+0x430>)
 8005004:	f7fd fe62 	bl	8002ccc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);		// uruchomienie timera TIM10	(PWM control)
 8005008:	4817      	ldr	r0, [pc, #92]	; (8005068 <main+0x434>)
 800500a:	f7fd fe5f 	bl	8002ccc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);			// PWM start channel 1
 800500e:	4639      	mov	r1, r7
 8005010:	4628      	mov	r0, r5
 8005012:	f7fe f843 	bl	800309c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);			// PWM start channel 2
 8005016:	2104      	movs	r1, #4
 8005018:	4628      	mov	r0, r5
 800501a:	f7fe f83f 	bl	800309c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);			// PWM start channel 3
 800501e:	4631      	mov	r1, r6
 8005020:	4628      	mov	r0, r5
 8005022:	f7fe f83b 	bl	800309c <HAL_TIM_PWM_Start>
  HAL_ADC_Start(&hadc1);				// uruchomienie konwersji ADC (PA1 ADC1_IN1)
 8005026:	4811      	ldr	r0, [pc, #68]	; (800506c <main+0x438>)
 8005028:	f7fb ff48 	bl	8000ebc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800502c:	4620      	mov	r0, r4
 800502e:	f7fb ff45 	bl	8000ebc <HAL_ADC_Start>
  odp = SPI2_SendRec(0xBA16);		// SPI2 test
 8005032:	f64b 2016 	movw	r0, #47638	; 0xba16
 8005036:	f7ff fbbb 	bl	80047b0 <SPI2_SendRec>
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <main+0x43c>)
 800503c:	8018      	strh	r0, [r3, #0]
	Check_And_Rotate();
 800503e:	f7ff fd47 	bl	8004ad0 <Check_And_Rotate>
    MX_USB_HOST_Process();
 8005042:	f000 fa29 	bl	8005498 <MX_USB_HOST_Process>
 8005046:	e7fa      	b.n	800503e <main+0x40a>
 8005048:	200001d0 	.word	0x200001d0
 800504c:	40003800 	.word	0x40003800
 8005050:	20000228 	.word	0x20000228
 8005054:	40000800 	.word	0x40000800
 8005058:	20000264 	.word	0x20000264
 800505c:	40012100 	.word	0x40012100
 8005060:	0f000001 	.word	0x0f000001
 8005064:	200003dc 	.word	0x200003dc
 8005068:	20000300 	.word	0x20000300
 800506c:	2000033c 	.word	0x2000033c
 8005070:	200001b4 	.word	0x200001b4

08005074 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8005074:	e7fe      	b.n	8005074 <_Error_Handler>
	...

08005078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005078:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507a:	4b22      	ldr	r3, [pc, #136]	; (8005104 <HAL_MspInit+0x8c>)
 800507c:	2400      	movs	r4, #0
 800507e:	9400      	str	r4, [sp, #0]
 8005080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005086:	645a      	str	r2, [r3, #68]	; 0x44
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800508e:	9200      	str	r2, [sp, #0]
 8005090:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005092:	9401      	str	r4, [sp, #4]
 8005094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005096:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80050a4:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80050a8:	f7fc f870 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80050ac:	4622      	mov	r2, r4
 80050ae:	4621      	mov	r1, r4
 80050b0:	f06f 000b 	mvn.w	r0, #11
 80050b4:	f7fc f87c 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80050b8:	4622      	mov	r2, r4
 80050ba:	4621      	mov	r1, r4
 80050bc:	f06f 000a 	mvn.w	r0, #10
 80050c0:	f7fc f876 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80050c4:	4622      	mov	r2, r4
 80050c6:	4621      	mov	r1, r4
 80050c8:	f06f 0009 	mvn.w	r0, #9
 80050cc:	f7fc f870 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80050d0:	4622      	mov	r2, r4
 80050d2:	4621      	mov	r1, r4
 80050d4:	f06f 0004 	mvn.w	r0, #4
 80050d8:	f7fc f86a 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80050dc:	4622      	mov	r2, r4
 80050de:	4621      	mov	r1, r4
 80050e0:	f06f 0003 	mvn.w	r0, #3
 80050e4:	f7fc f864 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80050e8:	4622      	mov	r2, r4
 80050ea:	4621      	mov	r1, r4
 80050ec:	f06f 0001 	mvn.w	r0, #1
 80050f0:	f7fc f85e 	bl	80011b0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80050f4:	4622      	mov	r2, r4
 80050f6:	4621      	mov	r1, r4
 80050f8:	f04f 30ff 	mov.w	r0, #4294967295
 80050fc:	f7fc f858 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005100:	b002      	add	sp, #8
 8005102:	bd10      	pop	{r4, pc}
 8005104:	40023800 	.word	0x40023800

08005108 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005108:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800510a:	6803      	ldr	r3, [r0, #0]
 800510c:	4a1c      	ldr	r2, [pc, #112]	; (8005180 <HAL_ADC_MspInit+0x78>)
 800510e:	4293      	cmp	r3, r2
{
 8005110:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 8005112:	d116      	bne.n	8005142 <HAL_ADC_MspInit+0x3a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005114:	2100      	movs	r1, #0
 8005116:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_ADC_MspInit+0x7c>)
 8005118:	9101      	str	r1, [sp, #4]
 800511a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800511c:	481a      	ldr	r0, [pc, #104]	; (8005188 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800511e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005122:	645a      	str	r2, [r3, #68]	; 0x44
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	9105      	str	r1, [sp, #20]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	9301      	str	r3, [sp, #4]
 800512e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005130:	230e      	movs	r3, #14
 8005132:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005134:	2303      	movs	r3, #3
 8005136:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005138:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513a:	f7fc f8a1 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800513e:	b009      	add	sp, #36	; 0x24
 8005140:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <HAL_ADC_MspInit+0x84>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d1fa      	bne.n	800513e <HAL_ADC_MspInit+0x36>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005148:	2400      	movs	r4, #0
 800514a:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <HAL_ADC_MspInit+0x7c>)
 800514c:	9402      	str	r4, [sp, #8]
 800514e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005150:	480d      	ldr	r0, [pc, #52]	; (8005188 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005156:	645a      	str	r2, [r3, #68]	; 0x44
 8005158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515a:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ADC2_CLK_ENABLE();
 800515c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005164:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005166:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005168:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800516a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800516c:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516e:	f7fc f887 	bl	8001280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005172:	2301      	movs	r3, #1
 8005174:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005176:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005178:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517a:	a903      	add	r1, sp, #12
 800517c:	4804      	ldr	r0, [pc, #16]	; (8005190 <HAL_ADC_MspInit+0x88>)
 800517e:	e7dc      	b.n	800513a <HAL_ADC_MspInit+0x32>
 8005180:	40012000 	.word	0x40012000
 8005184:	40023800 	.word	0x40023800
 8005188:	40020000 	.word	0x40020000
 800518c:	40012100 	.word	0x40012100
 8005190:	40020400 	.word	0x40020400

08005194 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005194:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8005196:	6802      	ldr	r2, [r0, #0]
 8005198:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_I2C_MspInit+0x48>)
 800519a:	429a      	cmp	r2, r3
{
 800519c:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 800519e:	d11a      	bne.n	80051d6 <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80051a0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80051a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a6:	2312      	movs	r3, #18
 80051a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051aa:	2301      	movs	r3, #1
 80051ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051ae:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b0:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b2:	eb0d 0103 	add.w	r1, sp, r3
 80051b6:	480a      	ldr	r0, [pc, #40]	; (80051e0 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051b8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ba:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051bc:	f7fc f860 	bl	8001280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_I2C_MspInit+0x50>)
 80051c2:	9400      	str	r4, [sp, #0]
 80051c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80051ca:	641a      	str	r2, [r3, #64]	; 0x40
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051d6:	b006      	add	sp, #24
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	bf00      	nop
 80051dc:	40005400 	.word	0x40005400
 80051e0:	40020400 	.word	0x40020400
 80051e4:	40023800 	.word	0x40023800

080051e8 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80051e8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI3)
 80051ea:	6802      	ldr	r2, [r0, #0]
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_I2S_MspInit+0x58>)
 80051ee:	429a      	cmp	r2, r3
{
 80051f0:	b086      	sub	sp, #24
  if(hi2s->Instance==SPI3)
 80051f2:	d123      	bne.n	800523c <HAL_I2S_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80051f4:	2400      	movs	r4, #0
 80051f6:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80051fa:	9400      	str	r4, [sp, #0]
 80051fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80051fe:	4811      	ldr	r0, [pc, #68]	; (8005244 <HAL_I2S_MspInit+0x5c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005208:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 800520a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005212:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005214:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005216:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005218:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800521a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800521c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005220:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005222:	f7fc f82d 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005226:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800522a:	a901      	add	r1, sp, #4
 800522c:	4806      	ldr	r0, [pc, #24]	; (8005248 <HAL_I2S_MspInit+0x60>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800522e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005230:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005232:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005234:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005236:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005238:	f7fc f822 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800523c:	b006      	add	sp, #24
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	40003c00 	.word	0x40003c00
 8005244:	40020000 	.word	0x40020000
 8005248:	40020800 	.word	0x40020800

0800524c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800524c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800524e:	6803      	ldr	r3, [r0, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <HAL_SPI_MspInit+0x90>)
 8005252:	4293      	cmp	r3, r2
{
 8005254:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 8005256:	d11a      	bne.n	800528e <HAL_SPI_MspInit+0x42>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005258:	2300      	movs	r3, #0
 800525a:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005262:	481f      	ldr	r0, [pc, #124]	; (80052e0 <HAL_SPI_MspInit+0x94>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005264:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8005268:	6451      	str	r1, [r2, #68]	; 0x44
 800526a:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526c:	9305      	str	r3, [sp, #20]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800526e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005272:	9201      	str	r2, [sp, #4]
 8005274:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005276:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005278:	22e0      	movs	r2, #224	; 0xe0
 800527a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800527c:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527e:	2202      	movs	r2, #2
 8005280:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005282:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005284:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005286:	f7fb fffb 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800528a:	b009      	add	sp, #36	; 0x24
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hspi->Instance==SPI2)
 800528e:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <HAL_SPI_MspInit+0x98>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d1fa      	bne.n	800528a <HAL_SPI_MspInit+0x3e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005294:	2400      	movs	r4, #0
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <HAL_SPI_MspInit+0x9c>)
 8005298:	9402      	str	r4, [sp, #8]
 800529a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800529c:	4813      	ldr	r0, [pc, #76]	; (80052ec <HAL_SPI_MspInit+0xa0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800529e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a6:	9405      	str	r4, [sp, #20]
    __HAL_RCC_SPI2_CLK_ENABLE();
 80052a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ac:	9302      	str	r3, [sp, #8]
 80052ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052b2:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052b4:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052b6:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052bc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052be:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052c0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052c2:	f7fb ffdd 	bl	8001280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80052c6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80052ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052cc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d0:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052d2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d4:	a903      	add	r1, sp, #12
 80052d6:	4806      	ldr	r0, [pc, #24]	; (80052f0 <HAL_SPI_MspInit+0xa4>)
 80052d8:	e7d5      	b.n	8005286 <HAL_SPI_MspInit+0x3a>
 80052da:	bf00      	nop
 80052dc:	40013000 	.word	0x40013000
 80052e0:	40020000 	.word	0x40020000
 80052e4:	40003800 	.word	0x40003800
 80052e8:	40023800 	.word	0x40023800
 80052ec:	40020800 	.word	0x40020800
 80052f0:	40020400 	.word	0x40020400

080052f4 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM4)
 80052f4:	6802      	ldr	r2, [r0, #0]
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_TIM_PWM_MspInit+0x28>)
 80052f8:	429a      	cmp	r2, r3
{
 80052fa:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM4)
 80052fc:	d10b      	bne.n	8005316 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_TIM_PWM_MspInit+0x2c>)
 8005304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005306:	f042 0204 	orr.w	r2, r2, #4
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005316:	b002      	add	sp, #8
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40000800 	.word	0x40000800
 8005320:	40023800 	.word	0x40023800

08005324 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005324:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM7)
 8005326:	6803      	ldr	r3, [r0, #0]
 8005328:	4a16      	ldr	r2, [pc, #88]	; (8005384 <HAL_TIM_Base_MspInit+0x60>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d115      	bne.n	800535a <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800532e:	2200      	movs	r2, #0
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <HAL_TIM_Base_MspInit+0x64>)
 8005332:	9200      	str	r2, [sp, #0]
 8005334:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005336:	f041 0120 	orr.w	r1, r1, #32
 800533a:	6419      	str	r1, [r3, #64]	; 0x40
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f003 0320 	and.w	r3, r3, #32
 8005342:	9300      	str	r3, [sp, #0]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005344:	2037      	movs	r0, #55	; 0x37
 8005346:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005348:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800534a:	f7fb ff31 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800534e:	2037      	movs	r0, #55	; 0x37
  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005350:	f7fb ff62 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005354:	b003      	add	sp, #12
 8005356:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM10)
 800535a:	4a0c      	ldr	r2, [pc, #48]	; (800538c <HAL_TIM_Base_MspInit+0x68>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d1f9      	bne.n	8005354 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005360:	2200      	movs	r2, #0
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <HAL_TIM_Base_MspInit+0x64>)
 8005364:	9201      	str	r2, [sp, #4]
 8005366:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005368:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800536c:	6459      	str	r1, [r3, #68]	; 0x44
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005376:	2019      	movs	r0, #25
 8005378:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 800537a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800537c:	f7fb ff18 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005380:	2019      	movs	r0, #25
 8005382:	e7e5      	b.n	8005350 <HAL_TIM_Base_MspInit+0x2c>
 8005384:	40001400 	.word	0x40001400
 8005388:	40023800 	.word	0x40023800
 800538c:	40014400 	.word	0x40014400

08005390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM4)
 8005392:	6802      	ldr	r2, [r0, #0]
 8005394:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_TIM_MspPostInit+0x2c>)
 8005396:	429a      	cmp	r2, r3
 8005398:	d10c      	bne.n	80053b4 <HAL_TIM_MspPostInit+0x24>
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800539a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80053a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053a2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a4:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053a6:	4806      	ldr	r0, [pc, #24]	; (80053c0 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053aa:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ac:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053ae:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053b0:	f7fb ff66 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80053b4:	b007      	add	sp, #28
 80053b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80053ba:	bf00      	nop
 80053bc:	40000800 	.word	0x40000800
 80053c0:	40020c00 	.word	0x40020c00

080053c4 <SVC_Handler>:
 80053c4:	4770      	bx	lr

080053c6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80053c6:	4770      	bx	lr

080053c8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80053c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053ca:	f7fb fcad 	bl	8000d28 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80053d2:	f7fb bf50 	b.w	8001276 <HAL_SYSTICK_IRQHandler>
	...

080053d8 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80053d8:	4801      	ldr	r0, [pc, #4]	; (80053e0 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80053da:	f7fd bc86 	b.w	8002cea <HAL_TIM_IRQHandler>
 80053de:	bf00      	nop
 80053e0:	20000300 	.word	0x20000300

080053e4 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80053e4:	4801      	ldr	r0, [pc, #4]	; (80053ec <TIM7_IRQHandler+0x8>)
 80053e6:	f7fd bc80 	b.w	8002cea <HAL_TIM_IRQHandler>
 80053ea:	bf00      	nop
 80053ec:	200003dc 	.word	0x200003dc

080053f0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80053f0:	4801      	ldr	r0, [pc, #4]	; (80053f8 <OTG_FS_IRQHandler+0x8>)
 80053f2:	f7fc b933 	b.w	800165c <HAL_HCD_IRQHandler>
 80053f6:	bf00      	nop
 80053f8:	20000828 	.word	0x20000828

080053fc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053fc:	490f      	ldr	r1, [pc, #60]	; (800543c <SystemInit+0x40>)
 80053fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005402:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800540a:	4b0d      	ldr	r3, [pc, #52]	; (8005440 <SystemInit+0x44>)
 800540c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800540e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005416:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800541e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005422:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005424:	4a07      	ldr	r2, [pc, #28]	; (8005444 <SystemInit+0x48>)
 8005426:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800542e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005430:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005432:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005436:	608b      	str	r3, [r1, #8]
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000ed00 	.word	0xe000ed00
 8005440:	40023800 	.word	0x40023800
 8005444:	24003010 	.word	0x24003010

08005448 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8005448:	2904      	cmp	r1, #4
 800544a:	d00a      	beq.n	8005462 <USBH_UserProcess+0x1a>
 800544c:	2905      	cmp	r1, #5
 800544e:	d004      	beq.n	800545a <USBH_UserProcess+0x12>
 8005450:	2902      	cmp	r1, #2
 8005452:	d105      	bne.n	8005460 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <USBH_UserProcess+0x20>)
 8005456:	7019      	strb	r1, [r3, #0]
  break;
 8005458:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800545a:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800545c:	4b02      	ldr	r3, [pc, #8]	; (8005468 <USBH_UserProcess+0x20>)
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	4770      	bx	lr
 8005462:	2201      	movs	r2, #1
 8005464:	e7fa      	b.n	800545c <USBH_UserProcess+0x14>
 8005466:	bf00      	nop
 8005468:	200001bc 	.word	0x200001bc

0800546c <MX_USB_HOST_Init>:
{
 800546c:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 800546e:	4c07      	ldr	r4, [pc, #28]	; (800548c <MX_USB_HOST_Init+0x20>)
 8005470:	4907      	ldr	r1, [pc, #28]	; (8005490 <MX_USB_HOST_Init+0x24>)
 8005472:	2201      	movs	r2, #1
 8005474:	4620      	mov	r0, r4
 8005476:	f7fe fd09 	bl	8003e8c <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 800547a:	4620      	mov	r0, r4
 800547c:	4905      	ldr	r1, [pc, #20]	; (8005494 <MX_USB_HOST_Init+0x28>)
 800547e:	f7fe fd1c 	bl	8003eba <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 8005482:	4620      	mov	r0, r4
}
 8005484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8005488:	f7fe bd4a 	b.w	8003f20 <USBH_Start>
 800548c:	20000460 	.word	0x20000460
 8005490:	08005449 	.word	0x08005449
 8005494:	20000008 	.word	0x20000008

08005498 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <MX_USB_HOST_Process+0x8>)
 800549a:	f7fe bd4b 	b.w	8003f34 <USBH_Process>
 800549e:	bf00      	nop
 80054a0:	20000460 	.word	0x20000460

080054a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80054a4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 80054a6:	6803      	ldr	r3, [r0, #0]
 80054a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80054ac:	b086      	sub	sp, #24
  if(hcdHandle->Instance==USB_OTG_FS)
 80054ae:	d12d      	bne.n	800550c <HAL_HCD_MspInit+0x68>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054b0:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80054b2:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80054b6:	a901      	add	r1, sp, #4
 80054b8:	4815      	ldr	r0, [pc, #84]	; (8005510 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80054ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054bc:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054be:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80054c0:	f7fb fede 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80054c4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80054c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ce:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80054d0:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054d2:	480f      	ldr	r0, [pc, #60]	; (8005510 <HAL_HCD_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80054d4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054da:	f7fb fed1 	bl	8001280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <HAL_HCD_MspInit+0x70>)
 80054e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054e6:	635a      	str	r2, [r3, #52]	; 0x34
 80054e8:	9400      	str	r4, [sp, #0]
 80054ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
 80054f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f8:	9300      	str	r3, [sp, #0]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80054fa:	2043      	movs	r0, #67	; 0x43
 80054fc:	4622      	mov	r2, r4
 80054fe:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005500:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005502:	f7fb fe55 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005506:	2043      	movs	r0, #67	; 0x43
 8005508:	f7fb fe86 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800550c:	b006      	add	sp, #24
 800550e:	bd10      	pop	{r4, pc}
 8005510:	40020000 	.word	0x40020000
 8005514:	40023800 	.word	0x40023800

08005518 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8005518:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800551c:	f7fe be27 	b.w	800416e <USBH_LL_IncTimer>

08005520 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8005520:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8005524:	f7fe be31 	b.w	800418a <USBH_LL_Connect>

08005528 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8005528:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 800552c:	f7fe be40 	b.w	80041b0 <USBH_LL_Disconnect>

08005530 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005530:	4770      	bx	lr
	...

08005534 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8005534:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005536:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800553a:	2b01      	cmp	r3, #1
{
 800553c:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 800553e:	d11e      	bne.n	800557e <USBH_LL_Init+0x4a>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8005540:	4810      	ldr	r0, [pc, #64]	; (8005584 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;
 8005542:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005546:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800554a:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800554c:	2308      	movs	r3, #8
 800554e:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005550:	2303      	movs	r3, #3
 8005552:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005554:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005556:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.pData = phost;
 8005558:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800555c:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800555e:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005560:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005562:	f7fb ffbf 	bl	80014e4 <HAL_HCD_Init>
 8005566:	b118      	cbz	r0, 8005570 <USBH_LL_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005568:	21e2      	movs	r1, #226	; 0xe2
 800556a:	4807      	ldr	r0, [pc, #28]	; (8005588 <USBH_LL_Init+0x54>)
 800556c:	f7ff fd82 	bl	8005074 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005570:	4804      	ldr	r0, [pc, #16]	; (8005584 <USBH_LL_Init+0x50>)
 8005572:	f7fc fbb7 	bl	8001ce4 <HAL_HCD_GetCurrentFrame>
 8005576:	4601      	mov	r1, r0
 8005578:	4620      	mov	r0, r4
 800557a:	f7fe fdf5 	bl	8004168 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800557e:	2000      	movs	r0, #0
 8005580:	bd10      	pop	{r4, pc}
 8005582:	bf00      	nop
 8005584:	20000828 	.word	0x20000828
 8005588:	0800596b 	.word	0x0800596b

0800558c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800558c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800558e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005592:	f7fc fb71 	bl	8001c78 <HAL_HCD_Start>
 8005596:	2803      	cmp	r0, #3
 8005598:	bf9a      	itte	ls
 800559a:	4b02      	ldrls	r3, [pc, #8]	; (80055a4 <USBH_LL_Start+0x18>)
 800559c:	5c18      	ldrbls	r0, [r3, r0]
 800559e:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80055a0:	bd08      	pop	{r3, pc}
 80055a2:	bf00      	nop
 80055a4:	08005967 	.word	0x08005967

080055a8 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80055a8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 80055aa:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 80055ae:	f7fc fb79 	bl	8001ca4 <HAL_HCD_Stop>
 80055b2:	2803      	cmp	r0, #3
 80055b4:	bf9a      	itte	ls
 80055b6:	4b02      	ldrls	r3, [pc, #8]	; (80055c0 <USBH_LL_Stop+0x18>)
 80055b8:	5c18      	ldrbls	r0, [r3, r0]
 80055ba:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80055bc:	bd08      	pop	{r3, pc}
 80055be:	bf00      	nop
 80055c0:	08005967 	.word	0x08005967

080055c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80055c4:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80055c6:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 80055ca:	f7fc fb8e 	bl	8001cea <HAL_HCD_GetCurrentSpeed>
 80055ce:	2802      	cmp	r0, #2
 80055d0:	bf9a      	itte	ls
 80055d2:	4b02      	ldrls	r3, [pc, #8]	; (80055dc <USBH_LL_GetSpeed+0x18>)
 80055d4:	5c18      	ldrbls	r0, [r3, r0]
 80055d6:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80055d8:	bd08      	pop	{r3, pc}
 80055da:	bf00      	nop
 80055dc:	08005964 	.word	0x08005964

080055e0 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80055e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80055e2:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 80055e6:	f7fc fb6f 	bl	8001cc8 <HAL_HCD_ResetPort>
 80055ea:	2803      	cmp	r0, #3
 80055ec:	bf9a      	itte	ls
 80055ee:	4b02      	ldrls	r3, [pc, #8]	; (80055f8 <USBH_LL_ResetPort+0x18>)
 80055f0:	5c18      	ldrbls	r0, [r3, r0]
 80055f2:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80055f4:	bd08      	pop	{r3, pc}
 80055f6:	bf00      	nop
 80055f8:	08005967 	.word	0x08005967

080055fc <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80055fc:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005600:	f7fc bb6b 	b.w	8001cda <HAL_HCD_HC_GetXferCount>

08005604 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005604:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005606:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800560a:	9402      	str	r4, [sp, #8]
 800560c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8005610:	9401      	str	r4, [sp, #4]
 8005612:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005616:	9400      	str	r4, [sp, #0]
 8005618:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800561c:	f7fb ff1f 	bl	800145e <HAL_HCD_HC_Init>
 8005620:	2803      	cmp	r0, #3
 8005622:	bf9a      	itte	ls
 8005624:	4b02      	ldrls	r3, [pc, #8]	; (8005630 <USBH_LL_OpenPipe+0x2c>)
 8005626:	5c18      	ldrbls	r0, [r3, r0]
 8005628:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800562a:	b004      	add	sp, #16
 800562c:	bd10      	pop	{r4, pc}
 800562e:	bf00      	nop
 8005630:	08005967 	.word	0x08005967

08005634 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005634:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005636:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800563a:	f7fb ff41 	bl	80014c0 <HAL_HCD_HC_Halt>
 800563e:	2803      	cmp	r0, #3
 8005640:	bf9a      	itte	ls
 8005642:	4b02      	ldrls	r3, [pc, #8]	; (800564c <USBH_LL_ClosePipe+0x18>)
 8005644:	5c18      	ldrbls	r0, [r3, r0]
 8005646:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8005648:	bd08      	pop	{r3, pc}
 800564a:	bf00      	nop
 800564c:	08005967 	.word	0x08005967

08005650 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8005650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8005652:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8005656:	9403      	str	r4, [sp, #12]
 8005658:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800565c:	9402      	str	r4, [sp, #8]
 800565e:	9c07      	ldr	r4, [sp, #28]
 8005660:	9401      	str	r4, [sp, #4]
 8005662:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8005666:	9400      	str	r4, [sp, #0]
 8005668:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800566c:	f7fb ff76 	bl	800155c <HAL_HCD_HC_SubmitRequest>
 8005670:	2803      	cmp	r0, #3
 8005672:	bf9a      	itte	ls
 8005674:	4b02      	ldrls	r3, [pc, #8]	; (8005680 <USBH_LL_SubmitURB+0x30>)
 8005676:	5c18      	ldrbls	r0, [r3, r0]
 8005678:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800567a:	b004      	add	sp, #16
 800567c:	bd10      	pop	{r4, pc}
 800567e:	bf00      	nop
 8005680:	08005967 	.word	0x08005967

08005684 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8005684:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8005688:	f7fc bb21 	b.w	8001cce <HAL_HCD_HC_GetURBState>

0800568c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800568c:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800568e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8005692:	2b01      	cmp	r3, #1
 8005694:	d102      	bne.n	800569c <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8005696:	4608      	mov	r0, r1
 8005698:	f000 f816 	bl	80056c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800569c:	20c8      	movs	r0, #200	; 0xc8
 800569e:	f7fb fb55 	bl	8000d4c <HAL_Delay>
  return USBH_OK;
}
 80056a2:	2000      	movs	r0, #0
 80056a4:	bd08      	pop	{r3, pc}

080056a6 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80056a6:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0

  if(pHandle->hc[pipe].ep_is_in)
 80056aa:	2328      	movs	r3, #40	; 0x28
 80056ac:	fb03 0101 	mla	r1, r3, r1, r0
 80056b0:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80056b4:	b11b      	cbz	r3, 80056be <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80056b6:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 80056ba:	2000      	movs	r0, #0
 80056bc:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 80056be:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 80056c2:	e7fa      	b.n	80056ba <USBH_LL_SetToggle+0x14>

080056c4 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80056c4:	f7fb bb42 	b.w	8000d4c <HAL_Delay>

080056c8 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80056c8:	fab0 f280 	clz	r2, r0
 80056cc:	0952      	lsrs	r2, r2, #5
 80056ce:	2101      	movs	r1, #1
 80056d0:	4801      	ldr	r0, [pc, #4]	; (80056d8 <MX_DriverVbusFS+0x10>)
 80056d2:	f7fb bebb 	b.w	800144c <HAL_GPIO_WritePin>
 80056d6:	bf00      	nop
 80056d8:	40020800 	.word	0x40020800

080056dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80056dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056e2:	e003      	b.n	80056ec <LoopCopyDataInit>

080056e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056ea:	3104      	adds	r1, #4

080056ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056ec:	480b      	ldr	r0, [pc, #44]	; (800571c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056f4:	d3f6      	bcc.n	80056e4 <CopyDataInit>
  ldr  r2, =_sbss
 80056f6:	4a0b      	ldr	r2, [pc, #44]	; (8005724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056f8:	e002      	b.n	8005700 <LoopFillZerobss>

080056fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056fc:	f842 3b04 	str.w	r3, [r2], #4

08005700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005704:	d3f9      	bcc.n	80056fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005706:	f7ff fe79 	bl	80053fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800570a:	f000 f811 	bl	8005730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800570e:	f7ff fa91 	bl	8004c34 <main>
  bx  lr    
 8005712:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005714:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005718:	08005990 	.word	0x08005990
  ldr  r0, =_sdata
 800571c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005720:	20000154 	.word	0x20000154
  ldr  r2, =_sbss
 8005724:	20000158 	.word	0x20000158
  ldr  r3, = _ebss
 8005728:	20000ac4 	.word	0x20000ac4

0800572c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800572c:	e7fe      	b.n	800572c <ADC_IRQHandler>
	...

08005730 <__libc_init_array>:
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4e0d      	ldr	r6, [pc, #52]	; (8005768 <__libc_init_array+0x38>)
 8005734:	4c0d      	ldr	r4, [pc, #52]	; (800576c <__libc_init_array+0x3c>)
 8005736:	1ba4      	subs	r4, r4, r6
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	2500      	movs	r5, #0
 800573c:	42a5      	cmp	r5, r4
 800573e:	d109      	bne.n	8005754 <__libc_init_array+0x24>
 8005740:	4e0b      	ldr	r6, [pc, #44]	; (8005770 <__libc_init_array+0x40>)
 8005742:	4c0c      	ldr	r4, [pc, #48]	; (8005774 <__libc_init_array+0x44>)
 8005744:	f000 f8f4 	bl	8005930 <_init>
 8005748:	1ba4      	subs	r4, r4, r6
 800574a:	10a4      	asrs	r4, r4, #2
 800574c:	2500      	movs	r5, #0
 800574e:	42a5      	cmp	r5, r4
 8005750:	d105      	bne.n	800575e <__libc_init_array+0x2e>
 8005752:	bd70      	pop	{r4, r5, r6, pc}
 8005754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005758:	4798      	blx	r3
 800575a:	3501      	adds	r5, #1
 800575c:	e7ee      	b.n	800573c <__libc_init_array+0xc>
 800575e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005762:	4798      	blx	r3
 8005764:	3501      	adds	r5, #1
 8005766:	e7f2      	b.n	800574e <__libc_init_array+0x1e>
 8005768:	08005988 	.word	0x08005988
 800576c:	08005988 	.word	0x08005988
 8005770:	08005988 	.word	0x08005988
 8005774:	0800598c 	.word	0x0800598c

08005778 <malloc>:
 8005778:	4b02      	ldr	r3, [pc, #8]	; (8005784 <malloc+0xc>)
 800577a:	4601      	mov	r1, r0
 800577c:	6818      	ldr	r0, [r3, #0]
 800577e:	f000 b859 	b.w	8005834 <_malloc_r>
 8005782:	bf00      	nop
 8005784:	200000f0 	.word	0x200000f0

08005788 <free>:
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <free+0xc>)
 800578a:	4601      	mov	r1, r0
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	f000 b803 	b.w	8005798 <_free_r>
 8005792:	bf00      	nop
 8005794:	200000f0 	.word	0x200000f0

08005798 <_free_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4605      	mov	r5, r0
 800579c:	2900      	cmp	r1, #0
 800579e:	d045      	beq.n	800582c <_free_r+0x94>
 80057a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a4:	1f0c      	subs	r4, r1, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfb8      	it	lt
 80057aa:	18e4      	addlt	r4, r4, r3
 80057ac:	f000 f8b0 	bl	8005910 <__malloc_lock>
 80057b0:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <_free_r+0x98>)
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	4610      	mov	r0, r2
 80057b6:	b933      	cbnz	r3, 80057c6 <_free_r+0x2e>
 80057b8:	6063      	str	r3, [r4, #4]
 80057ba:	6014      	str	r4, [r2, #0]
 80057bc:	4628      	mov	r0, r5
 80057be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c2:	f000 b8a6 	b.w	8005912 <__malloc_unlock>
 80057c6:	42a3      	cmp	r3, r4
 80057c8:	d90c      	bls.n	80057e4 <_free_r+0x4c>
 80057ca:	6821      	ldr	r1, [r4, #0]
 80057cc:	1862      	adds	r2, r4, r1
 80057ce:	4293      	cmp	r3, r2
 80057d0:	bf04      	itt	eq
 80057d2:	681a      	ldreq	r2, [r3, #0]
 80057d4:	685b      	ldreq	r3, [r3, #4]
 80057d6:	6063      	str	r3, [r4, #4]
 80057d8:	bf04      	itt	eq
 80057da:	1852      	addeq	r2, r2, r1
 80057dc:	6022      	streq	r2, [r4, #0]
 80057de:	6004      	str	r4, [r0, #0]
 80057e0:	e7ec      	b.n	80057bc <_free_r+0x24>
 80057e2:	4613      	mov	r3, r2
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	b10a      	cbz	r2, 80057ec <_free_r+0x54>
 80057e8:	42a2      	cmp	r2, r4
 80057ea:	d9fa      	bls.n	80057e2 <_free_r+0x4a>
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	1858      	adds	r0, r3, r1
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	d10b      	bne.n	800580c <_free_r+0x74>
 80057f4:	6820      	ldr	r0, [r4, #0]
 80057f6:	4401      	add	r1, r0
 80057f8:	1858      	adds	r0, r3, r1
 80057fa:	4282      	cmp	r2, r0
 80057fc:	6019      	str	r1, [r3, #0]
 80057fe:	d1dd      	bne.n	80057bc <_free_r+0x24>
 8005800:	6810      	ldr	r0, [r2, #0]
 8005802:	6852      	ldr	r2, [r2, #4]
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	4401      	add	r1, r0
 8005808:	6019      	str	r1, [r3, #0]
 800580a:	e7d7      	b.n	80057bc <_free_r+0x24>
 800580c:	d902      	bls.n	8005814 <_free_r+0x7c>
 800580e:	230c      	movs	r3, #12
 8005810:	602b      	str	r3, [r5, #0]
 8005812:	e7d3      	b.n	80057bc <_free_r+0x24>
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	1821      	adds	r1, r4, r0
 8005818:	428a      	cmp	r2, r1
 800581a:	bf04      	itt	eq
 800581c:	6811      	ldreq	r1, [r2, #0]
 800581e:	6852      	ldreq	r2, [r2, #4]
 8005820:	6062      	str	r2, [r4, #4]
 8005822:	bf04      	itt	eq
 8005824:	1809      	addeq	r1, r1, r0
 8005826:	6021      	streq	r1, [r4, #0]
 8005828:	605c      	str	r4, [r3, #4]
 800582a:	e7c7      	b.n	80057bc <_free_r+0x24>
 800582c:	bd38      	pop	{r3, r4, r5, pc}
 800582e:	bf00      	nop
 8005830:	200001c0 	.word	0x200001c0

08005834 <_malloc_r>:
 8005834:	b570      	push	{r4, r5, r6, lr}
 8005836:	1ccd      	adds	r5, r1, #3
 8005838:	f025 0503 	bic.w	r5, r5, #3
 800583c:	3508      	adds	r5, #8
 800583e:	2d0c      	cmp	r5, #12
 8005840:	bf38      	it	cc
 8005842:	250c      	movcc	r5, #12
 8005844:	2d00      	cmp	r5, #0
 8005846:	4606      	mov	r6, r0
 8005848:	db01      	blt.n	800584e <_malloc_r+0x1a>
 800584a:	42a9      	cmp	r1, r5
 800584c:	d903      	bls.n	8005856 <_malloc_r+0x22>
 800584e:	230c      	movs	r3, #12
 8005850:	6033      	str	r3, [r6, #0]
 8005852:	2000      	movs	r0, #0
 8005854:	bd70      	pop	{r4, r5, r6, pc}
 8005856:	f000 f85b 	bl	8005910 <__malloc_lock>
 800585a:	4a23      	ldr	r2, [pc, #140]	; (80058e8 <_malloc_r+0xb4>)
 800585c:	6814      	ldr	r4, [r2, #0]
 800585e:	4621      	mov	r1, r4
 8005860:	b991      	cbnz	r1, 8005888 <_malloc_r+0x54>
 8005862:	4c22      	ldr	r4, [pc, #136]	; (80058ec <_malloc_r+0xb8>)
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	b91b      	cbnz	r3, 8005870 <_malloc_r+0x3c>
 8005868:	4630      	mov	r0, r6
 800586a:	f000 f841 	bl	80058f0 <_sbrk_r>
 800586e:	6020      	str	r0, [r4, #0]
 8005870:	4629      	mov	r1, r5
 8005872:	4630      	mov	r0, r6
 8005874:	f000 f83c 	bl	80058f0 <_sbrk_r>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d126      	bne.n	80058ca <_malloc_r+0x96>
 800587c:	230c      	movs	r3, #12
 800587e:	6033      	str	r3, [r6, #0]
 8005880:	4630      	mov	r0, r6
 8005882:	f000 f846 	bl	8005912 <__malloc_unlock>
 8005886:	e7e4      	b.n	8005852 <_malloc_r+0x1e>
 8005888:	680b      	ldr	r3, [r1, #0]
 800588a:	1b5b      	subs	r3, r3, r5
 800588c:	d41a      	bmi.n	80058c4 <_malloc_r+0x90>
 800588e:	2b0b      	cmp	r3, #11
 8005890:	d90f      	bls.n	80058b2 <_malloc_r+0x7e>
 8005892:	600b      	str	r3, [r1, #0]
 8005894:	50cd      	str	r5, [r1, r3]
 8005896:	18cc      	adds	r4, r1, r3
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f83a 	bl	8005912 <__malloc_unlock>
 800589e:	f104 000b 	add.w	r0, r4, #11
 80058a2:	1d23      	adds	r3, r4, #4
 80058a4:	f020 0007 	bic.w	r0, r0, #7
 80058a8:	1ac3      	subs	r3, r0, r3
 80058aa:	d01b      	beq.n	80058e4 <_malloc_r+0xb0>
 80058ac:	425a      	negs	r2, r3
 80058ae:	50e2      	str	r2, [r4, r3]
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
 80058b2:	428c      	cmp	r4, r1
 80058b4:	bf0d      	iteet	eq
 80058b6:	6863      	ldreq	r3, [r4, #4]
 80058b8:	684b      	ldrne	r3, [r1, #4]
 80058ba:	6063      	strne	r3, [r4, #4]
 80058bc:	6013      	streq	r3, [r2, #0]
 80058be:	bf18      	it	ne
 80058c0:	460c      	movne	r4, r1
 80058c2:	e7e9      	b.n	8005898 <_malloc_r+0x64>
 80058c4:	460c      	mov	r4, r1
 80058c6:	6849      	ldr	r1, [r1, #4]
 80058c8:	e7ca      	b.n	8005860 <_malloc_r+0x2c>
 80058ca:	1cc4      	adds	r4, r0, #3
 80058cc:	f024 0403 	bic.w	r4, r4, #3
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	d005      	beq.n	80058e0 <_malloc_r+0xac>
 80058d4:	1a21      	subs	r1, r4, r0
 80058d6:	4630      	mov	r0, r6
 80058d8:	f000 f80a 	bl	80058f0 <_sbrk_r>
 80058dc:	3001      	adds	r0, #1
 80058de:	d0cd      	beq.n	800587c <_malloc_r+0x48>
 80058e0:	6025      	str	r5, [r4, #0]
 80058e2:	e7d9      	b.n	8005898 <_malloc_r+0x64>
 80058e4:	bd70      	pop	{r4, r5, r6, pc}
 80058e6:	bf00      	nop
 80058e8:	200001c0 	.word	0x200001c0
 80058ec:	200001c4 	.word	0x200001c4

080058f0 <_sbrk_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	4c06      	ldr	r4, [pc, #24]	; (800590c <_sbrk_r+0x1c>)
 80058f4:	2300      	movs	r3, #0
 80058f6:	4605      	mov	r5, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	f000 f80a 	bl	8005914 <_sbrk>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_sbrk_r+0x1a>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	b103      	cbz	r3, 800590a <_sbrk_r+0x1a>
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20000ac0 	.word	0x20000ac0

08005910 <__malloc_lock>:
 8005910:	4770      	bx	lr

08005912 <__malloc_unlock>:
 8005912:	4770      	bx	lr

08005914 <_sbrk>:
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <_sbrk+0x14>)
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	4602      	mov	r2, r0
 800591a:	b909      	cbnz	r1, 8005920 <_sbrk+0xc>
 800591c:	4903      	ldr	r1, [pc, #12]	; (800592c <_sbrk+0x18>)
 800591e:	6019      	str	r1, [r3, #0]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	4402      	add	r2, r0
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	4770      	bx	lr
 8005928:	200001c8 	.word	0x200001c8
 800592c:	20000ac4 	.word	0x20000ac4

08005930 <_init>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr

0800593c <_fini>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr
